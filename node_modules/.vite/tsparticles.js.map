{
  "version": 3,
  "sources": ["../@tsparticles/engine/browser/Core/Utils/Constants.js", "../@tsparticles/engine/browser/Enums/Directions/MoveDirection.js", "../@tsparticles/engine/browser/Utils/TypeUtils.js", "../@tsparticles/engine/browser/Core/Utils/Vectors.js", "../@tsparticles/engine/browser/Utils/NumberUtils.js", "../@tsparticles/engine/browser/Enums/Modes/AnimationMode.js", "../@tsparticles/engine/browser/Enums/AnimationStatus.js", "../@tsparticles/engine/browser/Enums/Types/DestroyType.js", "../@tsparticles/engine/browser/Enums/Directions/OutModeDirection.js", "../@tsparticles/engine/browser/Enums/Modes/PixelMode.js", "../@tsparticles/engine/browser/Enums/Types/StartValueType.js", "../@tsparticles/engine/browser/Utils/Utils.js", "../@tsparticles/engine/browser/Enums/Types/AlterType.js", "../@tsparticles/engine/browser/Utils/ColorUtils.js", "../@tsparticles/engine/browser/Utils/CanvasUtils.js", "../@tsparticles/engine/browser/Core/Canvas.js", "../@tsparticles/engine/browser/Enums/InteractivityDetect.js", "../@tsparticles/engine/browser/Core/Utils/EventListeners.js", "../@tsparticles/engine/browser/Enums/Types/EventType.js", "../@tsparticles/engine/browser/Options/Classes/OptionsColor.js", "../@tsparticles/engine/browser/Options/Classes/Background/Background.js", "../@tsparticles/engine/browser/Options/Classes/BackgroundMask/BackgroundMaskCover.js", "../@tsparticles/engine/browser/Options/Classes/BackgroundMask/BackgroundMask.js", "../@tsparticles/engine/browser/Options/Classes/FullScreen/FullScreen.js", "../@tsparticles/engine/browser/Options/Classes/Interactivity/Events/ClickEvent.js", "../@tsparticles/engine/browser/Enums/Types/DivType.js", "../@tsparticles/engine/browser/Options/Classes/Interactivity/Events/DivEvent.js", "../@tsparticles/engine/browser/Options/Classes/Interactivity/Events/Parallax.js", "../@tsparticles/engine/browser/Options/Classes/Interactivity/Events/HoverEvent.js", "../@tsparticles/engine/browser/Options/Classes/Interactivity/Events/ResizeEvent.js", "../@tsparticles/engine/browser/Options/Classes/Interactivity/Events/Events.js", "../@tsparticles/engine/browser/Options/Classes/Interactivity/Modes/Modes.js", "../@tsparticles/engine/browser/Options/Classes/Interactivity/Interactivity.js", "../@tsparticles/engine/browser/Options/Classes/ManualParticle.js", "../@tsparticles/engine/browser/Enums/Modes/ResponsiveMode.js", "../@tsparticles/engine/browser/Options/Classes/Responsive.js", "../@tsparticles/engine/browser/Enums/Modes/ThemeMode.js", "../@tsparticles/engine/browser/Options/Classes/Theme/ThemeDefault.js", "../@tsparticles/engine/browser/Options/Classes/Theme/Theme.js", "../@tsparticles/engine/browser/Options/Classes/AnimationOptions.js", "../@tsparticles/engine/browser/Options/Classes/ColorAnimation.js", "../@tsparticles/engine/browser/Options/Classes/HslAnimation.js", "../@tsparticles/engine/browser/Options/Classes/AnimatableColor.js", "../@tsparticles/engine/browser/Enums/Modes/CollisionMode.js", "../@tsparticles/engine/browser/Options/Classes/Particles/Collisions/CollisionsAbsorb.js", "../@tsparticles/engine/browser/Options/Classes/Particles/Collisions/CollisionsOverlap.js", "../@tsparticles/engine/browser/Options/Classes/ValueWithRandom.js", "../@tsparticles/engine/browser/Options/Classes/Particles/Bounce/ParticlesBounceFactor.js", "../@tsparticles/engine/browser/Options/Classes/Particles/Bounce/ParticlesBounce.js", "../@tsparticles/engine/browser/Options/Classes/Particles/Collisions/Collisions.js", "../@tsparticles/engine/browser/Options/Classes/Particles/Effect/Effect.js", "../@tsparticles/engine/browser/Options/Classes/Particles/Move/MoveAngle.js", "../@tsparticles/engine/browser/Options/Classes/Particles/Move/MoveAttract.js", "../@tsparticles/engine/browser/Options/Classes/Particles/Move/MoveCenter.js", "../@tsparticles/engine/browser/Options/Classes/Particles/Move/MoveGravity.js", "../@tsparticles/engine/browser/Options/Classes/Particles/Move/Path/MovePath.js", "../@tsparticles/engine/browser/Options/Classes/Particles/Move/MoveTrailFill.js", "../@tsparticles/engine/browser/Options/Classes/Particles/Move/MoveTrail.js", "../@tsparticles/engine/browser/Enums/Modes/OutMode.js", "../@tsparticles/engine/browser/Options/Classes/Particles/Move/OutModes.js", "../@tsparticles/engine/browser/Options/Classes/Particles/Move/Spin.js", "../@tsparticles/engine/browser/Options/Classes/Particles/Move/Move.js", "../@tsparticles/engine/browser/Options/Classes/Particles/Opacity/OpacityAnimation.js", "../@tsparticles/engine/browser/Options/Classes/Particles/Opacity/Opacity.js", "../@tsparticles/engine/browser/Options/Classes/Particles/Number/ParticlesDensity.js", "../@tsparticles/engine/browser/Enums/Modes/LimitMode.js", "../@tsparticles/engine/browser/Options/Classes/Particles/Number/ParticlesNumberLimit.js", "../@tsparticles/engine/browser/Options/Classes/Particles/Number/ParticlesNumber.js", "../@tsparticles/engine/browser/Options/Classes/Particles/Shadow.js", "../@tsparticles/engine/browser/Options/Classes/Particles/Shape/Shape.js", "../@tsparticles/engine/browser/Options/Classes/Particles/Size/SizeAnimation.js", "../@tsparticles/engine/browser/Options/Classes/Particles/Size/Size.js", "../@tsparticles/engine/browser/Options/Classes/Particles/Stroke.js", "../@tsparticles/engine/browser/Options/Classes/Particles/ZIndex/ZIndex.js", "../@tsparticles/engine/browser/Options/Classes/Particles/ParticlesOptions.js", "../@tsparticles/engine/browser/Utils/OptionsUtils.js", "../@tsparticles/engine/browser/Options/Classes/Options.js", "../@tsparticles/engine/browser/Enums/Types/InteractorType.js", "../@tsparticles/engine/browser/Core/Utils/InteractionManager.js", "../@tsparticles/engine/browser/Enums/Types/ParticleOutType.js", "../@tsparticles/engine/browser/Core/Particle.js", "../@tsparticles/engine/browser/Core/Utils/Point.js", "../@tsparticles/engine/browser/Types/RangeType.js", "../@tsparticles/engine/browser/Core/Utils/Ranges.js", "../@tsparticles/engine/browser/Core/Utils/QuadTree.js", "../@tsparticles/engine/browser/Core/Particles.js", "../@tsparticles/engine/browser/Core/Retina.js", "../@tsparticles/engine/browser/Core/Container.js", "../@tsparticles/engine/browser/Utils/EventDispatcher.js", "../@tsparticles/engine/browser/Core/Engine.js", "../@tsparticles/engine/browser/init.js", "../@tsparticles/engine/browser/Core/Utils/ExternalInteractorBase.js", "../@tsparticles/engine/browser/Core/Utils/ParticlesInteractorBase.js", "../@tsparticles/engine/browser/Enums/Directions/RotateDirection.js", "../@tsparticles/engine/browser/Enums/Types/GradientType.js", "../@tsparticles/engine/browser/Enums/Types/EasingType.js", "../@tsparticles/engine/browser/index.js", "../@tsparticles/plugin-absorbers/browser/Options/Classes/AbsorberSizeLimit.js", "../@tsparticles/plugin-absorbers/browser/Options/Classes/AbsorberSize.js", "../@tsparticles/plugin-absorbers/browser/Options/Classes/Absorber.js", "../@tsparticles/plugin-absorbers/browser/Enums/AbsorberClickMode.js", "../@tsparticles/plugin-absorbers/browser/AbsorberInstance.js", "../@tsparticles/plugin-absorbers/browser/Absorbers.js", "../@tsparticles/plugin-absorbers/browser/AbsorbersPlugin.js", "../@tsparticles/plugin-absorbers/browser/index.js", "../@tsparticles/updater-destroy/browser/Options/Classes/DestroyBounds.js", "../@tsparticles/updater-destroy/browser/Enums/DestroyMode.js", "../@tsparticles/updater-destroy/browser/Options/Classes/SplitFactor.js", "../@tsparticles/updater-destroy/browser/Options/Classes/SplitRate.js", "../@tsparticles/updater-destroy/browser/Options/Classes/Split.js", "../@tsparticles/updater-destroy/browser/Options/Classes/Destroy.js", "../@tsparticles/updater-destroy/browser/Utils.js", "../@tsparticles/updater-destroy/browser/DestroyUpdater.js", "../@tsparticles/updater-destroy/browser/index.js", "../@tsparticles/plugin-emitters/browser/Options/Classes/EmitterLife.js", "../@tsparticles/plugin-emitters/browser/Options/Classes/EmitterRate.js", "../@tsparticles/plugin-emitters/browser/Options/Classes/EmitterShapeReplace.js", "../@tsparticles/plugin-emitters/browser/Options/Classes/EmitterShape.js", "../@tsparticles/plugin-emitters/browser/Options/Classes/EmitterSize.js", "../@tsparticles/plugin-emitters/browser/Options/Classes/Emitter.js", "../@tsparticles/plugin-emitters/browser/Enums/EmitterClickMode.js", "../@tsparticles/plugin-emitters/browser/EmitterInstance.js", "../@tsparticles/plugin-emitters/browser/Emitters.js", "../@tsparticles/plugin-emitters/browser/EmittersPlugin.js", "../@tsparticles/plugin-emitters/browser/ShapeManager.js", "../@tsparticles/plugin-emitters/browser/EmitterShapeBase.js", "../@tsparticles/plugin-emitters/browser/index.js", "../@tsparticles/plugin-emitters-shape-circle/browser/EmittersCircleShape.js", "../@tsparticles/plugin-emitters-shape-circle/browser/EmittersCircleShapeGenerator.js", "../@tsparticles/plugin-emitters-shape-circle/browser/index.js", "../@tsparticles/plugin-emitters-shape-square/browser/EmittersSquareShape.js", "../@tsparticles/plugin-emitters-shape-square/browser/EmittersSquareShapeGenerator.js", "../@tsparticles/plugin-emitters-shape-square/browser/index.js", "../@tsparticles/interaction-external-trail/browser/Options/Classes/Trail.js", "../@tsparticles/interaction-external-trail/browser/TrailMaker.js", "../@tsparticles/interaction-external-trail/browser/index.js", "../@tsparticles/updater-roll/browser/RollMode.js", "../@tsparticles/updater-roll/browser/Utils.js", "../@tsparticles/updater-roll/browser/Options/Classes/RollLight.js", "../@tsparticles/updater-roll/browser/Options/Classes/Roll.js", "../@tsparticles/updater-roll/browser/RollUpdater.js", "../@tsparticles/updater-roll/browser/index.js", "../@tsparticles/move-base/browser/Utils.js", "../@tsparticles/move-base/browser/BaseMover.js", "../@tsparticles/move-base/browser/index.js", "../@tsparticles/shape-circle/browser/Utils.js", "../@tsparticles/shape-circle/browser/CircleDrawer.js", "../@tsparticles/shape-circle/browser/index.js", "../@tsparticles/updater-color/browser/ColorUpdater.js", "../@tsparticles/updater-color/browser/index.js", "../@tsparticles/plugin-hex-color/browser/HexColorManager.js", "../@tsparticles/plugin-hex-color/browser/index.js", "../@tsparticles/plugin-hsl-color/browser/HslColorManager.js", "../@tsparticles/plugin-hsl-color/browser/index.js", "../@tsparticles/updater-opacity/browser/OpacityUpdater.js", "../@tsparticles/updater-opacity/browser/index.js", "../@tsparticles/updater-out-modes/browser/Utils.js", "../@tsparticles/updater-out-modes/browser/BounceOutMode.js", "../@tsparticles/updater-out-modes/browser/DestroyOutMode.js", "../@tsparticles/updater-out-modes/browser/NoneOutMode.js", "../@tsparticles/updater-out-modes/browser/OutOutMode.js", "../@tsparticles/updater-out-modes/browser/OutOfCanvasUpdater.js", "../@tsparticles/updater-out-modes/browser/index.js", "../@tsparticles/plugin-rgb-color/browser/RgbColorManager.js", "../@tsparticles/plugin-rgb-color/browser/index.js", "../@tsparticles/updater-size/browser/SizeUpdater.js", "../@tsparticles/updater-size/browser/index.js", "../@tsparticles/basic/browser/index.js", "../@tsparticles/plugin-easing-quad/browser/index.js", "../@tsparticles/shape-emoji/browser/Utils.js", "../@tsparticles/shape-emoji/browser/EmojiDrawer.js", "../@tsparticles/shape-emoji/browser/index.js", "../@tsparticles/interaction-external-attract/browser/Utils.js", "../@tsparticles/interaction-external-attract/browser/Options/Classes/Attract.js", "../@tsparticles/interaction-external-attract/browser/Attractor.js", "../@tsparticles/interaction-external-attract/browser/index.js", "../@tsparticles/interaction-external-bounce/browser/Utils.js", "../@tsparticles/interaction-external-bounce/browser/Options/Classes/Bounce.js", "../@tsparticles/interaction-external-bounce/browser/Bouncer.js", "../@tsparticles/interaction-external-bounce/browser/index.js", "../@tsparticles/interaction-external-bubble/browser/Options/Classes/BubbleBase.js", "../@tsparticles/interaction-external-bubble/browser/Options/Classes/BubbleDiv.js", "../@tsparticles/interaction-external-bubble/browser/Options/Classes/Bubble.js", "../@tsparticles/interaction-external-bubble/browser/Enums.js", "../@tsparticles/interaction-external-bubble/browser/Utils.js", "../@tsparticles/interaction-external-bubble/browser/Bubbler.js", "../@tsparticles/interaction-external-bubble/browser/index.js", "../@tsparticles/interaction-external-connect/browser/Options/Classes/ConnectLinks.js", "../@tsparticles/interaction-external-connect/browser/Options/Classes/Connect.js", "../@tsparticles/interaction-external-connect/browser/Utils.js", "../@tsparticles/interaction-external-connect/browser/Connector.js", "../@tsparticles/interaction-external-connect/browser/index.js", "../@tsparticles/interaction-external-grab/browser/Options/Classes/GrabLinks.js", "../@tsparticles/interaction-external-grab/browser/Options/Classes/Grab.js", "../@tsparticles/interaction-external-grab/browser/Utils.js", "../@tsparticles/interaction-external-grab/browser/Grabber.js", "../@tsparticles/interaction-external-grab/browser/index.js", "../@tsparticles/interaction-external-pause/browser/Pauser.js", "../@tsparticles/interaction-external-pause/browser/index.js", "../@tsparticles/interaction-external-push/browser/Options/Classes/Push.js", "../@tsparticles/interaction-external-push/browser/Pusher.js", "../@tsparticles/interaction-external-push/browser/index.js", "../@tsparticles/interaction-external-remove/browser/Options/Classes/Remove.js", "../@tsparticles/interaction-external-remove/browser/Remover.js", "../@tsparticles/interaction-external-remove/browser/index.js", "../@tsparticles/interaction-external-repulse/browser/Options/Classes/RepulseBase.js", "../@tsparticles/interaction-external-repulse/browser/Options/Classes/RepulseDiv.js", "../@tsparticles/interaction-external-repulse/browser/Options/Classes/Repulse.js", "../@tsparticles/interaction-external-repulse/browser/Repulser.js", "../@tsparticles/interaction-external-repulse/browser/index.js", "../@tsparticles/interaction-external-slow/browser/Options/Classes/Slow.js", "../@tsparticles/interaction-external-slow/browser/Slower.js", "../@tsparticles/interaction-external-slow/browser/index.js", "../@tsparticles/shape-image/browser/Utils.js", "../@tsparticles/shape-image/browser/GifUtils/Constants.js", "../@tsparticles/shape-image/browser/GifUtils/ByteStream.js", "../@tsparticles/shape-image/browser/GifUtils/Enums/DisposalMethod.js", "../@tsparticles/shape-image/browser/GifUtils/Types/GIFDataHeaders.js", "../@tsparticles/shape-image/browser/GifUtils/Utils.js", "../@tsparticles/shape-image/browser/ImageDrawer.js", "../@tsparticles/shape-image/browser/Options/Classes/Preload.js", "../@tsparticles/shape-image/browser/ImagePreloader.js", "../@tsparticles/shape-image/browser/index.js", "../@tsparticles/updater-life/browser/Options/Classes/LifeDelay.js", "../@tsparticles/updater-life/browser/Options/Classes/LifeDuration.js", "../@tsparticles/updater-life/browser/Options/Classes/Life.js", "../@tsparticles/updater-life/browser/Utils.js", "../@tsparticles/updater-life/browser/LifeUpdater.js", "../@tsparticles/updater-life/browser/index.js", "../@tsparticles/shape-line/browser/Utils.js", "../@tsparticles/shape-line/browser/LineDrawer.js", "../@tsparticles/shape-line/browser/index.js", "../@tsparticles/move-parallax/browser/ParallaxMover.js", "../@tsparticles/move-parallax/browser/index.js", "../@tsparticles/interaction-particles-attract/browser/Attractor.js", "../@tsparticles/interaction-particles-attract/browser/index.js", "../@tsparticles/interaction-particles-collisions/browser/Absorb.js", "../@tsparticles/interaction-particles-collisions/browser/Bounce.js", "../@tsparticles/interaction-particles-collisions/browser/Destroy.js", "../@tsparticles/interaction-particles-collisions/browser/ResolveCollision.js", "../@tsparticles/interaction-particles-collisions/browser/Collider.js", "../@tsparticles/interaction-particles-collisions/browser/index.js", "../@tsparticles/interaction-particles-links/browser/CircleWarp.js", "../@tsparticles/interaction-particles-links/browser/Options/Classes/LinksShadow.js", "../@tsparticles/interaction-particles-links/browser/Options/Classes/LinksTriangle.js", "../@tsparticles/interaction-particles-links/browser/Options/Classes/Links.js", "../@tsparticles/interaction-particles-links/browser/Linker.js", "../@tsparticles/interaction-particles-links/browser/interaction.js", "../@tsparticles/interaction-particles-links/browser/Utils.js", "../@tsparticles/interaction-particles-links/browser/LinkInstance.js", "../@tsparticles/interaction-particles-links/browser/LinksPlugin.js", "../@tsparticles/interaction-particles-links/browser/plugin.js", "../@tsparticles/interaction-particles-links/browser/index.js", "../@tsparticles/shape-polygon/browser/Utils.js", "../@tsparticles/shape-polygon/browser/PolygonDrawerBase.js", "../@tsparticles/shape-polygon/browser/PolygonDrawer.js", "../@tsparticles/shape-polygon/browser/TriangleDrawer.js", "../@tsparticles/shape-polygon/browser/index.js", "../@tsparticles/updater-rotate/browser/Options/Classes/RotateAnimation.js", "../@tsparticles/updater-rotate/browser/Options/Classes/Rotate.js", "../@tsparticles/updater-rotate/browser/RotateUpdater.js", "../@tsparticles/updater-rotate/browser/index.js", "../@tsparticles/shape-square/browser/Utils.js", "../@tsparticles/shape-square/browser/SquareDrawer.js", "../@tsparticles/shape-square/browser/index.js", "../@tsparticles/shape-star/browser/Utils.js", "../@tsparticles/shape-star/browser/StarDrawer.js", "../@tsparticles/shape-star/browser/index.js", "../@tsparticles/updater-stroke-color/browser/StrokeColorUpdater.js", "../@tsparticles/updater-stroke-color/browser/index.js", "../@tsparticles/slim/browser/index.js", "../@tsparticles/shape-text/browser/Utils.js", "../@tsparticles/shape-text/browser/TextDrawer.js", "../@tsparticles/shape-text/browser/index.js", "../@tsparticles/updater-tilt/browser/TiltDirection.js", "../@tsparticles/updater-tilt/browser/Options/Classes/TiltAnimation.js", "../@tsparticles/updater-tilt/browser/Options/Classes/Tilt.js", "../@tsparticles/updater-tilt/browser/TiltUpdater.js", "../@tsparticles/updater-tilt/browser/index.js", "../@tsparticles/updater-twinkle/browser/Options/Classes/TwinkleValues.js", "../@tsparticles/updater-twinkle/browser/Options/Classes/Twinkle.js", "../@tsparticles/updater-twinkle/browser/TwinkleUpdater.js", "../@tsparticles/updater-twinkle/browser/index.js", "../@tsparticles/updater-wobble/browser/Options/Classes/WobbleSpeed.js", "../@tsparticles/updater-wobble/browser/Options/Classes/Wobble.js", "../@tsparticles/updater-wobble/browser/Utils.js", "../@tsparticles/updater-wobble/browser/WobbleUpdater.js", "../@tsparticles/updater-wobble/browser/index.js", "../tsparticles/browser/index.js"],
  "sourcesContent": ["export const generatedAttribute = \"generated\", mouseDownEvent = \"pointerdown\", mouseUpEvent = \"pointerup\", mouseLeaveEvent = \"pointerleave\", mouseOutEvent = \"pointerout\", mouseMoveEvent = \"pointermove\", touchStartEvent = \"touchstart\", touchEndEvent = \"touchend\", touchMoveEvent = \"touchmove\", touchCancelEvent = \"touchcancel\", resizeEvent = \"resize\", visibilityChangeEvent = \"visibilitychange\", errorPrefix = \"tsParticles - Error\", percentDenominator = 100, half = 0.5, millisecondsToSeconds = 1000, originPoint = {\n    x: 0,\n    y: 0,\n    z: 0,\n}, defaultTransform = {\n    a: 1,\n    b: 0,\n    c: 0,\n    d: 1,\n}, randomColorValue = \"random\", midColorValue = \"mid\", double = 2, doublePI = Math.PI * double, defaultFps = 60, defaultAlpha = 1, generatedTrue = \"true\", generatedFalse = \"false\", canvasTag = \"canvas\", defaultRetryCount = 0, squareExp = 2, qTreeCapacity = 4, defaultRemoveQuantity = 1, defaultRatio = 1, defaultReduceFactor = 1, subdivideCount = 4, inverseFactorNumerator = 1.0, rgbMax = 255, hMax = 360, sMax = 100, lMax = 100, hMin = 0, sMin = 0, hPhase = 60, empty = 0, quarter = 0.25, threeQuarter = half + quarter, minVelocity = 0, defaultTransformValue = 1, minimumSize = 0, minimumLength = 0, zIndexFactorOffset = 1, defaultOpacity = 1, clickRadius = 1, touchEndLengthOffset = 1, minCoordinate = 0, removeDeleteCount = 1, removeMinIndex = 0, defaultFpsLimit = 120, minFpsLimit = 0, canvasFirstIndex = 0, loadRandomFactor = 10000, loadMinIndex = 0, one = 1, none = 0, decayOffset = 1, tryCountIncrement = 1, minRetries = 0, rollFactor = 1, minZ = 0, defaultRadius = 0, posOffset = -quarter, sizeFactor = 1.5, minLimit = 0, countOffset = 1, minCount = 0, minIndex = 0, manualCount = 0, lengthOffset = 1, defaultDensityFactor = 1, deleteCount = 1, touchDelay = 500, manualDefaultPosition = 50, defaultAngle = 0, identity = 1, minStrokeWidth = 0, lFactor = 1, lMin = 0, rgbFactor = 255, triple = 3, sextuple = 6, sNormalizedOffset = 1, phaseNumerator = 1, defaultRgbMin = 0, defaultVelocity = 0, defaultLoops = 0, defaultTime = 0;\n", "export var MoveDirection;\n(function (MoveDirection) {\n    MoveDirection[\"bottom\"] = \"bottom\";\n    MoveDirection[\"bottomLeft\"] = \"bottom-left\";\n    MoveDirection[\"bottomRight\"] = \"bottom-right\";\n    MoveDirection[\"left\"] = \"left\";\n    MoveDirection[\"none\"] = \"none\";\n    MoveDirection[\"right\"] = \"right\";\n    MoveDirection[\"top\"] = \"top\";\n    MoveDirection[\"topLeft\"] = \"top-left\";\n    MoveDirection[\"topRight\"] = \"top-right\";\n    MoveDirection[\"outside\"] = \"outside\";\n    MoveDirection[\"inside\"] = \"inside\";\n})(MoveDirection || (MoveDirection = {}));\n", "export function isBoolean(arg) {\n    return typeof arg === \"boolean\";\n}\nexport function isString(arg) {\n    return typeof arg === \"string\";\n}\nexport function isNumber(arg) {\n    return typeof arg === \"number\";\n}\nexport function isFunction(arg) {\n    return typeof arg === \"function\";\n}\nexport function isObject(arg) {\n    return typeof arg === \"object\" && arg !== null;\n}\nexport function isArray(arg) {\n    return Array.isArray(arg);\n}\nexport function isNull(arg) {\n    return arg === null || arg === undefined;\n}\n", "import { errorPrefix, inverseFactorNumerator, none, originPoint, squareExp } from \"./Constants.js\";\nimport { isNumber } from \"../../Utils/TypeUtils.js\";\nexport class Vector3d {\n    constructor(xOrCoords, y, z) {\n        this._updateFromAngle = (angle, length) => {\n            this.x = Math.cos(angle) * length;\n            this.y = Math.sin(angle) * length;\n        };\n        if (!isNumber(xOrCoords) && xOrCoords) {\n            this.x = xOrCoords.x;\n            this.y = xOrCoords.y;\n            const coords3d = xOrCoords;\n            this.z = coords3d.z ? coords3d.z : originPoint.z;\n        }\n        else if (xOrCoords !== undefined && y !== undefined) {\n            this.x = xOrCoords;\n            this.y = y;\n            this.z = z ?? originPoint.z;\n        }\n        else {\n            throw new Error(`${errorPrefix} Vector3d not initialized correctly`);\n        }\n    }\n    static get origin() {\n        return Vector3d.create(originPoint.x, originPoint.y, originPoint.z);\n    }\n    get angle() {\n        return Math.atan2(this.y, this.x);\n    }\n    set angle(angle) {\n        this._updateFromAngle(angle, this.length);\n    }\n    get length() {\n        return Math.sqrt(this.getLengthSq());\n    }\n    set length(length) {\n        this._updateFromAngle(this.angle, length);\n    }\n    static clone(source) {\n        return Vector3d.create(source.x, source.y, source.z);\n    }\n    static create(x, y, z) {\n        return new Vector3d(x, y, z);\n    }\n    add(v) {\n        return Vector3d.create(this.x + v.x, this.y + v.y, this.z + v.z);\n    }\n    addTo(v) {\n        this.x += v.x;\n        this.y += v.y;\n        this.z += v.z;\n    }\n    copy() {\n        return Vector3d.clone(this);\n    }\n    distanceTo(v) {\n        return this.sub(v).length;\n    }\n    distanceToSq(v) {\n        return this.sub(v).getLengthSq();\n    }\n    div(n) {\n        return Vector3d.create(this.x / n, this.y / n, this.z / n);\n    }\n    divTo(n) {\n        this.x /= n;\n        this.y /= n;\n        this.z /= n;\n    }\n    getLengthSq() {\n        return this.x ** squareExp + this.y ** squareExp;\n    }\n    mult(n) {\n        return Vector3d.create(this.x * n, this.y * n, this.z * n);\n    }\n    multTo(n) {\n        this.x *= n;\n        this.y *= n;\n        this.z *= n;\n    }\n    normalize() {\n        const length = this.length;\n        if (length != none) {\n            this.multTo(inverseFactorNumerator / length);\n        }\n    }\n    rotate(angle) {\n        return Vector3d.create(this.x * Math.cos(angle) - this.y * Math.sin(angle), this.x * Math.sin(angle) + this.y * Math.cos(angle), originPoint.z);\n    }\n    setTo(c) {\n        this.x = c.x;\n        this.y = c.y;\n        const v3d = c;\n        this.z = v3d.z ? v3d.z : originPoint.z;\n    }\n    sub(v) {\n        return Vector3d.create(this.x - v.x, this.y - v.y, this.z - v.z);\n    }\n    subFrom(v) {\n        this.x -= v.x;\n        this.y -= v.y;\n        this.z -= v.z;\n    }\n}\nexport class Vector extends Vector3d {\n    constructor(xOrCoords, y) {\n        super(xOrCoords, y, originPoint.z);\n    }\n    static get origin() {\n        return Vector.create(originPoint.x, originPoint.y);\n    }\n    static clone(source) {\n        return Vector.create(source.x, source.y);\n    }\n    static create(x, y) {\n        return new Vector(x, y);\n    }\n}\n", "import { MoveDirection } from \"../Enums/Directions/MoveDirection.js\";\nimport { double, doublePI, empty, half, percentDenominator, quarter, threeQuarter } from \"../Core/Utils/Constants.js\";\nimport { Vector } from \"../Core/Utils/Vectors.js\";\nimport { isNumber } from \"./TypeUtils.js\";\nlet _random = Math.random;\nconst _animationLoop = {\n    nextFrame: (cb) => requestAnimationFrame(cb),\n    cancel: (idx) => cancelAnimationFrame(idx),\n};\nexport function setRandom(rnd = Math.random) {\n    _random = rnd;\n}\nexport function getRandom() {\n    const min = 0, max = 1;\n    return clamp(_random(), min, max - Number.EPSILON);\n}\nexport function setAnimationFunctions(nextFrame, cancel) {\n    _animationLoop.nextFrame = (callback) => nextFrame(callback);\n    _animationLoop.cancel = (handle) => cancel(handle);\n}\nexport function animate(fn) {\n    return _animationLoop.nextFrame(fn);\n}\nexport function cancelAnimation(handle) {\n    _animationLoop.cancel(handle);\n}\nexport function clamp(num, min, max) {\n    return Math.min(Math.max(num, min), max);\n}\nexport function mix(comp1, comp2, weight1, weight2) {\n    return Math.floor((comp1 * weight1 + comp2 * weight2) / (weight1 + weight2));\n}\nexport function randomInRange(r) {\n    const max = getRangeMax(r), minOffset = 0;\n    let min = getRangeMin(r);\n    if (max === min) {\n        min = minOffset;\n    }\n    return getRandom() * (max - min) + min;\n}\nexport function getRangeValue(value) {\n    return isNumber(value) ? value : randomInRange(value);\n}\nexport function getRangeMin(value) {\n    return isNumber(value) ? value : value.min;\n}\nexport function getRangeMax(value) {\n    return isNumber(value) ? value : value.max;\n}\nexport function setRangeValue(source, value) {\n    if (source === value || (value === undefined && isNumber(source))) {\n        return source;\n    }\n    const min = getRangeMin(source), max = getRangeMax(source);\n    return value !== undefined\n        ? {\n            min: Math.min(min, value),\n            max: Math.max(max, value),\n        }\n        : setRangeValue(min, max);\n}\nexport function getDistances(pointA, pointB) {\n    const dx = pointA.x - pointB.x, dy = pointA.y - pointB.y, squareExp = 2;\n    return { dx: dx, dy: dy, distance: Math.sqrt(dx ** squareExp + dy ** squareExp) };\n}\nexport function getDistance(pointA, pointB) {\n    return getDistances(pointA, pointB).distance;\n}\nexport function degToRad(degrees) {\n    const PIDeg = 180;\n    return (degrees * Math.PI) / PIDeg;\n}\nexport function getParticleDirectionAngle(direction, position, center) {\n    if (isNumber(direction)) {\n        return degToRad(direction);\n    }\n    switch (direction) {\n        case MoveDirection.top:\n            return -Math.PI * half;\n        case MoveDirection.topRight:\n            return -Math.PI * quarter;\n        case MoveDirection.right:\n            return empty;\n        case MoveDirection.bottomRight:\n            return Math.PI * quarter;\n        case MoveDirection.bottom:\n            return Math.PI * half;\n        case MoveDirection.bottomLeft:\n            return Math.PI * threeQuarter;\n        case MoveDirection.left:\n            return Math.PI;\n        case MoveDirection.topLeft:\n            return -Math.PI * threeQuarter;\n        case MoveDirection.inside:\n            return Math.atan2(center.y - position.y, center.x - position.x);\n        case MoveDirection.outside:\n            return Math.atan2(position.y - center.y, position.x - center.x);\n        default:\n            return getRandom() * doublePI;\n    }\n}\nexport function getParticleBaseVelocity(direction) {\n    const baseVelocity = Vector.origin;\n    baseVelocity.length = 1;\n    baseVelocity.angle = direction;\n    return baseVelocity;\n}\nexport function collisionVelocity(v1, v2, m1, m2) {\n    return Vector.create((v1.x * (m1 - m2)) / (m1 + m2) + (v2.x * double * m2) / (m1 + m2), v1.y);\n}\nexport function calcPositionFromSize(data) {\n    return data.position?.x !== undefined && data.position.y !== undefined\n        ? {\n            x: (data.position.x * data.size.width) / percentDenominator,\n            y: (data.position.y * data.size.height) / percentDenominator,\n        }\n        : undefined;\n}\nexport function calcPositionOrRandomFromSize(data) {\n    return {\n        x: ((data.position?.x ?? getRandom() * percentDenominator) * data.size.width) / percentDenominator,\n        y: ((data.position?.y ?? getRandom() * percentDenominator) * data.size.height) / percentDenominator,\n    };\n}\nexport function calcPositionOrRandomFromSizeRanged(data) {\n    const position = {\n        x: data.position?.x !== undefined ? getRangeValue(data.position.x) : undefined,\n        y: data.position?.y !== undefined ? getRangeValue(data.position.y) : undefined,\n    };\n    return calcPositionOrRandomFromSize({ size: data.size, position });\n}\nexport function calcExactPositionOrRandomFromSize(data) {\n    return {\n        x: data.position?.x ?? getRandom() * data.size.width,\n        y: data.position?.y ?? getRandom() * data.size.height,\n    };\n}\nexport function calcExactPositionOrRandomFromSizeRanged(data) {\n    const position = {\n        x: data.position?.x !== undefined ? getRangeValue(data.position.x) : undefined,\n        y: data.position?.y !== undefined ? getRangeValue(data.position.y) : undefined,\n    };\n    return calcExactPositionOrRandomFromSize({ size: data.size, position });\n}\nexport function parseAlpha(input) {\n    const defaultAlpha = 1;\n    if (!input) {\n        return defaultAlpha;\n    }\n    return input.endsWith(\"%\") ? parseFloat(input) / percentDenominator : parseFloat(input);\n}\n", "export var AnimationMode;\n(function (AnimationMode) {\n    AnimationMode[\"auto\"] = \"auto\";\n    AnimationMode[\"increase\"] = \"increase\";\n    AnimationMode[\"decrease\"] = \"decrease\";\n    AnimationMode[\"random\"] = \"random\";\n})(AnimationMode || (AnimationMode = {}));\n", "export var AnimationStatus;\n(function (AnimationStatus) {\n    AnimationStatus[\"increasing\"] = \"increasing\";\n    AnimationStatus[\"decreasing\"] = \"decreasing\";\n})(AnimationStatus || (AnimationStatus = {}));\n", "export var DestroyType;\n(function (DestroyType) {\n    DestroyType[\"none\"] = \"none\";\n    DestroyType[\"max\"] = \"max\";\n    DestroyType[\"min\"] = \"min\";\n})(DestroyType || (DestroyType = {}));\n", "export var OutModeDirection;\n(function (OutModeDirection) {\n    OutModeDirection[\"bottom\"] = \"bottom\";\n    OutModeDirection[\"left\"] = \"left\";\n    OutModeDirection[\"right\"] = \"right\";\n    OutModeDirection[\"top\"] = \"top\";\n})(OutModeDirection || (OutModeDirection = {}));\n", "export var PixelMode;\n(function (PixelMode) {\n    PixelMode[\"precise\"] = \"precise\";\n    PixelMode[\"percent\"] = \"percent\";\n})(PixelMode || (PixelMode = {}));\n", "export var StartValueType;\n(function (StartValueType) {\n    StartValueType[\"max\"] = \"max\";\n    StartValueType[\"min\"] = \"min\";\n    StartValueType[\"random\"] = \"random\";\n})(StartValueType || (StartValueType = {}));\n", "import { clamp, collisionVelocity, getDistances, getRandom, getRangeMax, getRangeMin, getRangeValue, randomInRange, } from \"./NumberUtils.js\";\nimport { half, millisecondsToSeconds, minVelocity, percentDenominator } from \"../Core/Utils/Constants.js\";\nimport { isArray, isNull, isObject } from \"./TypeUtils.js\";\nimport { AnimationMode } from \"../Enums/Modes/AnimationMode.js\";\nimport { AnimationStatus } from \"../Enums/AnimationStatus.js\";\nimport { DestroyType } from \"../Enums/Types/DestroyType.js\";\nimport { OutModeDirection } from \"../Enums/Directions/OutModeDirection.js\";\nimport { PixelMode } from \"../Enums/Modes/PixelMode.js\";\nimport { StartValueType } from \"../Enums/Types/StartValueType.js\";\nimport { Vector } from \"../Core/Utils/Vectors.js\";\nconst _logger = {\n    debug: console.debug,\n    error: console.error,\n    info: console.info,\n    log: console.log,\n    verbose: console.log,\n    warning: console.warn,\n};\nexport function setLogger(logger) {\n    _logger.debug = logger.debug || _logger.debug;\n    _logger.error = logger.error || _logger.error;\n    _logger.info = logger.info || _logger.info;\n    _logger.log = logger.log || _logger.log;\n    _logger.verbose = logger.verbose || _logger.verbose;\n    _logger.warning = logger.warning || _logger.warning;\n}\nexport function getLogger() {\n    return _logger;\n}\nfunction memoize(fn) {\n    const cache = new Map();\n    return (...args) => {\n        const key = JSON.stringify(args);\n        if (cache.has(key)) {\n            return cache.get(key);\n        }\n        const result = fn(...args);\n        cache.set(key, result);\n        return result;\n    };\n}\nfunction rectSideBounce(data) {\n    const res = { bounced: false }, { pSide, pOtherSide, rectSide, rectOtherSide, velocity, factor } = data;\n    if (pOtherSide.min < rectOtherSide.min ||\n        pOtherSide.min > rectOtherSide.max ||\n        pOtherSide.max < rectOtherSide.min ||\n        pOtherSide.max > rectOtherSide.max) {\n        return res;\n    }\n    if ((pSide.max >= rectSide.min && pSide.max <= (rectSide.max + rectSide.min) * half && velocity > minVelocity) ||\n        (pSide.min <= rectSide.max && pSide.min > (rectSide.max + rectSide.min) * half && velocity < minVelocity)) {\n        res.velocity = velocity * -factor;\n        res.bounced = true;\n    }\n    return res;\n}\nfunction checkSelector(element, selectors) {\n    const res = executeOnSingleOrMultiple(selectors, selector => {\n        return element.matches(selector);\n    });\n    return isArray(res) ? res.some(t => t) : res;\n}\nexport function isSsr() {\n    return typeof window === \"undefined\" || !window || typeof window.document === \"undefined\" || !window.document;\n}\nexport function hasMatchMedia() {\n    return !isSsr() && typeof matchMedia !== \"undefined\";\n}\nexport function safeMatchMedia(query) {\n    if (!hasMatchMedia()) {\n        return;\n    }\n    return matchMedia(query);\n}\nexport function safeIntersectionObserver(callback) {\n    if (isSsr() || typeof IntersectionObserver === \"undefined\") {\n        return;\n    }\n    return new IntersectionObserver(callback);\n}\nexport function safeMutationObserver(callback) {\n    if (isSsr() || typeof MutationObserver === \"undefined\") {\n        return;\n    }\n    return new MutationObserver(callback);\n}\nexport function isInArray(value, array) {\n    const invalidIndex = -1;\n    return value === array || (isArray(array) && array.indexOf(value) > invalidIndex);\n}\nexport async function loadFont(font, weight) {\n    try {\n        await document.fonts.load(`${weight ?? \"400\"} 36px '${font ?? \"Verdana\"}'`);\n    }\n    catch {\n    }\n}\nexport function arrayRandomIndex(array) {\n    return Math.floor(getRandom() * array.length);\n}\nexport function itemFromArray(array, index, useIndex = true) {\n    return array[index !== undefined && useIndex ? index % array.length : arrayRandomIndex(array)];\n}\nexport function isPointInside(point, size, offset, radius, direction) {\n    const minRadius = 0;\n    return areBoundsInside(calculateBounds(point, radius ?? minRadius), size, offset, direction);\n}\nexport function areBoundsInside(bounds, size, offset, direction) {\n    let inside = true;\n    if (!direction || direction === OutModeDirection.bottom) {\n        inside = bounds.top < size.height + offset.x;\n    }\n    if (inside && (!direction || direction === OutModeDirection.left)) {\n        inside = bounds.right > offset.x;\n    }\n    if (inside && (!direction || direction === OutModeDirection.right)) {\n        inside = bounds.left < size.width + offset.y;\n    }\n    if (inside && (!direction || direction === OutModeDirection.top)) {\n        inside = bounds.bottom > offset.y;\n    }\n    return inside;\n}\nexport function calculateBounds(point, radius) {\n    return {\n        bottom: point.y + radius,\n        left: point.x - radius,\n        right: point.x + radius,\n        top: point.y - radius,\n    };\n}\nexport function deepExtend(destination, ...sources) {\n    for (const source of sources) {\n        if (source === undefined || source === null) {\n            continue;\n        }\n        if (!isObject(source)) {\n            destination = source;\n            continue;\n        }\n        const sourceIsArray = Array.isArray(source);\n        if (sourceIsArray && (isObject(destination) || !destination || !Array.isArray(destination))) {\n            destination = [];\n        }\n        else if (!sourceIsArray && (isObject(destination) || !destination || Array.isArray(destination))) {\n            destination = {};\n        }\n        for (const key in source) {\n            if (key === \"__proto__\") {\n                continue;\n            }\n            const sourceDict = source, value = sourceDict[key], destDict = destination;\n            destDict[key] =\n                isObject(value) && Array.isArray(value)\n                    ? value.map(v => deepExtend(destDict[key], v))\n                    : deepExtend(destDict[key], value);\n        }\n    }\n    return destination;\n}\nexport function isDivModeEnabled(mode, divs) {\n    return !!findItemFromSingleOrMultiple(divs, t => t.enable && isInArray(mode, t.mode));\n}\nexport function divModeExecute(mode, divs, callback) {\n    executeOnSingleOrMultiple(divs, div => {\n        const divMode = div.mode, divEnabled = div.enable;\n        if (divEnabled && isInArray(mode, divMode)) {\n            singleDivModeExecute(div, callback);\n        }\n    });\n}\nexport function singleDivModeExecute(div, callback) {\n    const selectors = div.selectors;\n    executeOnSingleOrMultiple(selectors, selector => {\n        callback(selector, div);\n    });\n}\nexport function divMode(divs, element) {\n    if (!element || !divs) {\n        return;\n    }\n    return findItemFromSingleOrMultiple(divs, div => {\n        return checkSelector(element, div.selectors);\n    });\n}\nexport function circleBounceDataFromParticle(p) {\n    return {\n        position: p.getPosition(),\n        radius: p.getRadius(),\n        mass: p.getMass(),\n        velocity: p.velocity,\n        factor: Vector.create(getRangeValue(p.options.bounce.horizontal.value), getRangeValue(p.options.bounce.vertical.value)),\n    };\n}\nexport function circleBounce(p1, p2) {\n    const { x: xVelocityDiff, y: yVelocityDiff } = p1.velocity.sub(p2.velocity), [pos1, pos2] = [p1.position, p2.position], { dx: xDist, dy: yDist } = getDistances(pos2, pos1), minimumDistance = 0;\n    if (xVelocityDiff * xDist + yVelocityDiff * yDist < minimumDistance) {\n        return;\n    }\n    const angle = -Math.atan2(yDist, xDist), m1 = p1.mass, m2 = p2.mass, u1 = p1.velocity.rotate(angle), u2 = p2.velocity.rotate(angle), v1 = collisionVelocity(u1, u2, m1, m2), v2 = collisionVelocity(u2, u1, m1, m2), vFinal1 = v1.rotate(-angle), vFinal2 = v2.rotate(-angle);\n    p1.velocity.x = vFinal1.x * p1.factor.x;\n    p1.velocity.y = vFinal1.y * p1.factor.y;\n    p2.velocity.x = vFinal2.x * p2.factor.x;\n    p2.velocity.y = vFinal2.y * p2.factor.y;\n}\nexport function rectBounce(particle, divBounds) {\n    const pPos = particle.getPosition(), size = particle.getRadius(), bounds = calculateBounds(pPos, size), bounceOptions = particle.options.bounce, resH = rectSideBounce({\n        pSide: {\n            min: bounds.left,\n            max: bounds.right,\n        },\n        pOtherSide: {\n            min: bounds.top,\n            max: bounds.bottom,\n        },\n        rectSide: {\n            min: divBounds.left,\n            max: divBounds.right,\n        },\n        rectOtherSide: {\n            min: divBounds.top,\n            max: divBounds.bottom,\n        },\n        velocity: particle.velocity.x,\n        factor: getRangeValue(bounceOptions.horizontal.value),\n    });\n    if (resH.bounced) {\n        if (resH.velocity !== undefined) {\n            particle.velocity.x = resH.velocity;\n        }\n        if (resH.position !== undefined) {\n            particle.position.x = resH.position;\n        }\n    }\n    const resV = rectSideBounce({\n        pSide: {\n            min: bounds.top,\n            max: bounds.bottom,\n        },\n        pOtherSide: {\n            min: bounds.left,\n            max: bounds.right,\n        },\n        rectSide: {\n            min: divBounds.top,\n            max: divBounds.bottom,\n        },\n        rectOtherSide: {\n            min: divBounds.left,\n            max: divBounds.right,\n        },\n        velocity: particle.velocity.y,\n        factor: getRangeValue(bounceOptions.vertical.value),\n    });\n    if (resV.bounced) {\n        if (resV.velocity !== undefined) {\n            particle.velocity.y = resV.velocity;\n        }\n        if (resV.position !== undefined) {\n            particle.position.y = resV.position;\n        }\n    }\n}\nexport function executeOnSingleOrMultiple(obj, callback) {\n    const defaultIndex = 0;\n    return isArray(obj) ? obj.map((item, index) => callback(item, index)) : callback(obj, defaultIndex);\n}\nexport function itemFromSingleOrMultiple(obj, index, useIndex) {\n    return isArray(obj) ? itemFromArray(obj, index, useIndex) : obj;\n}\nexport function findItemFromSingleOrMultiple(obj, callback) {\n    if (isArray(obj)) {\n        return obj.find((t, index) => callback(t, index));\n    }\n    const defaultIndex = 0;\n    return callback(obj, defaultIndex) ? obj : undefined;\n}\nexport function initParticleNumericAnimationValue(options, pxRatio) {\n    const valueRange = options.value, animationOptions = options.animation, res = {\n        delayTime: getRangeValue(animationOptions.delay) * millisecondsToSeconds,\n        enable: animationOptions.enable,\n        value: getRangeValue(options.value) * pxRatio,\n        max: getRangeMax(valueRange) * pxRatio,\n        min: getRangeMin(valueRange) * pxRatio,\n        loops: 0,\n        maxLoops: getRangeValue(animationOptions.count),\n        time: 0,\n    }, decayOffset = 1;\n    if (animationOptions.enable) {\n        res.decay = decayOffset - getRangeValue(animationOptions.decay);\n        switch (animationOptions.mode) {\n            case AnimationMode.increase:\n                res.status = AnimationStatus.increasing;\n                break;\n            case AnimationMode.decrease:\n                res.status = AnimationStatus.decreasing;\n                break;\n            case AnimationMode.random:\n                res.status = getRandom() >= half ? AnimationStatus.increasing : AnimationStatus.decreasing;\n                break;\n        }\n        const autoStatus = animationOptions.mode === AnimationMode.auto;\n        switch (animationOptions.startValue) {\n            case StartValueType.min:\n                res.value = res.min;\n                if (autoStatus) {\n                    res.status = AnimationStatus.increasing;\n                }\n                break;\n            case StartValueType.max:\n                res.value = res.max;\n                if (autoStatus) {\n                    res.status = AnimationStatus.decreasing;\n                }\n                break;\n            case StartValueType.random:\n            default:\n                res.value = randomInRange(res);\n                if (autoStatus) {\n                    res.status = getRandom() >= half ? AnimationStatus.increasing : AnimationStatus.decreasing;\n                }\n                break;\n        }\n    }\n    res.initialValue = res.value;\n    return res;\n}\nfunction getPositionOrSize(positionOrSize, canvasSize) {\n    const isPercent = positionOrSize.mode === PixelMode.percent;\n    if (!isPercent) {\n        const { mode: _, ...rest } = positionOrSize;\n        return rest;\n    }\n    const isPosition = \"x\" in positionOrSize;\n    if (isPosition) {\n        return {\n            x: (positionOrSize.x / percentDenominator) * canvasSize.width,\n            y: (positionOrSize.y / percentDenominator) * canvasSize.height,\n        };\n    }\n    else {\n        return {\n            width: (positionOrSize.width / percentDenominator) * canvasSize.width,\n            height: (positionOrSize.height / percentDenominator) * canvasSize.height,\n        };\n    }\n}\nexport function getPosition(position, canvasSize) {\n    return getPositionOrSize(position, canvasSize);\n}\nexport function getSize(size, canvasSize) {\n    return getPositionOrSize(size, canvasSize);\n}\nfunction checkDestroy(particle, destroyType, value, minValue, maxValue) {\n    switch (destroyType) {\n        case DestroyType.max:\n            if (value >= maxValue) {\n                particle.destroy();\n            }\n            break;\n        case DestroyType.min:\n            if (value <= minValue) {\n                particle.destroy();\n            }\n            break;\n    }\n}\nexport function updateAnimation(particle, data, changeDirection, destroyType, delta) {\n    const minLoops = 0, minDelay = 0, identity = 1, minVelocity = 0, minDecay = 1;\n    if (particle.destroyed ||\n        !data ||\n        !data.enable ||\n        ((data.maxLoops ?? minLoops) > minLoops && (data.loops ?? minLoops) > (data.maxLoops ?? minLoops))) {\n        return;\n    }\n    const velocity = (data.velocity ?? minVelocity) * delta.factor, minValue = data.min, maxValue = data.max, decay = data.decay ?? minDecay;\n    if (!data.time) {\n        data.time = 0;\n    }\n    if ((data.delayTime ?? minDelay) > minDelay && data.time < (data.delayTime ?? minDelay)) {\n        data.time += delta.value;\n    }\n    if ((data.delayTime ?? minDelay) > minDelay && data.time < (data.delayTime ?? minDelay)) {\n        return;\n    }\n    switch (data.status) {\n        case AnimationStatus.increasing:\n            if (data.value >= maxValue) {\n                if (changeDirection) {\n                    data.status = AnimationStatus.decreasing;\n                }\n                else {\n                    data.value -= maxValue;\n                }\n                if (!data.loops) {\n                    data.loops = minLoops;\n                }\n                data.loops++;\n            }\n            else {\n                data.value += velocity;\n            }\n            break;\n        case AnimationStatus.decreasing:\n            if (data.value <= minValue) {\n                if (changeDirection) {\n                    data.status = AnimationStatus.increasing;\n                }\n                else {\n                    data.value += maxValue;\n                }\n                if (!data.loops) {\n                    data.loops = minLoops;\n                }\n                data.loops++;\n            }\n            else {\n                data.value -= velocity;\n            }\n    }\n    if (data.velocity && decay !== identity) {\n        data.velocity *= decay;\n    }\n    checkDestroy(particle, destroyType, data.value, minValue, maxValue);\n    if (!particle.destroyed) {\n        data.value = clamp(data.value, minValue, maxValue);\n    }\n}\nexport function cloneStyle(style) {\n    const clonedStyle = document.createElement(\"div\").style;\n    if (!style) {\n        return clonedStyle;\n    }\n    for (const key in style) {\n        const styleKey = style[key];\n        if (!Object.prototype.hasOwnProperty.call(style, key) || isNull(styleKey)) {\n            continue;\n        }\n        const styleValue = style.getPropertyValue?.(styleKey);\n        if (!styleValue) {\n            continue;\n        }\n        const stylePriority = style.getPropertyPriority?.(styleKey);\n        if (!stylePriority) {\n            clonedStyle.setProperty?.(styleKey, styleValue);\n        }\n        else {\n            clonedStyle.setProperty?.(styleKey, styleValue, stylePriority);\n        }\n    }\n    return clonedStyle;\n}\nfunction computeFullScreenStyle(zIndex) {\n    const fullScreenStyle = document.createElement(\"div\").style, radix = 10, style = {\n        width: \"100%\",\n        height: \"100%\",\n        margin: \"0\",\n        padding: \"0\",\n        borderWidth: \"0\",\n        position: \"fixed\",\n        zIndex: zIndex.toString(radix),\n        \"z-index\": zIndex.toString(radix),\n        top: \"0\",\n        left: \"0\",\n    };\n    for (const key in style) {\n        const value = style[key];\n        fullScreenStyle.setProperty(key, value);\n    }\n    return fullScreenStyle;\n}\nexport const getFullScreenStyle = memoize(computeFullScreenStyle);\n", "export var AlterType;\n(function (AlterType) {\n    AlterType[\"darken\"] = \"darken\";\n    AlterType[\"enlighten\"] = \"enlighten\";\n})(AlterType || (AlterType = {}));\n", "import { clamp, getRandom, getRangeMax, getRangeMin, getRangeValue, mix, randomInRange, setRangeValue, } from \"./NumberUtils.js\";\nimport { decayOffset, defaultLoops, defaultOpacity, defaultRgbMin, defaultTime, defaultVelocity, double, hMax, hMin, hPhase, half, identity, lMax, lMin, midColorValue, millisecondsToSeconds, percentDenominator, phaseNumerator, randomColorValue, rgbFactor, rgbMax, sMax, sMin, sNormalizedOffset, sextuple, triple, } from \"../Core/Utils/Constants.js\";\nimport { isArray, isString } from \"./TypeUtils.js\";\nimport { AnimationStatus } from \"../Enums/AnimationStatus.js\";\nimport { itemFromArray } from \"./Utils.js\";\nfunction stringToRgba(engine, input) {\n    if (!input) {\n        return;\n    }\n    for (const manager of engine.colorManagers.values()) {\n        if (input.startsWith(manager.stringPrefix)) {\n            return manager.parseString(input);\n        }\n    }\n}\nexport function rangeColorToRgb(engine, input, index, useIndex = true) {\n    if (!input) {\n        return;\n    }\n    const color = isString(input) ? { value: input } : input;\n    if (isString(color.value)) {\n        return colorToRgb(engine, color.value, index, useIndex);\n    }\n    if (isArray(color.value)) {\n        return rangeColorToRgb(engine, {\n            value: itemFromArray(color.value, index, useIndex),\n        });\n    }\n    for (const manager of engine.colorManagers.values()) {\n        const res = manager.handleRangeColor(color);\n        if (res) {\n            return res;\n        }\n    }\n}\nexport function colorToRgb(engine, input, index, useIndex = true) {\n    if (!input) {\n        return;\n    }\n    const color = isString(input) ? { value: input } : input;\n    if (isString(color.value)) {\n        return color.value === randomColorValue ? getRandomRgbColor() : stringToRgb(engine, color.value);\n    }\n    if (isArray(color.value)) {\n        return colorToRgb(engine, {\n            value: itemFromArray(color.value, index, useIndex),\n        });\n    }\n    for (const manager of engine.colorManagers.values()) {\n        const res = manager.handleColor(color);\n        if (res) {\n            return res;\n        }\n    }\n}\nexport function colorToHsl(engine, color, index, useIndex = true) {\n    const rgb = colorToRgb(engine, color, index, useIndex);\n    return rgb ? rgbToHsl(rgb) : undefined;\n}\nexport function rangeColorToHsl(engine, color, index, useIndex = true) {\n    const rgb = rangeColorToRgb(engine, color, index, useIndex);\n    return rgb ? rgbToHsl(rgb) : undefined;\n}\nexport function rgbToHsl(color) {\n    const r1 = color.r / rgbMax, g1 = color.g / rgbMax, b1 = color.b / rgbMax, max = Math.max(r1, g1, b1), min = Math.min(r1, g1, b1), res = {\n        h: hMin,\n        l: (max + min) * half,\n        s: sMin,\n    };\n    if (max !== min) {\n        res.s = res.l < half ? (max - min) / (max + min) : (max - min) / (double - max - min);\n        res.h =\n            r1 === max\n                ? (g1 - b1) / (max - min)\n                : (res.h = g1 === max ? double + (b1 - r1) / (max - min) : double * double + (r1 - g1) / (max - min));\n    }\n    res.l *= lMax;\n    res.s *= sMax;\n    res.h *= hPhase;\n    if (res.h < hMin) {\n        res.h += hMax;\n    }\n    if (res.h >= hMax) {\n        res.h -= hMax;\n    }\n    return res;\n}\nexport function stringToAlpha(engine, input) {\n    return stringToRgba(engine, input)?.a;\n}\nexport function stringToRgb(engine, input) {\n    return stringToRgba(engine, input);\n}\nexport function hslToRgb(hsl) {\n    const h = ((hsl.h % hMax) + hMax) % hMax, s = Math.max(sMin, Math.min(sMax, hsl.s)), l = Math.max(lMin, Math.min(lMax, hsl.l)), hNormalized = h / hMax, sNormalized = s / sMax, lNormalized = l / lMax;\n    if (s === sMin) {\n        const grayscaleValue = Math.round(lNormalized * rgbFactor);\n        return { r: grayscaleValue, g: grayscaleValue, b: grayscaleValue };\n    }\n    const channel = (temp1, temp2, temp3) => {\n        const temp3Min = 0, temp3Max = 1;\n        if (temp3 < temp3Min) {\n            temp3++;\n        }\n        if (temp3 > temp3Max) {\n            temp3--;\n        }\n        if (temp3 * sextuple < temp3Max) {\n            return temp1 + (temp2 - temp1) * sextuple * temp3;\n        }\n        if (temp3 * double < temp3Max) {\n            return temp2;\n        }\n        if (temp3 * triple < temp3Max * double) {\n            const temp3Offset = double / triple;\n            return temp1 + (temp2 - temp1) * (temp3Offset - temp3) * sextuple;\n        }\n        return temp1;\n    }, temp1 = lNormalized < half\n        ? lNormalized * (sNormalizedOffset + sNormalized)\n        : lNormalized + sNormalized - lNormalized * sNormalized, temp2 = double * lNormalized - temp1, phaseThird = phaseNumerator / triple, red = Math.min(rgbFactor, rgbFactor * channel(temp2, temp1, hNormalized + phaseThird)), green = Math.min(rgbFactor, rgbFactor * channel(temp2, temp1, hNormalized)), blue = Math.min(rgbFactor, rgbFactor * channel(temp2, temp1, hNormalized - phaseThird));\n    return { r: Math.round(red), g: Math.round(green), b: Math.round(blue) };\n}\nexport function hslaToRgba(hsla) {\n    const rgbResult = hslToRgb(hsla);\n    return {\n        a: hsla.a,\n        b: rgbResult.b,\n        g: rgbResult.g,\n        r: rgbResult.r,\n    };\n}\nexport function getRandomRgbColor(min) {\n    const fixedMin = min ?? defaultRgbMin, fixedMax = rgbMax + identity;\n    return {\n        b: Math.floor(randomInRange(setRangeValue(fixedMin, fixedMax))),\n        g: Math.floor(randomInRange(setRangeValue(fixedMin, fixedMax))),\n        r: Math.floor(randomInRange(setRangeValue(fixedMin, fixedMax))),\n    };\n}\nexport function getStyleFromRgb(color, opacity) {\n    return `rgba(${color.r}, ${color.g}, ${color.b}, ${opacity ?? defaultOpacity})`;\n}\nexport function getStyleFromHsl(color, opacity) {\n    return `hsla(${color.h}, ${color.s}%, ${color.l}%, ${opacity ?? defaultOpacity})`;\n}\nexport function colorMix(color1, color2, size1, size2) {\n    let rgb1 = color1, rgb2 = color2;\n    if (rgb1.r === undefined) {\n        rgb1 = hslToRgb(color1);\n    }\n    if (rgb2.r === undefined) {\n        rgb2 = hslToRgb(color2);\n    }\n    return {\n        b: mix(rgb1.b, rgb2.b, size1, size2),\n        g: mix(rgb1.g, rgb2.g, size1, size2),\n        r: mix(rgb1.r, rgb2.r, size1, size2),\n    };\n}\nexport function getLinkColor(p1, p2, linkColor) {\n    if (linkColor === randomColorValue) {\n        return getRandomRgbColor();\n    }\n    else if (linkColor === midColorValue) {\n        const sourceColor = p1.getFillColor() ?? p1.getStrokeColor(), destColor = p2?.getFillColor() ?? p2?.getStrokeColor();\n        if (sourceColor && destColor && p2) {\n            return colorMix(sourceColor, destColor, p1.getRadius(), p2.getRadius());\n        }\n        else {\n            const hslColor = sourceColor ?? destColor;\n            if (hslColor) {\n                return hslToRgb(hslColor);\n            }\n        }\n    }\n    else {\n        return linkColor;\n    }\n}\nexport function getLinkRandomColor(engine, optColor, blink, consent) {\n    const color = isString(optColor) ? optColor : optColor.value;\n    if (color === randomColorValue) {\n        if (consent) {\n            return rangeColorToRgb(engine, {\n                value: color,\n            });\n        }\n        if (blink) {\n            return randomColorValue;\n        }\n        return midColorValue;\n    }\n    else if (color === midColorValue) {\n        return midColorValue;\n    }\n    else {\n        return rangeColorToRgb(engine, {\n            value: color,\n        });\n    }\n}\nexport function getHslFromAnimation(animation) {\n    return animation !== undefined\n        ? {\n            h: animation.h.value,\n            s: animation.s.value,\n            l: animation.l.value,\n        }\n        : undefined;\n}\nexport function getHslAnimationFromHsl(hsl, animationOptions, reduceFactor) {\n    const resColor = {\n        h: {\n            enable: false,\n            value: hsl.h,\n        },\n        s: {\n            enable: false,\n            value: hsl.s,\n        },\n        l: {\n            enable: false,\n            value: hsl.l,\n        },\n    };\n    if (animationOptions) {\n        setColorAnimation(resColor.h, animationOptions.h, reduceFactor);\n        setColorAnimation(resColor.s, animationOptions.s, reduceFactor);\n        setColorAnimation(resColor.l, animationOptions.l, reduceFactor);\n    }\n    return resColor;\n}\nfunction setColorAnimation(colorValue, colorAnimation, reduceFactor) {\n    colorValue.enable = colorAnimation.enable;\n    if (colorValue.enable) {\n        colorValue.velocity = (getRangeValue(colorAnimation.speed) / percentDenominator) * reduceFactor;\n        colorValue.decay = decayOffset - getRangeValue(colorAnimation.decay);\n        colorValue.status = AnimationStatus.increasing;\n        colorValue.loops = defaultLoops;\n        colorValue.maxLoops = getRangeValue(colorAnimation.count);\n        colorValue.time = defaultTime;\n        colorValue.delayTime = getRangeValue(colorAnimation.delay) * millisecondsToSeconds;\n        if (!colorAnimation.sync) {\n            colorValue.velocity *= getRandom();\n            colorValue.value *= getRandom();\n        }\n        colorValue.initialValue = colorValue.value;\n        colorValue.offset = setRangeValue(colorAnimation.offset);\n    }\n    else {\n        colorValue.velocity = defaultVelocity;\n    }\n}\nexport function updateColorValue(data, range, decrease, delta) {\n    const minLoops = 0, minDelay = 0, identity = 1, minVelocity = 0, minOffset = 0, velocityFactor = 3.6;\n    if (!data ||\n        !data.enable ||\n        ((data.maxLoops ?? minLoops) > minLoops && (data.loops ?? minLoops) > (data.maxLoops ?? minLoops))) {\n        return;\n    }\n    if (!data.time) {\n        data.time = 0;\n    }\n    if ((data.delayTime ?? minDelay) > minDelay && data.time < (data.delayTime ?? minDelay)) {\n        data.time += delta.value;\n    }\n    if ((data.delayTime ?? minDelay) > minDelay && data.time < (data.delayTime ?? minDelay)) {\n        return;\n    }\n    const offset = data.offset ? randomInRange(data.offset) : minOffset, velocity = (data.velocity ?? minVelocity) * delta.factor + offset * velocityFactor, decay = data.decay ?? identity, max = getRangeMax(range), min = getRangeMin(range);\n    if (!decrease || data.status === AnimationStatus.increasing) {\n        data.value += velocity;\n        if (data.value > max) {\n            if (!data.loops) {\n                data.loops = 0;\n            }\n            data.loops++;\n            if (decrease) {\n                data.status = AnimationStatus.decreasing;\n            }\n            else {\n                data.value -= max;\n            }\n        }\n    }\n    else {\n        data.value -= velocity;\n        const minValue = 0;\n        if (data.value < minValue) {\n            if (!data.loops) {\n                data.loops = 0;\n            }\n            data.loops++;\n            data.status = AnimationStatus.increasing;\n        }\n    }\n    if (data.velocity && decay !== identity) {\n        data.velocity *= decay;\n    }\n    data.value = clamp(data.value, min, max);\n}\nexport function updateColor(color, delta) {\n    if (!color) {\n        return;\n    }\n    const { h, s, l } = color, ranges = {\n        h: { min: 0, max: 360 },\n        s: { min: 0, max: 100 },\n        l: { min: 0, max: 100 },\n    };\n    if (h) {\n        updateColorValue(h, ranges.h, false, delta);\n    }\n    if (s) {\n        updateColorValue(s, ranges.s, true, delta);\n    }\n    if (l) {\n        updateColorValue(l, ranges.l, true, delta);\n    }\n}\n", "import { defaultAngle, defaultTransform, identity, lFactor, minStrokeWidth, originPoint, } from \"../Core/Utils/Constants.js\";\nimport { AlterType } from \"../Enums/Types/AlterType.js\";\nimport { getStyleFromRgb } from \"./ColorUtils.js\";\nexport function drawLine(context, begin, end) {\n    context.beginPath();\n    context.moveTo(begin.x, begin.y);\n    context.lineTo(end.x, end.y);\n    context.closePath();\n}\nexport function paintBase(context, dimension, baseColor) {\n    context.fillStyle = baseColor ?? \"rgba(0,0,0,0)\";\n    context.fillRect(originPoint.x, originPoint.y, dimension.width, dimension.height);\n}\nexport function paintImage(context, dimension, image, opacity) {\n    if (!image) {\n        return;\n    }\n    context.globalAlpha = opacity;\n    context.drawImage(image, originPoint.x, originPoint.y, dimension.width, dimension.height);\n    context.globalAlpha = 1;\n}\nexport function clear(context, dimension) {\n    context.clearRect(originPoint.x, originPoint.y, dimension.width, dimension.height);\n}\nexport function drawParticle(data) {\n    const { container, context, particle, delta, colorStyles, backgroundMask, composite, radius, opacity, shadow, transform, } = data, pos = particle.getPosition(), angle = particle.rotation + (particle.pathRotation ? particle.velocity.angle : defaultAngle), rotateData = {\n        sin: Math.sin(angle),\n        cos: Math.cos(angle),\n    }, rotating = !!angle, transformData = {\n        a: rotateData.cos * (transform.a ?? defaultTransform.a),\n        b: rotating ? rotateData.sin * (transform.b ?? identity) : (transform.b ?? defaultTransform.b),\n        c: rotating ? -rotateData.sin * (transform.c ?? identity) : (transform.c ?? defaultTransform.c),\n        d: rotateData.cos * (transform.d ?? defaultTransform.d),\n    };\n    context.setTransform(transformData.a, transformData.b, transformData.c, transformData.d, pos.x, pos.y);\n    if (backgroundMask) {\n        context.globalCompositeOperation = composite;\n    }\n    const shadowColor = particle.shadowColor;\n    if (shadow.enable && shadowColor) {\n        context.shadowBlur = shadow.blur;\n        context.shadowColor = getStyleFromRgb(shadowColor);\n        context.shadowOffsetX = shadow.offset.x;\n        context.shadowOffsetY = shadow.offset.y;\n    }\n    if (colorStyles.fill) {\n        context.fillStyle = colorStyles.fill;\n    }\n    const strokeWidth = particle.strokeWidth ?? minStrokeWidth;\n    context.lineWidth = strokeWidth;\n    if (colorStyles.stroke) {\n        context.strokeStyle = colorStyles.stroke;\n    }\n    const drawData = {\n        container,\n        context,\n        particle,\n        radius,\n        opacity,\n        delta,\n        transformData,\n        strokeWidth,\n    };\n    drawShape(drawData);\n    drawShapeAfterDraw(drawData);\n    drawEffect(drawData);\n    context.globalCompositeOperation = \"source-over\";\n    context.resetTransform();\n}\nexport function drawEffect(data) {\n    const { container, context, particle, radius, opacity, delta, transformData } = data;\n    if (!particle.effect) {\n        return;\n    }\n    const drawer = container.effectDrawers.get(particle.effect);\n    if (!drawer) {\n        return;\n    }\n    drawer.draw({\n        context,\n        particle,\n        radius,\n        opacity,\n        delta,\n        pixelRatio: container.retina.pixelRatio,\n        transformData: { ...transformData },\n    });\n}\nexport function drawShape(data) {\n    const { container, context, particle, radius, opacity, delta, strokeWidth, transformData } = data;\n    if (!particle.shape) {\n        return;\n    }\n    const drawer = container.shapeDrawers.get(particle.shape);\n    if (!drawer) {\n        return;\n    }\n    context.beginPath();\n    drawer.draw({\n        context,\n        particle,\n        radius,\n        opacity,\n        delta,\n        pixelRatio: container.retina.pixelRatio,\n        transformData: { ...transformData },\n    });\n    if (particle.shapeClose) {\n        context.closePath();\n    }\n    if (strokeWidth > minStrokeWidth) {\n        context.stroke();\n    }\n    if (particle.shapeFill) {\n        context.fill();\n    }\n}\nexport function drawShapeAfterDraw(data) {\n    const { container, context, particle, radius, opacity, delta, transformData } = data;\n    if (!particle.shape) {\n        return;\n    }\n    const drawer = container.shapeDrawers.get(particle.shape);\n    if (!drawer?.afterDraw) {\n        return;\n    }\n    drawer.afterDraw({\n        context,\n        particle,\n        radius,\n        opacity,\n        delta,\n        pixelRatio: container.retina.pixelRatio,\n        transformData: { ...transformData },\n    });\n}\nexport function drawPlugin(context, plugin, delta) {\n    if (!plugin.draw) {\n        return;\n    }\n    plugin.draw(context, delta);\n}\nexport function drawParticlePlugin(context, plugin, particle, delta) {\n    if (!plugin.drawParticle) {\n        return;\n    }\n    plugin.drawParticle(context, particle, delta);\n}\nexport function alterHsl(color, type, value) {\n    return {\n        h: color.h,\n        s: color.s,\n        l: color.l + (type === AlterType.darken ? -lFactor : lFactor) * value,\n    };\n}\n", "import { clear, drawParticle, drawParticlePlugin, drawPlugin, paintBase, paintImage } from \"../Utils/CanvasUtils.js\";\nimport { cloneStyle, getFullScreenStyle, getLogger, safeMutationObserver } from \"../Utils/Utils.js\";\nimport { defaultOpacity, defaultTransformValue, generatedAttribute, inverseFactorNumerator, minimumLength, minimumSize, zIndexFactorOffset, } from \"./Utils/Constants.js\";\nimport { getStyleFromHsl, getStyleFromRgb, rangeColorToHsl, rangeColorToRgb } from \"../Utils/ColorUtils.js\";\nfunction setTransformValue(factor, newFactor, key) {\n    const newValue = newFactor[key];\n    if (newValue !== undefined) {\n        factor[key] = (factor[key] ?? defaultTransformValue) * newValue;\n    }\n}\nfunction setStyle(canvas, style, important = false) {\n    if (!style) {\n        return;\n    }\n    const element = canvas;\n    if (!element) {\n        return;\n    }\n    const elementStyle = element.style;\n    if (!elementStyle) {\n        return;\n    }\n    const keys = new Set();\n    for (const key in elementStyle) {\n        if (!Object.prototype.hasOwnProperty.call(elementStyle, key)) {\n            continue;\n        }\n        keys.add(elementStyle[key]);\n    }\n    for (const key in style) {\n        if (!Object.prototype.hasOwnProperty.call(style, key)) {\n            continue;\n        }\n        keys.add(style[key]);\n    }\n    for (const key of keys) {\n        const value = style.getPropertyValue(key);\n        if (!value) {\n            elementStyle.removeProperty(key);\n        }\n        else {\n            elementStyle.setProperty(key, value, important ? \"important\" : \"\");\n        }\n    }\n}\nexport class Canvas {\n    constructor(container, engine) {\n        this.container = container;\n        this._applyPostDrawUpdaters = particle => {\n            for (const updater of this._postDrawUpdaters) {\n                updater.afterDraw?.(particle);\n            }\n        };\n        this._applyPreDrawUpdaters = (ctx, particle, radius, zOpacity, colorStyles, transform) => {\n            for (const updater of this._preDrawUpdaters) {\n                if (updater.getColorStyles) {\n                    const { fill, stroke } = updater.getColorStyles(particle, ctx, radius, zOpacity);\n                    if (fill) {\n                        colorStyles.fill = fill;\n                    }\n                    if (stroke) {\n                        colorStyles.stroke = stroke;\n                    }\n                }\n                if (updater.getTransformValues) {\n                    const updaterTransform = updater.getTransformValues(particle);\n                    for (const key in updaterTransform) {\n                        setTransformValue(transform, updaterTransform, key);\n                    }\n                }\n                updater.beforeDraw?.(particle);\n            }\n        };\n        this._applyResizePlugins = () => {\n            for (const plugin of this._resizePlugins) {\n                plugin.resize?.();\n            }\n        };\n        this._getPluginParticleColors = particle => {\n            let fColor, sColor;\n            for (const plugin of this._colorPlugins) {\n                if (!fColor && plugin.particleFillColor) {\n                    fColor = rangeColorToHsl(this._engine, plugin.particleFillColor(particle));\n                }\n                if (!sColor && plugin.particleStrokeColor) {\n                    sColor = rangeColorToHsl(this._engine, plugin.particleStrokeColor(particle));\n                }\n                if (fColor && sColor) {\n                    break;\n                }\n            }\n            return [fColor, sColor];\n        };\n        this._initCover = async () => {\n            const options = this.container.actualOptions, cover = options.backgroundMask.cover, color = cover.color;\n            if (color) {\n                const coverRgb = rangeColorToRgb(this._engine, color);\n                if (coverRgb) {\n                    const coverColor = {\n                        ...coverRgb,\n                        a: cover.opacity,\n                    };\n                    this._coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n                }\n            }\n            else {\n                await new Promise((resolve, reject) => {\n                    if (!cover.image) {\n                        return;\n                    }\n                    const img = document.createElement(\"img\");\n                    img.addEventListener(\"load\", () => {\n                        this._coverImage = {\n                            image: img,\n                            opacity: cover.opacity,\n                        };\n                        resolve();\n                    });\n                    img.addEventListener(\"error\", evt => {\n                        reject(evt.error);\n                    });\n                    img.src = cover.image;\n                });\n            }\n        };\n        this._initStyle = () => {\n            const element = this.element, options = this.container.actualOptions;\n            if (!element) {\n                return;\n            }\n            if (this._fullScreen) {\n                this._setFullScreenStyle();\n            }\n            else {\n                this._resetOriginalStyle();\n            }\n            for (const key in options.style) {\n                if (!key || !options.style || !Object.prototype.hasOwnProperty.call(options.style, key)) {\n                    continue;\n                }\n                const value = options.style[key];\n                if (!value) {\n                    continue;\n                }\n                element.style.setProperty(key, value, \"important\");\n            }\n        };\n        this._initTrail = async () => {\n            const options = this.container.actualOptions, trail = options.particles.move.trail, trailFill = trail.fill;\n            if (!trail.enable) {\n                return;\n            }\n            const opacity = inverseFactorNumerator / trail.length;\n            if (trailFill.color) {\n                const fillColor = rangeColorToRgb(this._engine, trailFill.color);\n                if (!fillColor) {\n                    return;\n                }\n                this._trailFill = {\n                    color: {\n                        ...fillColor,\n                    },\n                    opacity,\n                };\n            }\n            else {\n                await new Promise((resolve, reject) => {\n                    if (!trailFill.image) {\n                        return;\n                    }\n                    const img = document.createElement(\"img\");\n                    img.addEventListener(\"load\", () => {\n                        this._trailFill = {\n                            image: img,\n                            opacity,\n                        };\n                        resolve();\n                    });\n                    img.addEventListener(\"error\", evt => {\n                        reject(evt.error);\n                    });\n                    img.src = trailFill.image;\n                });\n            }\n        };\n        this._paintBase = baseColor => {\n            this.draw(ctx => paintBase(ctx, this.size, baseColor));\n        };\n        this._paintImage = (image, opacity) => {\n            this.draw(ctx => paintImage(ctx, this.size, image, opacity));\n        };\n        this._repairStyle = () => {\n            const element = this.element;\n            if (!element) {\n                return;\n            }\n            this._safeMutationObserver(observer => observer.disconnect());\n            this._initStyle();\n            this.initBackground();\n            this._safeMutationObserver(observer => {\n                if (!element || !(element instanceof Node)) {\n                    return;\n                }\n                observer.observe(element, { attributes: true });\n            });\n        };\n        this._resetOriginalStyle = () => {\n            const element = this.element, originalStyle = this._originalStyle;\n            if (!element || !originalStyle) {\n                return;\n            }\n            setStyle(element, originalStyle, true);\n        };\n        this._safeMutationObserver = callback => {\n            if (!this._mutationObserver) {\n                return;\n            }\n            callback(this._mutationObserver);\n        };\n        this._setFullScreenStyle = () => {\n            const element = this.element;\n            if (!element) {\n                return;\n            }\n            setStyle(element, getFullScreenStyle(this.container.actualOptions.fullScreen.zIndex), true);\n        };\n        this._engine = engine;\n        this._standardSize = {\n            height: 0,\n            width: 0,\n        };\n        const pxRatio = container.retina.pixelRatio, stdSize = this._standardSize;\n        this.size = {\n            height: stdSize.height * pxRatio,\n            width: stdSize.width * pxRatio,\n        };\n        this._context = null;\n        this._generated = false;\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n    }\n    get _fullScreen() {\n        return this.container.actualOptions.fullScreen.enable;\n    }\n    clear() {\n        const options = this.container.actualOptions, trail = options.particles.move.trail, trailFill = this._trailFill;\n        if (options.backgroundMask.enable) {\n            this.paint();\n        }\n        else if (trail.enable && trail.length > minimumLength && trailFill) {\n            if (trailFill.color) {\n                this._paintBase(getStyleFromRgb(trailFill.color, trailFill.opacity));\n            }\n            else if (trailFill.image) {\n                this._paintImage(trailFill.image, trailFill.opacity);\n            }\n        }\n        else if (options.clear) {\n            this.draw(ctx => {\n                clear(ctx, this.size);\n            });\n        }\n    }\n    destroy() {\n        this.stop();\n        if (this._generated) {\n            const element = this.element;\n            element?.remove();\n            this.element = undefined;\n        }\n        else {\n            this._resetOriginalStyle();\n        }\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n    }\n    draw(cb) {\n        const ctx = this._context;\n        if (!ctx) {\n            return;\n        }\n        return cb(ctx);\n    }\n    drawAsync(cb) {\n        const ctx = this._context;\n        if (!ctx) {\n            return undefined;\n        }\n        return cb(ctx);\n    }\n    drawParticle(particle, delta) {\n        if (particle.spawning || particle.destroyed) {\n            return;\n        }\n        const radius = particle.getRadius();\n        if (radius <= minimumSize) {\n            return;\n        }\n        const pfColor = particle.getFillColor(), psColor = particle.getStrokeColor() ?? pfColor;\n        let [fColor, sColor] = this._getPluginParticleColors(particle);\n        if (!fColor) {\n            fColor = pfColor;\n        }\n        if (!sColor) {\n            sColor = psColor;\n        }\n        if (!fColor && !sColor) {\n            return;\n        }\n        this.draw((ctx) => {\n            const container = this.container, options = container.actualOptions, zIndexOptions = particle.options.zIndex, zIndexFactor = zIndexFactorOffset - particle.zIndexFactor, zOpacityFactor = zIndexFactor ** zIndexOptions.opacityRate, opacity = particle.bubble.opacity ?? particle.opacity?.value ?? defaultOpacity, strokeOpacity = particle.strokeOpacity ?? opacity, zOpacity = opacity * zOpacityFactor, zStrokeOpacity = strokeOpacity * zOpacityFactor, transform = {}, colorStyles = {\n                fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined,\n            };\n            colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n            this._applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform);\n            drawParticle({\n                container,\n                context: ctx,\n                particle,\n                delta,\n                colorStyles,\n                backgroundMask: options.backgroundMask.enable,\n                composite: options.backgroundMask.composite,\n                radius: radius * zIndexFactor ** zIndexOptions.sizeRate,\n                opacity: zOpacity,\n                shadow: particle.options.shadow,\n                transform,\n            });\n            this._applyPostDrawUpdaters(particle);\n        });\n    }\n    drawParticlePlugin(plugin, particle, delta) {\n        this.draw(ctx => drawParticlePlugin(ctx, plugin, particle, delta));\n    }\n    drawPlugin(plugin, delta) {\n        this.draw(ctx => drawPlugin(ctx, plugin, delta));\n    }\n    async init() {\n        this._safeMutationObserver(obs => obs.disconnect());\n        this._mutationObserver = safeMutationObserver(records => {\n            for (const record of records) {\n                if (record.type === \"attributes\" && record.attributeName === \"style\") {\n                    this._repairStyle();\n                }\n            }\n        });\n        this.resize();\n        this._initStyle();\n        await this._initCover();\n        try {\n            await this._initTrail();\n        }\n        catch (e) {\n            getLogger().error(e);\n        }\n        this.initBackground();\n        this._safeMutationObserver(obs => {\n            if (!this.element || !(this.element instanceof Node)) {\n                return;\n            }\n            obs.observe(this.element, { attributes: true });\n        });\n        this.initUpdaters();\n        this.initPlugins();\n        this.paint();\n    }\n    initBackground() {\n        const options = this.container.actualOptions, background = options.background, element = this.element;\n        if (!element) {\n            return;\n        }\n        const elementStyle = element.style;\n        if (!elementStyle) {\n            return;\n        }\n        if (background.color) {\n            const color = rangeColorToRgb(this._engine, background.color);\n            elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n        }\n        else {\n            elementStyle.backgroundColor = \"\";\n        }\n        elementStyle.backgroundImage = background.image || \"\";\n        elementStyle.backgroundPosition = background.position || \"\";\n        elementStyle.backgroundRepeat = background.repeat || \"\";\n        elementStyle.backgroundSize = background.size || \"\";\n    }\n    initPlugins() {\n        this._resizePlugins = [];\n        for (const plugin of this.container.plugins.values()) {\n            if (plugin.resize) {\n                this._resizePlugins.push(plugin);\n            }\n            if (plugin.particleFillColor ?? plugin.particleStrokeColor) {\n                this._colorPlugins.push(plugin);\n            }\n        }\n    }\n    initUpdaters() {\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        for (const updater of this.container.particles.updaters) {\n            if (updater.afterDraw) {\n                this._postDrawUpdaters.push(updater);\n            }\n            if (updater.getColorStyles ?? updater.getTransformValues ?? updater.beforeDraw) {\n                this._preDrawUpdaters.push(updater);\n            }\n        }\n    }\n    loadCanvas(canvas) {\n        if (this._generated && this.element) {\n            this.element.remove();\n        }\n        this._generated =\n            canvas.dataset && generatedAttribute in canvas.dataset\n                ? canvas.dataset[generatedAttribute] === \"true\"\n                : this._generated;\n        this.element = canvas;\n        this.element.ariaHidden = \"true\";\n        this._originalStyle = cloneStyle(this.element.style);\n        const standardSize = this._standardSize;\n        standardSize.height = canvas.offsetHeight;\n        standardSize.width = canvas.offsetWidth;\n        const pxRatio = this.container.retina.pixelRatio, retinaSize = this.size;\n        canvas.height = retinaSize.height = standardSize.height * pxRatio;\n        canvas.width = retinaSize.width = standardSize.width * pxRatio;\n        this._context = this.element.getContext(\"2d\");\n        this._safeMutationObserver(obs => obs.disconnect());\n        this.container.retina.init();\n        this.initBackground();\n        this._safeMutationObserver(obs => {\n            if (!this.element || !(this.element instanceof Node)) {\n                return;\n            }\n            obs.observe(this.element, { attributes: true });\n        });\n    }\n    paint() {\n        const options = this.container.actualOptions;\n        this.draw(ctx => {\n            if (options.backgroundMask.enable && options.backgroundMask.cover) {\n                clear(ctx, this.size);\n                if (this._coverImage) {\n                    this._paintImage(this._coverImage.image, this._coverImage.opacity);\n                }\n                else if (this._coverColorStyle) {\n                    this._paintBase(this._coverColorStyle);\n                }\n                else {\n                    this._paintBase();\n                }\n            }\n            else {\n                this._paintBase();\n            }\n        });\n    }\n    resize() {\n        if (!this.element) {\n            return false;\n        }\n        const container = this.container, currentSize = container.canvas._standardSize, newSize = {\n            width: this.element.offsetWidth,\n            height: this.element.offsetHeight,\n        }, pxRatio = container.retina.pixelRatio, retinaSize = {\n            width: newSize.width * pxRatio,\n            height: newSize.height * pxRatio,\n        };\n        if (newSize.height === currentSize.height &&\n            newSize.width === currentSize.width &&\n            retinaSize.height === this.element.height &&\n            retinaSize.width === this.element.width) {\n            return false;\n        }\n        const oldSize = { ...currentSize };\n        currentSize.height = newSize.height;\n        currentSize.width = newSize.width;\n        const canvasSize = this.size;\n        this.element.width = canvasSize.width = retinaSize.width;\n        this.element.height = canvasSize.height = retinaSize.height;\n        if (this.container.started) {\n            container.particles.setResizeFactor({\n                width: currentSize.width / oldSize.width,\n                height: currentSize.height / oldSize.height,\n            });\n        }\n        return true;\n    }\n    stop() {\n        this._safeMutationObserver(obs => obs.disconnect());\n        this._mutationObserver = undefined;\n        this.draw(ctx => clear(ctx, this.size));\n    }\n    async windowResize() {\n        if (!this.element || !this.resize()) {\n            return;\n        }\n        const container = this.container, needsRefresh = container.updateActualOptions();\n        container.particles.setDensity();\n        this._applyResizePlugins();\n        if (needsRefresh) {\n            await container.refresh();\n        }\n    }\n}\n", "export var InteractivityDetect;\n(function (InteractivityDetect) {\n    InteractivityDetect[\"canvas\"] = \"canvas\";\n    InteractivityDetect[\"parent\"] = \"parent\";\n    InteractivityDetect[\"window\"] = \"window\";\n})(InteractivityDetect || (InteractivityDetect = {}));\n", "import { double, lengthOffset, millisecondsToSeconds, minCoordinate, mouseDownEvent, mouseLeaveEvent, mouseMoveEvent, mouseOutEvent, mouseUpEvent, resizeEvent, touchCancelEvent, touchDelay, touchEndEvent, touchMoveEvent, touchStartEvent, visibilityChangeEvent, } from \"./Constants.js\";\nimport { executeOnSingleOrMultiple, safeMatchMedia } from \"../../Utils/Utils.js\";\nimport { InteractivityDetect } from \"../../Enums/InteractivityDetect.js\";\nimport { isBoolean } from \"../../Utils/TypeUtils.js\";\nfunction manageListener(element, event, handler, add, options) {\n    if (add) {\n        let addOptions = { passive: true };\n        if (isBoolean(options)) {\n            addOptions.capture = options;\n        }\n        else if (options !== undefined) {\n            addOptions = options;\n        }\n        element.addEventListener(event, handler, addOptions);\n    }\n    else {\n        const removeOptions = options;\n        element.removeEventListener(event, handler, removeOptions);\n    }\n}\nexport class EventListeners {\n    constructor(container) {\n        this.container = container;\n        this._doMouseTouchClick = e => {\n            const container = this.container, options = container.actualOptions;\n            if (this._canPush) {\n                const mouseInteractivity = container.interactivity.mouse, mousePos = mouseInteractivity.position;\n                if (!mousePos) {\n                    return;\n                }\n                mouseInteractivity.clickPosition = { ...mousePos };\n                mouseInteractivity.clickTime = new Date().getTime();\n                const onClick = options.interactivity.events.onClick;\n                executeOnSingleOrMultiple(onClick.mode, mode => this.container.handleClickMode(mode));\n            }\n            if (e.type === \"touchend\") {\n                setTimeout(() => this._mouseTouchFinish(), touchDelay);\n            }\n        };\n        this._handleThemeChange = (e) => {\n            const mediaEvent = e, container = this.container, options = container.options, defaultThemes = options.defaultThemes, themeName = mediaEvent.matches ? defaultThemes.dark : defaultThemes.light, theme = options.themes.find(theme => theme.name === themeName);\n            if (theme?.default.auto) {\n                void container.loadTheme(themeName);\n            }\n        };\n        this._handleVisibilityChange = () => {\n            const container = this.container, options = container.actualOptions;\n            this._mouseTouchFinish();\n            if (!options.pauseOnBlur) {\n                return;\n            }\n            if (document?.hidden) {\n                container.pageHidden = true;\n                container.pause();\n            }\n            else {\n                container.pageHidden = false;\n                if (container.animationStatus) {\n                    void container.play(true);\n                }\n                else {\n                    void container.draw(true);\n                }\n            }\n        };\n        this._handleWindowResize = () => {\n            if (this._resizeTimeout) {\n                clearTimeout(this._resizeTimeout);\n                delete this._resizeTimeout;\n            }\n            const handleResize = async () => {\n                const canvas = this.container.canvas;\n                await canvas?.windowResize();\n            };\n            this._resizeTimeout = setTimeout(() => void handleResize(), this.container.actualOptions.interactivity.events.resize.delay * millisecondsToSeconds);\n        };\n        this._manageInteractivityListeners = (mouseLeaveTmpEvent, add) => {\n            const handlers = this._handlers, container = this.container, options = container.actualOptions, interactivityEl = container.interactivity.element;\n            if (!interactivityEl) {\n                return;\n            }\n            const html = interactivityEl, canvasEl = container.canvas.element;\n            if (canvasEl) {\n                canvasEl.style.pointerEvents = html === canvasEl ? \"initial\" : \"none\";\n            }\n            if (!(options.interactivity.events.onHover.enable || options.interactivity.events.onClick.enable)) {\n                return;\n            }\n            manageListener(interactivityEl, mouseMoveEvent, handlers.mouseMove, add);\n            manageListener(interactivityEl, touchStartEvent, handlers.touchStart, add);\n            manageListener(interactivityEl, touchMoveEvent, handlers.touchMove, add);\n            if (!options.interactivity.events.onClick.enable) {\n                manageListener(interactivityEl, touchEndEvent, handlers.touchEnd, add);\n            }\n            else {\n                manageListener(interactivityEl, touchEndEvent, handlers.touchEndClick, add);\n                manageListener(interactivityEl, mouseUpEvent, handlers.mouseUp, add);\n                manageListener(interactivityEl, mouseDownEvent, handlers.mouseDown, add);\n            }\n            manageListener(interactivityEl, mouseLeaveTmpEvent, handlers.mouseLeave, add);\n            manageListener(interactivityEl, touchCancelEvent, handlers.touchCancel, add);\n        };\n        this._manageListeners = add => {\n            const handlers = this._handlers, container = this.container, options = container.actualOptions, detectType = options.interactivity.detectsOn, canvasEl = container.canvas.element;\n            let mouseLeaveTmpEvent = mouseLeaveEvent;\n            if (detectType === InteractivityDetect.window) {\n                container.interactivity.element = window;\n                mouseLeaveTmpEvent = mouseOutEvent;\n            }\n            else if (detectType === InteractivityDetect.parent && canvasEl) {\n                container.interactivity.element = canvasEl.parentElement ?? canvasEl.parentNode;\n            }\n            else {\n                container.interactivity.element = canvasEl;\n            }\n            this._manageMediaMatch(add);\n            this._manageResize(add);\n            this._manageInteractivityListeners(mouseLeaveTmpEvent, add);\n            if (document) {\n                manageListener(document, visibilityChangeEvent, handlers.visibilityChange, add, false);\n            }\n        };\n        this._manageMediaMatch = add => {\n            const handlers = this._handlers, mediaMatch = safeMatchMedia(\"(prefers-color-scheme: dark)\");\n            if (!mediaMatch) {\n                return;\n            }\n            if (mediaMatch.addEventListener !== undefined) {\n                manageListener(mediaMatch, \"change\", handlers.themeChange, add);\n                return;\n            }\n            if (mediaMatch.addListener === undefined) {\n                return;\n            }\n            if (add) {\n                mediaMatch.addListener(handlers.oldThemeChange);\n            }\n            else {\n                mediaMatch.removeListener(handlers.oldThemeChange);\n            }\n        };\n        this._manageResize = add => {\n            const handlers = this._handlers, container = this.container, options = container.actualOptions;\n            if (!options.interactivity.events.resize) {\n                return;\n            }\n            if (typeof ResizeObserver === \"undefined\") {\n                manageListener(window, resizeEvent, handlers.resize, add);\n                return;\n            }\n            const canvasEl = container.canvas.element;\n            if (this._resizeObserver && !add) {\n                if (canvasEl) {\n                    this._resizeObserver.unobserve(canvasEl);\n                }\n                this._resizeObserver.disconnect();\n                delete this._resizeObserver;\n            }\n            else if (!this._resizeObserver && add && canvasEl) {\n                this._resizeObserver = new ResizeObserver((entries) => {\n                    const entry = entries.find(e => e.target === canvasEl);\n                    if (!entry) {\n                        return;\n                    }\n                    this._handleWindowResize();\n                });\n                this._resizeObserver.observe(canvasEl);\n            }\n        };\n        this._mouseDown = () => {\n            const { interactivity } = this.container;\n            if (!interactivity) {\n                return;\n            }\n            const { mouse } = interactivity;\n            mouse.clicking = true;\n            mouse.downPosition = mouse.position;\n        };\n        this._mouseTouchClick = e => {\n            const container = this.container, options = container.actualOptions, { mouse } = container.interactivity;\n            mouse.inside = true;\n            let handled = false;\n            const mousePosition = mouse.position;\n            if (!mousePosition || !options.interactivity.events.onClick.enable) {\n                return;\n            }\n            for (const plugin of container.plugins.values()) {\n                if (!plugin.clickPositionValid) {\n                    continue;\n                }\n                handled = plugin.clickPositionValid(mousePosition);\n                if (handled) {\n                    break;\n                }\n            }\n            if (!handled) {\n                this._doMouseTouchClick(e);\n            }\n            mouse.clicking = false;\n        };\n        this._mouseTouchFinish = () => {\n            const interactivity = this.container.interactivity;\n            if (!interactivity) {\n                return;\n            }\n            const mouse = interactivity.mouse;\n            delete mouse.position;\n            delete mouse.clickPosition;\n            delete mouse.downPosition;\n            interactivity.status = mouseLeaveEvent;\n            mouse.inside = false;\n            mouse.clicking = false;\n        };\n        this._mouseTouchMove = e => {\n            const container = this.container, options = container.actualOptions, interactivity = container.interactivity, canvasEl = container.canvas.element;\n            if (!interactivity?.element) {\n                return;\n            }\n            interactivity.mouse.inside = true;\n            let pos;\n            if (e.type.startsWith(\"pointer\")) {\n                this._canPush = true;\n                const mouseEvent = e;\n                if (interactivity.element === window) {\n                    if (canvasEl) {\n                        const clientRect = canvasEl.getBoundingClientRect();\n                        pos = {\n                            x: mouseEvent.clientX - clientRect.left,\n                            y: mouseEvent.clientY - clientRect.top,\n                        };\n                    }\n                }\n                else if (options.interactivity.detectsOn === InteractivityDetect.parent) {\n                    const source = mouseEvent.target, target = mouseEvent.currentTarget;\n                    if (source && target && canvasEl) {\n                        const sourceRect = source.getBoundingClientRect(), targetRect = target.getBoundingClientRect(), canvasRect = canvasEl.getBoundingClientRect();\n                        pos = {\n                            x: mouseEvent.offsetX + double * sourceRect.left - (targetRect.left + canvasRect.left),\n                            y: mouseEvent.offsetY + double * sourceRect.top - (targetRect.top + canvasRect.top),\n                        };\n                    }\n                    else {\n                        pos = {\n                            x: mouseEvent.offsetX ?? mouseEvent.clientX,\n                            y: mouseEvent.offsetY ?? mouseEvent.clientY,\n                        };\n                    }\n                }\n                else if (mouseEvent.target === canvasEl) {\n                    pos = {\n                        x: mouseEvent.offsetX ?? mouseEvent.clientX,\n                        y: mouseEvent.offsetY ?? mouseEvent.clientY,\n                    };\n                }\n            }\n            else {\n                this._canPush = e.type !== \"touchmove\";\n                if (canvasEl) {\n                    const touchEvent = e, lastTouch = touchEvent.touches[touchEvent.touches.length - lengthOffset], canvasRect = canvasEl.getBoundingClientRect();\n                    pos = {\n                        x: lastTouch.clientX - (canvasRect.left ?? minCoordinate),\n                        y: lastTouch.clientY - (canvasRect.top ?? minCoordinate),\n                    };\n                }\n            }\n            const pxRatio = container.retina.pixelRatio;\n            if (pos) {\n                pos.x *= pxRatio;\n                pos.y *= pxRatio;\n            }\n            interactivity.mouse.position = pos;\n            interactivity.status = mouseMoveEvent;\n        };\n        this._touchEnd = e => {\n            const evt = e, touches = Array.from(evt.changedTouches);\n            for (const touch of touches) {\n                this._touches.delete(touch.identifier);\n            }\n            this._mouseTouchFinish();\n        };\n        this._touchEndClick = e => {\n            const evt = e, touches = Array.from(evt.changedTouches);\n            for (const touch of touches) {\n                this._touches.delete(touch.identifier);\n            }\n            this._mouseTouchClick(e);\n        };\n        this._touchStart = e => {\n            const evt = e, touches = Array.from(evt.changedTouches);\n            for (const touch of touches) {\n                this._touches.set(touch.identifier, performance.now());\n            }\n            this._mouseTouchMove(e);\n        };\n        this._canPush = true;\n        this._touches = new Map();\n        this._handlers = {\n            mouseDown: () => this._mouseDown(),\n            mouseLeave: () => this._mouseTouchFinish(),\n            mouseMove: (e) => this._mouseTouchMove(e),\n            mouseUp: (e) => this._mouseTouchClick(e),\n            touchStart: (e) => this._touchStart(e),\n            touchMove: (e) => this._mouseTouchMove(e),\n            touchEnd: (e) => this._touchEnd(e),\n            touchCancel: (e) => this._touchEnd(e),\n            touchEndClick: (e) => this._touchEndClick(e),\n            visibilityChange: () => this._handleVisibilityChange(),\n            themeChange: (e) => this._handleThemeChange(e),\n            oldThemeChange: (e) => this._handleThemeChange(e),\n            resize: () => {\n                this._handleWindowResize();\n            },\n        };\n    }\n    addListeners() {\n        this._manageListeners(true);\n    }\n    removeListeners() {\n        this._manageListeners(false);\n    }\n}\n", "export var EventType;\n(function (EventType) {\n    EventType[\"configAdded\"] = \"configAdded\";\n    EventType[\"containerInit\"] = \"containerInit\";\n    EventType[\"particlesSetup\"] = \"particlesSetup\";\n    EventType[\"containerStarted\"] = \"containerStarted\";\n    EventType[\"containerStopped\"] = \"containerStopped\";\n    EventType[\"containerDestroyed\"] = \"containerDestroyed\";\n    EventType[\"containerPaused\"] = \"containerPaused\";\n    EventType[\"containerPlay\"] = \"containerPlay\";\n    EventType[\"containerBuilt\"] = \"containerBuilt\";\n    EventType[\"particleAdded\"] = \"particleAdded\";\n    EventType[\"particleDestroyed\"] = \"particleDestroyed\";\n    EventType[\"particleRemoved\"] = \"particleRemoved\";\n})(EventType || (EventType = {}));\n", "import { isArray, isNull, isString } from \"../../Utils/TypeUtils.js\";\nexport class OptionsColor {\n    constructor() {\n        this.value = \"\";\n    }\n    static create(source, data) {\n        const color = new OptionsColor();\n        color.load(source);\n        if (data !== undefined) {\n            if (isString(data) || isArray(data)) {\n                color.load({ value: data });\n            }\n            else {\n                color.load(data);\n            }\n        }\n        return color;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (!isNull(data.value)) {\n            this.value = data.value;\n        }\n    }\n}\n", "import { OptionsColor } from \"../OptionsColor.js\";\nimport { isNull } from \"../../../Utils/TypeUtils.js\";\nexport class Background {\n    constructor() {\n        this.color = new OptionsColor();\n        this.color.value = \"\";\n        this.image = \"\";\n        this.position = \"\";\n        this.repeat = \"\";\n        this.size = \"\";\n        this.opacity = 1;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.image !== undefined) {\n            this.image = data.image;\n        }\n        if (data.position !== undefined) {\n            this.position = data.position;\n        }\n        if (data.repeat !== undefined) {\n            this.repeat = data.repeat;\n        }\n        if (data.size !== undefined) {\n            this.size = data.size;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n", "import { OptionsColor } from \"../OptionsColor.js\";\nimport { isNull } from \"../../../Utils/TypeUtils.js\";\nexport class BackgroundMaskCover {\n    constructor() {\n        this.opacity = 1;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.image !== undefined) {\n            this.image = data.image;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n", "import { isNull, isString } from \"../../../Utils/TypeUtils.js\";\nimport { BackgroundMaskCover } from \"./BackgroundMaskCover.js\";\nexport class BackgroundMask {\n    constructor() {\n        this.composite = \"destination-out\";\n        this.cover = new BackgroundMaskCover();\n        this.enable = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.composite !== undefined) {\n            this.composite = data.composite;\n        }\n        if (data.cover !== undefined) {\n            const cover = data.cover, color = (isString(data.cover) ? { color: data.cover } : data.cover);\n            this.cover.load(cover.color !== undefined || cover.image !== undefined ? cover : { color: color });\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n    }\n}\n", "import { isNull } from \"../../../Utils/TypeUtils.js\";\nexport class FullScreen {\n    constructor() {\n        this.enable = true;\n        this.zIndex = 0;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.zIndex !== undefined) {\n            this.zIndex = data.zIndex;\n        }\n    }\n}\n", "import { isNull } from \"../../../../Utils/TypeUtils.js\";\nexport class ClickEvent {\n    constructor() {\n        this.enable = false;\n        this.mode = [];\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n    }\n}\n", "export var DivType;\n(function (DivType) {\n    DivType[\"circle\"] = \"circle\";\n    DivType[\"rectangle\"] = \"rectangle\";\n})(DivType || (DivType = {}));\n", "import { DivType } from \"../../../../Enums/Types/DivType.js\";\nimport { isNull } from \"../../../../Utils/TypeUtils.js\";\nexport class DivEvent {\n    constructor() {\n        this.selectors = [];\n        this.enable = false;\n        this.mode = [];\n        this.type = DivType.circle;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.selectors !== undefined) {\n            this.selectors = data.selectors;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.type !== undefined) {\n            this.type = data.type;\n        }\n    }\n}\n", "import { isNull } from \"../../../../Utils/TypeUtils.js\";\nexport class Parallax {\n    constructor() {\n        this.enable = false;\n        this.force = 2;\n        this.smooth = 10;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.force !== undefined) {\n            this.force = data.force;\n        }\n        if (data.smooth !== undefined) {\n            this.smooth = data.smooth;\n        }\n    }\n}\n", "import { Parallax } from \"./Parallax.js\";\nimport { isNull } from \"../../../../Utils/TypeUtils.js\";\nexport class HoverEvent {\n    constructor() {\n        this.enable = false;\n        this.mode = [];\n        this.parallax = new Parallax();\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        this.parallax.load(data.parallax);\n    }\n}\n", "import { isNull } from \"../../../../Utils/TypeUtils.js\";\nexport class ResizeEvent {\n    constructor() {\n        this.delay = 0.5;\n        this.enable = true;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.delay !== undefined) {\n            this.delay = data.delay;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n    }\n}\n", "import { ClickEvent } from \"./ClickEvent.js\";\nimport { DivEvent } from \"./DivEvent.js\";\nimport { HoverEvent } from \"./HoverEvent.js\";\nimport { ResizeEvent } from \"./ResizeEvent.js\";\nimport { executeOnSingleOrMultiple } from \"../../../../Utils/Utils.js\";\nimport { isNull } from \"../../../../Utils/TypeUtils.js\";\nexport class Events {\n    constructor() {\n        this.onClick = new ClickEvent();\n        this.onDiv = new DivEvent();\n        this.onHover = new HoverEvent();\n        this.resize = new ResizeEvent();\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        this.onClick.load(data.onClick);\n        const onDiv = data.onDiv;\n        if (onDiv !== undefined) {\n            this.onDiv = executeOnSingleOrMultiple(onDiv, t => {\n                const tmp = new DivEvent();\n                tmp.load(t);\n                return tmp;\n            });\n        }\n        this.onHover.load(data.onHover);\n        this.resize.load(data.resize);\n    }\n}\n", "import { isNull } from \"../../../../Utils/TypeUtils.js\";\nexport class Modes {\n    constructor(engine, container) {\n        this._engine = engine;\n        this._container = container;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (!this._container) {\n            return;\n        }\n        const interactors = this._engine.interactors.get(this._container);\n        if (!interactors) {\n            return;\n        }\n        for (const interactor of interactors) {\n            if (!interactor.loadModeOptions) {\n                continue;\n            }\n            interactor.loadModeOptions(this, data);\n        }\n    }\n}\n", "import { Events } from \"./Events/Events.js\";\nimport { InteractivityDetect } from \"../../../Enums/InteractivityDetect.js\";\nimport { Modes } from \"./Modes/Modes.js\";\nimport { isNull } from \"../../../Utils/TypeUtils.js\";\nexport class Interactivity {\n    constructor(engine, container) {\n        this.detectsOn = InteractivityDetect.window;\n        this.events = new Events();\n        this.modes = new Modes(engine, container);\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        const detectsOn = data.detectsOn;\n        if (detectsOn !== undefined) {\n            this.detectsOn = detectsOn;\n        }\n        this.events.load(data.events);\n        this.modes.load(data.modes);\n    }\n}\n", "import { PixelMode } from \"../../Enums/Modes/PixelMode.js\";\nimport { deepExtend } from \"../../Utils/Utils.js\";\nimport { isNull } from \"../../Utils/TypeUtils.js\";\nimport { manualDefaultPosition } from \"../../Core/Utils/Constants.js\";\nexport class ManualParticle {\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.position) {\n            this.position = {\n                x: data.position.x ?? manualDefaultPosition,\n                y: data.position.y ?? manualDefaultPosition,\n                mode: data.position.mode ?? PixelMode.percent,\n            };\n        }\n        if (data.options) {\n            this.options = deepExtend({}, data.options);\n        }\n    }\n}\n", "export var ResponsiveMode;\n(function (ResponsiveMode) {\n    ResponsiveMode[\"screen\"] = \"screen\";\n    ResponsiveMode[\"canvas\"] = \"canvas\";\n})(ResponsiveMode || (ResponsiveMode = {}));\n", "import { ResponsiveMode } from \"../../Enums/Modes/ResponsiveMode.js\";\nimport { deepExtend } from \"../../Utils/Utils.js\";\nimport { isNull } from \"../../Utils/TypeUtils.js\";\nexport class Responsive {\n    constructor() {\n        this.maxWidth = Infinity;\n        this.options = {};\n        this.mode = ResponsiveMode.canvas;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (!isNull(data.maxWidth)) {\n            this.maxWidth = data.maxWidth;\n        }\n        if (!isNull(data.mode)) {\n            if (data.mode === ResponsiveMode.screen) {\n                this.mode = ResponsiveMode.screen;\n            }\n            else {\n                this.mode = ResponsiveMode.canvas;\n            }\n        }\n        if (!isNull(data.options)) {\n            this.options = deepExtend({}, data.options);\n        }\n    }\n}\n", "export var ThemeMode;\n(function (ThemeMode) {\n    ThemeMode[\"any\"] = \"any\";\n    ThemeMode[\"dark\"] = \"dark\";\n    ThemeMode[\"light\"] = \"light\";\n})(ThemeMode || (ThemeMode = {}));\n", "import { ThemeMode } from \"../../../Enums/Modes/ThemeMode.js\";\nimport { isNull } from \"../../../Utils/TypeUtils.js\";\nexport class ThemeDefault {\n    constructor() {\n        this.auto = false;\n        this.mode = ThemeMode.any;\n        this.value = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.auto !== undefined) {\n            this.auto = data.auto;\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.value !== undefined) {\n            this.value = data.value;\n        }\n    }\n}\n", "import { ThemeDefault } from \"./ThemeDefault.js\";\nimport { deepExtend } from \"../../../Utils/Utils.js\";\nimport { isNull } from \"../../../Utils/TypeUtils.js\";\nexport class Theme {\n    constructor() {\n        this.name = \"\";\n        this.default = new ThemeDefault();\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.name !== undefined) {\n            this.name = data.name;\n        }\n        this.default.load(data.default);\n        if (data.options !== undefined) {\n            this.options = deepExtend({}, data.options);\n        }\n    }\n}\n", "import { AnimationMode } from \"../../Enums/Modes/AnimationMode.js\";\nimport { StartValueType } from \"../../Enums/Types/StartValueType.js\";\nimport { isNull } from \"../../Utils/TypeUtils.js\";\nimport { setRangeValue } from \"../../Utils/NumberUtils.js\";\nexport class AnimationOptions {\n    constructor() {\n        this.count = 0;\n        this.enable = false;\n        this.speed = 1;\n        this.decay = 0;\n        this.delay = 0;\n        this.sync = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.count !== undefined) {\n            this.count = setRangeValue(data.count);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n        if (data.decay !== undefined) {\n            this.decay = setRangeValue(data.decay);\n        }\n        if (data.delay !== undefined) {\n            this.delay = setRangeValue(data.delay);\n        }\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\nexport class RangedAnimationOptions extends AnimationOptions {\n    constructor() {\n        super();\n        this.mode = AnimationMode.auto;\n        this.startValue = StartValueType.random;\n    }\n    load(data) {\n        super.load(data);\n        if (isNull(data)) {\n            return;\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.startValue !== undefined) {\n            this.startValue = data.startValue;\n        }\n    }\n}\n", "import { AnimationOptions } from \"./AnimationOptions.js\";\nimport { isNull } from \"../../Utils/TypeUtils.js\";\nimport { setRangeValue } from \"../../Utils/NumberUtils.js\";\nexport class ColorAnimation extends AnimationOptions {\n    constructor() {\n        super();\n        this.offset = 0;\n        this.sync = true;\n    }\n    load(data) {\n        super.load(data);\n        if (isNull(data)) {\n            return;\n        }\n        if (data.offset !== undefined) {\n            this.offset = setRangeValue(data.offset);\n        }\n    }\n}\n", "import { ColorAnimation } from \"./ColorAnimation.js\";\nimport { isNull } from \"../../Utils/TypeUtils.js\";\nexport class HslAnimation {\n    constructor() {\n        this.h = new ColorAnimation();\n        this.s = new ColorAnimation();\n        this.l = new ColorAnimation();\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        this.h.load(data.h);\n        this.s.load(data.s);\n        this.l.load(data.l);\n    }\n}\n", "import { isArray, isNull, isString } from \"../../Utils/TypeUtils.js\";\nimport { HslAnimation } from \"./HslAnimation.js\";\nimport { OptionsColor } from \"./OptionsColor.js\";\nexport class AnimatableColor extends OptionsColor {\n    constructor() {\n        super();\n        this.animation = new HslAnimation();\n    }\n    static create(source, data) {\n        const color = new AnimatableColor();\n        color.load(source);\n        if (data !== undefined) {\n            if (isString(data) || isArray(data)) {\n                color.load({ value: data });\n            }\n            else {\n                color.load(data);\n            }\n        }\n        return color;\n    }\n    load(data) {\n        super.load(data);\n        if (isNull(data)) {\n            return;\n        }\n        const colorAnimation = data.animation;\n        if (colorAnimation !== undefined) {\n            if (colorAnimation.enable !== undefined) {\n                this.animation.h.load(colorAnimation);\n            }\n            else {\n                this.animation.load(data.animation);\n            }\n        }\n    }\n}\n", "export var CollisionMode;\n(function (CollisionMode) {\n    CollisionMode[\"absorb\"] = \"absorb\";\n    CollisionMode[\"bounce\"] = \"bounce\";\n    CollisionMode[\"destroy\"] = \"destroy\";\n})(CollisionMode || (CollisionMode = {}));\n", "import { isNull } from \"../../../../Utils/TypeUtils.js\";\nexport class CollisionsAbsorb {\n    constructor() {\n        this.speed = 2;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.speed !== undefined) {\n            this.speed = data.speed;\n        }\n    }\n}\n", "import { isNull } from \"../../../../Utils/TypeUtils.js\";\nexport class CollisionsOverlap {\n    constructor() {\n        this.enable = true;\n        this.retries = 0;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.retries !== undefined) {\n            this.retries = data.retries;\n        }\n    }\n}\n", "import { AnimationOptions, RangedAnimationOptions } from \"./AnimationOptions.js\";\nimport { isNull } from \"../../Utils/TypeUtils.js\";\nimport { setRangeValue } from \"../../Utils/NumberUtils.js\";\nexport class ValueWithRandom {\n    constructor() {\n        this.value = 0;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (!isNull(data.value)) {\n            this.value = setRangeValue(data.value);\n        }\n    }\n}\nexport class AnimationValueWithRandom extends ValueWithRandom {\n    constructor() {\n        super();\n        this.animation = new AnimationOptions();\n    }\n    load(data) {\n        super.load(data);\n        if (isNull(data)) {\n            return;\n        }\n        const animation = data.animation;\n        if (animation !== undefined) {\n            this.animation.load(animation);\n        }\n    }\n}\nexport class RangedAnimationValueWithRandom extends AnimationValueWithRandom {\n    constructor() {\n        super();\n        this.animation = new RangedAnimationOptions();\n    }\n    load(data) {\n        super.load(data);\n    }\n}\n", "import { ValueWithRandom } from \"../../ValueWithRandom.js\";\nexport class ParticlesBounceFactor extends ValueWithRandom {\n    constructor() {\n        super();\n        this.value = 1;\n    }\n}\n", "import { ParticlesBounceFactor } from \"./ParticlesBounceFactor.js\";\nimport { isNull } from \"../../../../Utils/TypeUtils.js\";\nexport class ParticlesBounce {\n    constructor() {\n        this.horizontal = new ParticlesBounceFactor();\n        this.vertical = new ParticlesBounceFactor();\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        this.horizontal.load(data.horizontal);\n        this.vertical.load(data.vertical);\n    }\n}\n", "import { CollisionMode } from \"../../../../Enums/Modes/CollisionMode.js\";\nimport { CollisionsAbsorb } from \"./CollisionsAbsorb.js\";\nimport { CollisionsOverlap } from \"./CollisionsOverlap.js\";\nimport { ParticlesBounce } from \"../Bounce/ParticlesBounce.js\";\nimport { isNull } from \"../../../../Utils/TypeUtils.js\";\nimport { setRangeValue } from \"../../../../Utils/NumberUtils.js\";\nexport class Collisions {\n    constructor() {\n        this.absorb = new CollisionsAbsorb();\n        this.bounce = new ParticlesBounce();\n        this.enable = false;\n        this.maxSpeed = 50;\n        this.mode = CollisionMode.bounce;\n        this.overlap = new CollisionsOverlap();\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        this.absorb.load(data.absorb);\n        this.bounce.load(data.bounce);\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.maxSpeed !== undefined) {\n            this.maxSpeed = setRangeValue(data.maxSpeed);\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        this.overlap.load(data.overlap);\n    }\n}\n", "import { deepExtend } from \"../../../../Utils/Utils.js\";\nimport { isNull } from \"../../../../Utils/TypeUtils.js\";\nexport class Effect {\n    constructor() {\n        this.close = true;\n        this.fill = true;\n        this.options = {};\n        this.type = [];\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        const options = data.options;\n        if (options !== undefined) {\n            for (const effect in options) {\n                const item = options[effect];\n                if (item) {\n                    this.options[effect] = deepExtend(this.options[effect] ?? {}, item);\n                }\n            }\n        }\n        if (data.close !== undefined) {\n            this.close = data.close;\n        }\n        if (data.fill !== undefined) {\n            this.fill = data.fill;\n        }\n        if (data.type !== undefined) {\n            this.type = data.type;\n        }\n    }\n}\n", "import { isNull } from \"../../../../Utils/TypeUtils.js\";\nimport { setRangeValue } from \"../../../../Utils/NumberUtils.js\";\nexport class MoveAngle {\n    constructor() {\n        this.offset = 0;\n        this.value = 90;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.offset !== undefined) {\n            this.offset = setRangeValue(data.offset);\n        }\n        if (data.value !== undefined) {\n            this.value = setRangeValue(data.value);\n        }\n    }\n}\n", "import { isNull } from \"../../../../Utils/TypeUtils.js\";\nimport { setRangeValue } from \"../../../../Utils/NumberUtils.js\";\nexport class MoveAttract {\n    constructor() {\n        this.distance = 200;\n        this.enable = false;\n        this.rotate = {\n            x: 3000,\n            y: 3000,\n        };\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = setRangeValue(data.distance);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.rotate) {\n            const rotateX = data.rotate.x;\n            if (rotateX !== undefined) {\n                this.rotate.x = rotateX;\n            }\n            const rotateY = data.rotate.y;\n            if (rotateY !== undefined) {\n                this.rotate.y = rotateY;\n            }\n        }\n    }\n}\n", "import { PixelMode } from \"../../../../Enums/Modes/PixelMode.js\";\nimport { isNull } from \"../../../../Utils/TypeUtils.js\";\nexport class MoveCenter {\n    constructor() {\n        this.x = 50;\n        this.y = 50;\n        this.mode = PixelMode.percent;\n        this.radius = 0;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.x !== undefined) {\n            this.x = data.x;\n        }\n        if (data.y !== undefined) {\n            this.y = data.y;\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.radius !== undefined) {\n            this.radius = data.radius;\n        }\n    }\n}\n", "import { isNull } from \"../../../../Utils/TypeUtils.js\";\nimport { setRangeValue } from \"../../../../Utils/NumberUtils.js\";\nexport class MoveGravity {\n    constructor() {\n        this.acceleration = 9.81;\n        this.enable = false;\n        this.inverse = false;\n        this.maxSpeed = 50;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.acceleration !== undefined) {\n            this.acceleration = setRangeValue(data.acceleration);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.inverse !== undefined) {\n            this.inverse = data.inverse;\n        }\n        if (data.maxSpeed !== undefined) {\n            this.maxSpeed = setRangeValue(data.maxSpeed);\n        }\n    }\n}\n", "import { ValueWithRandom } from \"../../../ValueWithRandom.js\";\nimport { deepExtend } from \"../../../../../Utils/Utils.js\";\nimport { isNull } from \"../../../../../Utils/TypeUtils.js\";\nexport class MovePath {\n    constructor() {\n        this.clamp = true;\n        this.delay = new ValueWithRandom();\n        this.enable = false;\n        this.options = {};\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.clamp !== undefined) {\n            this.clamp = data.clamp;\n        }\n        this.delay.load(data.delay);\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        this.generator = data.generator;\n        if (data.options) {\n            this.options = deepExtend(this.options, data.options);\n        }\n    }\n}\n", "import { OptionsColor } from \"../../OptionsColor.js\";\nimport { isNull } from \"../../../../Utils/TypeUtils.js\";\nexport class MoveTrailFill {\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.image !== undefined) {\n            this.image = data.image;\n        }\n    }\n}\n", "import { MoveTrailFill } from \"./MoveTrailFill.js\";\nimport { isNull } from \"../../../../Utils/TypeUtils.js\";\nexport class MoveTrail {\n    constructor() {\n        this.enable = false;\n        this.length = 10;\n        this.fill = new MoveTrailFill();\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.fill !== undefined) {\n            this.fill.load(data.fill);\n        }\n        if (data.length !== undefined) {\n            this.length = data.length;\n        }\n    }\n}\n", "export var OutMode;\n(function (OutMode) {\n    OutMode[\"bounce\"] = \"bounce\";\n    OutMode[\"none\"] = \"none\";\n    OutMode[\"out\"] = \"out\";\n    OutMode[\"destroy\"] = \"destroy\";\n    OutMode[\"split\"] = \"split\";\n})(OutMode || (OutMode = {}));\n", "import { OutMode } from \"../../../../Enums/Modes/OutMode.js\";\nimport { isNull } from \"../../../../Utils/TypeUtils.js\";\nexport class OutModes {\n    constructor() {\n        this.default = OutMode.out;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.default !== undefined) {\n            this.default = data.default;\n        }\n        this.bottom = data.bottom ?? data.default;\n        this.left = data.left ?? data.default;\n        this.right = data.right ?? data.default;\n        this.top = data.top ?? data.default;\n    }\n}\n", "import { deepExtend } from \"../../../../Utils/Utils.js\";\nimport { isNull } from \"../../../../Utils/TypeUtils.js\";\nimport { setRangeValue } from \"../../../../Utils/NumberUtils.js\";\nexport class Spin {\n    constructor() {\n        this.acceleration = 0;\n        this.enable = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.acceleration !== undefined) {\n            this.acceleration = setRangeValue(data.acceleration);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.position) {\n            this.position = deepExtend({}, data.position);\n        }\n    }\n}\n", "import { MoveDirection } from \"../../../../Enums/Directions/MoveDirection.js\";\nimport { isNull, isNumber, isObject } from \"../../../../Utils/TypeUtils.js\";\nimport { MoveAngle } from \"./MoveAngle.js\";\nimport { MoveAttract } from \"./MoveAttract.js\";\nimport { MoveCenter } from \"./MoveCenter.js\";\nimport { MoveGravity } from \"./MoveGravity.js\";\nimport { MovePath } from \"./Path/MovePath.js\";\nimport { MoveTrail } from \"./MoveTrail.js\";\nimport { OutModes } from \"./OutModes.js\";\nimport { Spin } from \"./Spin.js\";\nimport { setRangeValue } from \"../../../../Utils/NumberUtils.js\";\nexport class Move {\n    constructor() {\n        this.angle = new MoveAngle();\n        this.attract = new MoveAttract();\n        this.center = new MoveCenter();\n        this.decay = 0;\n        this.distance = {};\n        this.direction = MoveDirection.none;\n        this.drift = 0;\n        this.enable = false;\n        this.gravity = new MoveGravity();\n        this.path = new MovePath();\n        this.outModes = new OutModes();\n        this.random = false;\n        this.size = false;\n        this.speed = 2;\n        this.spin = new Spin();\n        this.straight = false;\n        this.trail = new MoveTrail();\n        this.vibrate = false;\n        this.warp = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        this.angle.load(isNumber(data.angle) ? { value: data.angle } : data.angle);\n        this.attract.load(data.attract);\n        this.center.load(data.center);\n        if (data.decay !== undefined) {\n            this.decay = setRangeValue(data.decay);\n        }\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        if (data.distance !== undefined) {\n            this.distance = isNumber(data.distance)\n                ? {\n                    horizontal: data.distance,\n                    vertical: data.distance,\n                }\n                : { ...data.distance };\n        }\n        if (data.drift !== undefined) {\n            this.drift = setRangeValue(data.drift);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        this.gravity.load(data.gravity);\n        const outModes = data.outModes;\n        if (outModes !== undefined) {\n            if (isObject(outModes)) {\n                this.outModes.load(outModes);\n            }\n            else {\n                this.outModes.load({\n                    default: outModes,\n                });\n            }\n        }\n        this.path.load(data.path);\n        if (data.random !== undefined) {\n            this.random = data.random;\n        }\n        if (data.size !== undefined) {\n            this.size = data.size;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n        this.spin.load(data.spin);\n        if (data.straight !== undefined) {\n            this.straight = data.straight;\n        }\n        this.trail.load(data.trail);\n        if (data.vibrate !== undefined) {\n            this.vibrate = data.vibrate;\n        }\n        if (data.warp !== undefined) {\n            this.warp = data.warp;\n        }\n    }\n}\n", "import { DestroyType } from \"../../../../Enums/Types/DestroyType.js\";\nimport { RangedAnimationOptions } from \"../../AnimationOptions.js\";\nimport { isNull } from \"../../../../Utils/TypeUtils.js\";\nexport class OpacityAnimation extends RangedAnimationOptions {\n    constructor() {\n        super();\n        this.destroy = DestroyType.none;\n        this.speed = 2;\n    }\n    load(data) {\n        super.load(data);\n        if (isNull(data)) {\n            return;\n        }\n        if (data.destroy !== undefined) {\n            this.destroy = data.destroy;\n        }\n    }\n}\n", "import { OpacityAnimation } from \"./OpacityAnimation.js\";\nimport { RangedAnimationValueWithRandom } from \"../../ValueWithRandom.js\";\nimport { isNull } from \"../../../../Utils/TypeUtils.js\";\nexport class Opacity extends RangedAnimationValueWithRandom {\n    constructor() {\n        super();\n        this.animation = new OpacityAnimation();\n        this.value = 1;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        super.load(data);\n        const animation = data.animation;\n        if (animation !== undefined) {\n            this.animation.load(animation);\n        }\n    }\n}\n", "import { isNull } from \"../../../../Utils/TypeUtils.js\";\nexport class ParticlesDensity {\n    constructor() {\n        this.enable = false;\n        this.width = 1920;\n        this.height = 1080;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        const width = data.width;\n        if (width !== undefined) {\n            this.width = width;\n        }\n        const height = data.height;\n        if (height !== undefined) {\n            this.height = height;\n        }\n    }\n}\n", "export var LimitMode;\n(function (LimitMode) {\n    LimitMode[\"delete\"] = \"delete\";\n    LimitMode[\"wait\"] = \"wait\";\n})(LimitMode || (LimitMode = {}));\n", "import { LimitMode } from \"../../../../Enums/Modes/LimitMode.js\";\nimport { isNull } from \"../../../../Utils/TypeUtils.js\";\nexport class ParticlesNumberLimit {\n    constructor() {\n        this.mode = LimitMode.delete;\n        this.value = 0;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.value !== undefined) {\n            this.value = data.value;\n        }\n    }\n}\n", "import { ParticlesDensity } from \"./ParticlesDensity.js\";\nimport { ParticlesNumberLimit } from \"./ParticlesNumberLimit.js\";\nimport { isNull } from \"../../../../Utils/TypeUtils.js\";\nexport class ParticlesNumber {\n    constructor() {\n        this.density = new ParticlesDensity();\n        this.limit = new ParticlesNumberLimit();\n        this.value = 0;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        this.density.load(data.density);\n        this.limit.load(data.limit);\n        if (data.value !== undefined) {\n            this.value = data.value;\n        }\n    }\n}\n", "import { OptionsColor } from \"../OptionsColor.js\";\nimport { isNull } from \"../../../Utils/TypeUtils.js\";\nexport class Shadow {\n    constructor() {\n        this.blur = 0;\n        this.color = new OptionsColor();\n        this.enable = false;\n        this.offset = {\n            x: 0,\n            y: 0,\n        };\n        this.color.value = \"#000\";\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.blur !== undefined) {\n            this.blur = data.blur;\n        }\n        this.color = OptionsColor.create(this.color, data.color);\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.offset === undefined) {\n            return;\n        }\n        if (data.offset.x !== undefined) {\n            this.offset.x = data.offset.x;\n        }\n        if (data.offset.y !== undefined) {\n            this.offset.y = data.offset.y;\n        }\n    }\n}\n", "import { deepExtend } from \"../../../../Utils/Utils.js\";\nimport { isNull } from \"../../../../Utils/TypeUtils.js\";\nexport class Shape {\n    constructor() {\n        this.close = true;\n        this.fill = true;\n        this.options = {};\n        this.type = \"circle\";\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        const options = data.options;\n        if (options !== undefined) {\n            for (const shape in options) {\n                const item = options[shape];\n                if (item) {\n                    this.options[shape] = deepExtend(this.options[shape] ?? {}, item);\n                }\n            }\n        }\n        if (data.close !== undefined) {\n            this.close = data.close;\n        }\n        if (data.fill !== undefined) {\n            this.fill = data.fill;\n        }\n        if (data.type !== undefined) {\n            this.type = data.type;\n        }\n    }\n}\n", "import { DestroyType } from \"../../../../Enums/Types/DestroyType.js\";\nimport { RangedAnimationOptions } from \"../../AnimationOptions.js\";\nimport { isNull } from \"../../../../Utils/TypeUtils.js\";\nexport class SizeAnimation extends RangedAnimationOptions {\n    constructor() {\n        super();\n        this.destroy = DestroyType.none;\n        this.speed = 5;\n    }\n    load(data) {\n        super.load(data);\n        if (isNull(data)) {\n            return;\n        }\n        if (data.destroy !== undefined) {\n            this.destroy = data.destroy;\n        }\n    }\n}\n", "import { RangedAnimationValueWithRandom } from \"../../ValueWithRandom.js\";\nimport { SizeAnimation } from \"./SizeAnimation.js\";\nimport { isNull } from \"../../../../Utils/TypeUtils.js\";\nexport class Size extends RangedAnimationValueWithRandom {\n    constructor() {\n        super();\n        this.animation = new SizeAnimation();\n        this.value = 3;\n    }\n    load(data) {\n        super.load(data);\n        if (isNull(data)) {\n            return;\n        }\n        const animation = data.animation;\n        if (animation !== undefined) {\n            this.animation.load(animation);\n        }\n    }\n}\n", "import { AnimatableColor } from \"../AnimatableColor.js\";\nimport { isNull } from \"../../../Utils/TypeUtils.js\";\nimport { setRangeValue } from \"../../../Utils/NumberUtils.js\";\nexport class Stroke {\n    constructor() {\n        this.width = 0;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = AnimatableColor.create(this.color, data.color);\n        }\n        if (data.width !== undefined) {\n            this.width = setRangeValue(data.width);\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = setRangeValue(data.opacity);\n        }\n    }\n}\n", "import { ValueWithRandom } from \"../../ValueWithRandom.js\";\nimport { isNull } from \"../../../../Utils/TypeUtils.js\";\nexport class ZIndex extends ValueWithRandom {\n    constructor() {\n        super();\n        this.opacityRate = 1;\n        this.sizeRate = 1;\n        this.velocityRate = 1;\n    }\n    load(data) {\n        super.load(data);\n        if (isNull(data)) {\n            return;\n        }\n        if (data.opacityRate !== undefined) {\n            this.opacityRate = data.opacityRate;\n        }\n        if (data.sizeRate !== undefined) {\n            this.sizeRate = data.sizeRate;\n        }\n        if (data.velocityRate !== undefined) {\n            this.velocityRate = data.velocityRate;\n        }\n    }\n}\n", "import { deepExtend, executeOnSingleOrMultiple } from \"../../../Utils/Utils.js\";\nimport { AnimatableColor } from \"../AnimatableColor.js\";\nimport { Collisions } from \"./Collisions/Collisions.js\";\nimport { Effect } from \"./Effect/Effect.js\";\nimport { Move } from \"./Move/Move.js\";\nimport { Opacity } from \"./Opacity/Opacity.js\";\nimport { ParticlesBounce } from \"./Bounce/ParticlesBounce.js\";\nimport { ParticlesNumber } from \"./Number/ParticlesNumber.js\";\nimport { Shadow } from \"./Shadow.js\";\nimport { Shape } from \"./Shape/Shape.js\";\nimport { Size } from \"./Size/Size.js\";\nimport { Stroke } from \"./Stroke.js\";\nimport { ZIndex } from \"./ZIndex/ZIndex.js\";\nimport { isNull } from \"../../../Utils/TypeUtils.js\";\nexport class ParticlesOptions {\n    constructor(engine, container) {\n        this._engine = engine;\n        this._container = container;\n        this.bounce = new ParticlesBounce();\n        this.collisions = new Collisions();\n        this.color = new AnimatableColor();\n        this.color.value = \"#fff\";\n        this.effect = new Effect();\n        this.groups = {};\n        this.move = new Move();\n        this.number = new ParticlesNumber();\n        this.opacity = new Opacity();\n        this.reduceDuplicates = false;\n        this.shadow = new Shadow();\n        this.shape = new Shape();\n        this.size = new Size();\n        this.stroke = new Stroke();\n        this.zIndex = new ZIndex();\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.groups !== undefined) {\n            for (const group of Object.keys(data.groups)) {\n                if (!Object.hasOwn(data.groups, group)) {\n                    continue;\n                }\n                const item = data.groups[group];\n                if (item !== undefined) {\n                    this.groups[group] = deepExtend(this.groups[group] ?? {}, item);\n                }\n            }\n        }\n        if (data.reduceDuplicates !== undefined) {\n            this.reduceDuplicates = data.reduceDuplicates;\n        }\n        this.bounce.load(data.bounce);\n        this.color.load(AnimatableColor.create(this.color, data.color));\n        this.effect.load(data.effect);\n        this.move.load(data.move);\n        this.number.load(data.number);\n        this.opacity.load(data.opacity);\n        this.shape.load(data.shape);\n        this.size.load(data.size);\n        this.shadow.load(data.shadow);\n        this.zIndex.load(data.zIndex);\n        this.collisions.load(data.collisions);\n        if (data.interactivity !== undefined) {\n            this.interactivity = deepExtend({}, data.interactivity);\n        }\n        const strokeToLoad = data.stroke;\n        if (strokeToLoad) {\n            this.stroke = executeOnSingleOrMultiple(strokeToLoad, t => {\n                const tmp = new Stroke();\n                tmp.load(t);\n                return tmp;\n            });\n        }\n        if (this._container) {\n            const updaters = this._engine.updaters.get(this._container);\n            if (updaters) {\n                for (const updater of updaters) {\n                    if (updater.loadOptions) {\n                        updater.loadOptions(this, data);\n                    }\n                }\n            }\n            const interactors = this._engine.interactors.get(this._container);\n            if (interactors) {\n                for (const interactor of interactors) {\n                    if (interactor.loadParticlesOptions) {\n                        interactor.loadParticlesOptions(this, data);\n                    }\n                }\n            }\n        }\n    }\n}\n", "import { ParticlesOptions } from \"../Options/Classes/Particles/ParticlesOptions.js\";\nexport function loadOptions(options, ...sourceOptionsArr) {\n    for (const sourceOptions of sourceOptionsArr) {\n        options.load(sourceOptions);\n    }\n}\nexport function loadParticlesOptions(engine, container, ...sourceOptionsArr) {\n    const options = new ParticlesOptions(engine, container);\n    loadOptions(options, ...sourceOptionsArr);\n    return options;\n}\n", "import { deepExtend, executeOnSingleOrMultiple, safeMatchMedia } from \"../../Utils/Utils.js\";\nimport { isBoolean, isNull } from \"../../Utils/TypeUtils.js\";\nimport { Background } from \"./Background/Background.js\";\nimport { BackgroundMask } from \"./BackgroundMask/BackgroundMask.js\";\nimport { FullScreen } from \"./FullScreen/FullScreen.js\";\nimport { Interactivity } from \"./Interactivity/Interactivity.js\";\nimport { ManualParticle } from \"./ManualParticle.js\";\nimport { Responsive } from \"./Responsive.js\";\nimport { ResponsiveMode } from \"../../Enums/Modes/ResponsiveMode.js\";\nimport { Theme } from \"./Theme/Theme.js\";\nimport { ThemeMode } from \"../../Enums/Modes/ThemeMode.js\";\nimport { loadParticlesOptions } from \"../../Utils/OptionsUtils.js\";\nimport { setRangeValue } from \"../../Utils/NumberUtils.js\";\nexport class Options {\n    constructor(engine, container) {\n        this._findDefaultTheme = mode => {\n            return (this.themes.find(theme => theme.default.value && theme.default.mode === mode) ??\n                this.themes.find(theme => theme.default.value && theme.default.mode === ThemeMode.any));\n        };\n        this._importPreset = preset => {\n            this.load(this._engine.getPreset(preset));\n        };\n        this._engine = engine;\n        this._container = container;\n        this.autoPlay = true;\n        this.background = new Background();\n        this.backgroundMask = new BackgroundMask();\n        this.clear = true;\n        this.defaultThemes = {};\n        this.delay = 0;\n        this.fullScreen = new FullScreen();\n        this.detectRetina = true;\n        this.duration = 0;\n        this.fpsLimit = 120;\n        this.interactivity = new Interactivity(engine, container);\n        this.manualParticles = [];\n        this.particles = loadParticlesOptions(this._engine, this._container);\n        this.pauseOnBlur = true;\n        this.pauseOnOutsideViewport = true;\n        this.responsive = [];\n        this.smooth = false;\n        this.style = {};\n        this.themes = [];\n        this.zLayers = 100;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.preset !== undefined) {\n            executeOnSingleOrMultiple(data.preset, preset => this._importPreset(preset));\n        }\n        if (data.autoPlay !== undefined) {\n            this.autoPlay = data.autoPlay;\n        }\n        if (data.clear !== undefined) {\n            this.clear = data.clear;\n        }\n        if (data.key !== undefined) {\n            this.key = data.key;\n        }\n        if (data.name !== undefined) {\n            this.name = data.name;\n        }\n        if (data.delay !== undefined) {\n            this.delay = setRangeValue(data.delay);\n        }\n        const detectRetina = data.detectRetina;\n        if (detectRetina !== undefined) {\n            this.detectRetina = detectRetina;\n        }\n        if (data.duration !== undefined) {\n            this.duration = setRangeValue(data.duration);\n        }\n        const fpsLimit = data.fpsLimit;\n        if (fpsLimit !== undefined) {\n            this.fpsLimit = fpsLimit;\n        }\n        if (data.pauseOnBlur !== undefined) {\n            this.pauseOnBlur = data.pauseOnBlur;\n        }\n        if (data.pauseOnOutsideViewport !== undefined) {\n            this.pauseOnOutsideViewport = data.pauseOnOutsideViewport;\n        }\n        if (data.zLayers !== undefined) {\n            this.zLayers = data.zLayers;\n        }\n        this.background.load(data.background);\n        const fullScreen = data.fullScreen;\n        if (isBoolean(fullScreen)) {\n            this.fullScreen.enable = fullScreen;\n        }\n        else {\n            this.fullScreen.load(fullScreen);\n        }\n        this.backgroundMask.load(data.backgroundMask);\n        this.interactivity.load(data.interactivity);\n        if (data.manualParticles) {\n            this.manualParticles = data.manualParticles.map(t => {\n                const tmp = new ManualParticle();\n                tmp.load(t);\n                return tmp;\n            });\n        }\n        this.particles.load(data.particles);\n        this.style = deepExtend(this.style, data.style);\n        this._engine.loadOptions(this, data);\n        if (data.smooth !== undefined) {\n            this.smooth = data.smooth;\n        }\n        const interactors = this._engine.interactors.get(this._container);\n        if (interactors) {\n            for (const interactor of interactors) {\n                if (interactor.loadOptions) {\n                    interactor.loadOptions(this, data);\n                }\n            }\n        }\n        if (data.responsive !== undefined) {\n            for (const responsive of data.responsive) {\n                const optResponsive = new Responsive();\n                optResponsive.load(responsive);\n                this.responsive.push(optResponsive);\n            }\n        }\n        this.responsive.sort((a, b) => a.maxWidth - b.maxWidth);\n        if (data.themes !== undefined) {\n            for (const theme of data.themes) {\n                const existingTheme = this.themes.find(t => t.name === theme.name);\n                if (!existingTheme) {\n                    const optTheme = new Theme();\n                    optTheme.load(theme);\n                    this.themes.push(optTheme);\n                }\n                else {\n                    existingTheme.load(theme);\n                }\n            }\n        }\n        this.defaultThemes.dark = this._findDefaultTheme(ThemeMode.dark)?.name;\n        this.defaultThemes.light = this._findDefaultTheme(ThemeMode.light)?.name;\n    }\n    setResponsive(width, pxRatio, defaultOptions) {\n        this.load(defaultOptions);\n        const responsiveOptions = this.responsive.find(t => t.mode === ResponsiveMode.screen && screen ? t.maxWidth > screen.availWidth : t.maxWidth * pxRatio > width);\n        this.load(responsiveOptions?.options);\n        return responsiveOptions?.maxWidth;\n    }\n    setTheme(name) {\n        if (name) {\n            const chosenTheme = this.themes.find(theme => theme.name === name);\n            if (chosenTheme) {\n                this.load(chosenTheme.options);\n            }\n        }\n        else {\n            const mediaMatch = safeMatchMedia(\"(prefers-color-scheme: dark)\"), clientDarkMode = mediaMatch?.matches, defaultTheme = this._findDefaultTheme(clientDarkMode ? ThemeMode.dark : ThemeMode.light);\n            if (defaultTheme) {\n                this.load(defaultTheme.options);\n            }\n        }\n    }\n}\n", "export var InteractorType;\n(function (InteractorType) {\n    InteractorType[\"external\"] = \"external\";\n    InteractorType[\"particles\"] = \"particles\";\n})(InteractorType || (InteractorType = {}));\n", "import { InteractorType } from \"../../Enums/Types/InteractorType.js\";\nexport class InteractionManager {\n    constructor(engine, container) {\n        this.container = container;\n        this._engine = engine;\n        this._interactors = [];\n        this._externalInteractors = [];\n        this._particleInteractors = [];\n    }\n    externalInteract(delta) {\n        for (const interactor of this._externalInteractors) {\n            if (interactor.isEnabled()) {\n                interactor.interact(delta);\n            }\n        }\n    }\n    handleClickMode(mode) {\n        for (const interactor of this._externalInteractors) {\n            interactor.handleClickMode?.(mode);\n        }\n    }\n    async init() {\n        this._interactors = await this._engine.getInteractors(this.container, true);\n        this._externalInteractors = [];\n        this._particleInteractors = [];\n        for (const interactor of this._interactors) {\n            switch (interactor.type) {\n                case InteractorType.external:\n                    this._externalInteractors.push(interactor);\n                    break;\n                case InteractorType.particles:\n                    this._particleInteractors.push(interactor);\n                    break;\n            }\n            interactor.init();\n        }\n    }\n    particlesInteract(particle, delta) {\n        for (const interactor of this._externalInteractors) {\n            interactor.clear(particle, delta);\n        }\n        for (const interactor of this._particleInteractors) {\n            if (interactor.isEnabled(particle)) {\n                interactor.interact(particle, delta);\n            }\n        }\n    }\n    reset(particle) {\n        for (const interactor of this._externalInteractors) {\n            if (interactor.isEnabled()) {\n                interactor.reset(particle);\n            }\n        }\n        for (const interactor of this._particleInteractors) {\n            if (interactor.isEnabled(particle)) {\n                interactor.reset(particle);\n            }\n        }\n    }\n}\n", "export var ParticleOutType;\n(function (ParticleOutType) {\n    ParticleOutType[\"normal\"] = \"normal\";\n    ParticleOutType[\"inside\"] = \"inside\";\n    ParticleOutType[\"outside\"] = \"outside\";\n})(ParticleOutType || (ParticleOutType = {}));\n", "import { Vector, Vector3d } from \"./Utils/Vectors.js\";\nimport { calcExactPositionOrRandomFromSize, clamp, degToRad, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeValue, randomInRange, setRangeValue, } from \"../Utils/NumberUtils.js\";\nimport { decayOffset, defaultRadius, defaultRetryCount, double, errorPrefix, half, millisecondsToSeconds, minRetries, minZ, none, randomColorValue, rollFactor, squareExp, tryCountIncrement, } from \"./Utils/Constants.js\";\nimport { deepExtend, getPosition, initParticleNumericAnimationValue, isInArray, itemFromSingleOrMultiple, } from \"../Utils/Utils.js\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils.js\";\nimport { EventType } from \"../Enums/Types/EventType.js\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity.js\";\nimport { MoveDirection } from \"../Enums/Directions/MoveDirection.js\";\nimport { OutMode } from \"../Enums/Modes/OutMode.js\";\nimport { ParticleOutType } from \"../Enums/Types/ParticleOutType.js\";\nimport { PixelMode } from \"../Enums/Modes/PixelMode.js\";\nimport { alterHsl } from \"../Utils/CanvasUtils.js\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils.js\";\nfunction loadEffectData(effect, effectOptions, id, reduceDuplicates) {\n    const effectData = effectOptions.options[effect];\n    if (!effectData) {\n        return;\n    }\n    return deepExtend({\n        close: effectOptions.close,\n        fill: effectOptions.fill,\n    }, itemFromSingleOrMultiple(effectData, id, reduceDuplicates));\n}\nfunction loadShapeData(shape, shapeOptions, id, reduceDuplicates) {\n    const shapeData = shapeOptions.options[shape];\n    if (!shapeData) {\n        return;\n    }\n    return deepExtend({\n        close: shapeOptions.close,\n        fill: shapeOptions.fill,\n    }, itemFromSingleOrMultiple(shapeData, id, reduceDuplicates));\n}\nfunction fixOutMode(data) {\n    if (!isInArray(data.outMode, data.checkModes)) {\n        return;\n    }\n    const diameter = data.radius * double;\n    if (data.coord > data.maxCoord - diameter) {\n        data.setCb(-data.radius);\n    }\n    else if (data.coord < diameter) {\n        data.setCb(data.radius);\n    }\n}\nexport class Particle {\n    constructor(engine, container) {\n        this.container = container;\n        this._calcPosition = (container, position, zIndex, tryCount = defaultRetryCount) => {\n            for (const plugin of container.plugins.values()) {\n                const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n                if (pluginPos) {\n                    return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n                }\n            }\n            const canvasSize = container.canvas.size, exactPosition = calcExactPositionOrRandomFromSize({\n                size: canvasSize,\n                position: position,\n            }), pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex), radius = this.getRadius(), outModes = this.options.move.outModes, fixHorizontal = (outMode) => {\n                fixOutMode({\n                    outMode,\n                    checkModes: [OutMode.bounce],\n                    coord: pos.x,\n                    maxCoord: container.canvas.size.width,\n                    setCb: (value) => (pos.x += value),\n                    radius,\n                });\n            }, fixVertical = (outMode) => {\n                fixOutMode({\n                    outMode,\n                    checkModes: [OutMode.bounce],\n                    coord: pos.y,\n                    maxCoord: container.canvas.size.height,\n                    setCb: (value) => (pos.y += value),\n                    radius,\n                });\n            };\n            fixHorizontal(outModes.left ?? outModes.default);\n            fixHorizontal(outModes.right ?? outModes.default);\n            fixVertical(outModes.top ?? outModes.default);\n            fixVertical(outModes.bottom ?? outModes.default);\n            if (this._checkOverlap(pos, tryCount)) {\n                return this._calcPosition(container, undefined, zIndex, tryCount + tryCountIncrement);\n            }\n            return pos;\n        };\n        this._calculateVelocity = () => {\n            const baseVelocity = getParticleBaseVelocity(this.direction), res = baseVelocity.copy(), moveOptions = this.options.move;\n            if (moveOptions.direction === MoveDirection.inside || moveOptions.direction === MoveDirection.outside) {\n                return res;\n            }\n            const rad = degToRad(getRangeValue(moveOptions.angle.value)), radOffset = degToRad(getRangeValue(moveOptions.angle.offset)), range = {\n                left: radOffset - rad * half,\n                right: radOffset + rad * half,\n            };\n            if (!moveOptions.straight) {\n                res.angle += randomInRange(setRangeValue(range.left, range.right));\n            }\n            if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n                res.length *= getRandom();\n            }\n            return res;\n        };\n        this._checkOverlap = (pos, tryCount = defaultRetryCount) => {\n            const collisionsOptions = this.options.collisions, radius = this.getRadius();\n            if (!collisionsOptions.enable) {\n                return false;\n            }\n            const overlapOptions = collisionsOptions.overlap;\n            if (overlapOptions.enable) {\n                return false;\n            }\n            const retries = overlapOptions.retries;\n            if (retries >= minRetries && tryCount > retries) {\n                throw new Error(`${errorPrefix} particle is overlapping and can't be placed`);\n            }\n            return !!this.container.particles.find(particle => getDistance(pos, particle.position) < radius + particle.getRadius());\n        };\n        this._getRollColor = color => {\n            if (!color || !this.roll || (!this.backColor && !this.roll.alter)) {\n                return color;\n            }\n            const backFactor = this.roll.horizontal && this.roll.vertical ? double * rollFactor : rollFactor, backSum = this.roll.horizontal ? Math.PI * half : none, rolled = Math.floor(((this.roll.angle ?? none) + backSum) / (Math.PI / backFactor)) % double;\n            if (!rolled) {\n                return color;\n            }\n            if (this.backColor) {\n                return this.backColor;\n            }\n            if (this.roll.alter) {\n                return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n            }\n            return color;\n        };\n        this._initPosition = position => {\n            const container = this.container, zIndexValue = getRangeValue(this.options.zIndex.value);\n            this.position = this._calcPosition(container, position, clamp(zIndexValue, minZ, container.zLayers));\n            this.initialPosition = this.position.copy();\n            const canvasSize = container.canvas.size;\n            this.moveCenter = {\n                ...getPosition(this.options.move.center, canvasSize),\n                radius: this.options.move.center.radius ?? defaultRadius,\n                mode: this.options.move.center.mode ?? PixelMode.percent,\n            };\n            this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n            switch (this.options.move.direction) {\n                case MoveDirection.inside:\n                    this.outType = ParticleOutType.inside;\n                    break;\n                case MoveDirection.outside:\n                    this.outType = ParticleOutType.outside;\n                    break;\n            }\n            this.offset = Vector.origin;\n        };\n        this._engine = engine;\n    }\n    destroy(override) {\n        if (this.unbreakable || this.destroyed) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        this.slow.inRange = false;\n        const container = this.container, pathGenerator = this.pathGenerator, shapeDrawer = container.shapeDrawers.get(this.shape);\n        shapeDrawer?.particleDestroy?.(this);\n        for (const plugin of container.plugins.values()) {\n            plugin.particleDestroyed?.(this, override);\n        }\n        for (const updater of container.particles.updaters) {\n            updater.particleDestroyed?.(this, override);\n        }\n        pathGenerator?.reset(this);\n        this._engine.dispatchEvent(EventType.particleDestroyed, {\n            container: this.container,\n            data: {\n                particle: this,\n            },\n        });\n    }\n    draw(delta) {\n        const container = this.container, canvas = container.canvas;\n        for (const plugin of container.plugins.values()) {\n            canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        canvas.drawParticle(this, delta);\n    }\n    getFillColor() {\n        return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.color));\n    }\n    getMass() {\n        return this.getRadius() ** squareExp * Math.PI * half;\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        return this.bubble.radius ?? this.size.value;\n    }\n    getStrokeColor() {\n        return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.strokeColor));\n    }\n    init(id, position, overrideOptions, group) {\n        const container = this.container, engine = this._engine;\n        this.id = id;\n        this.group = group;\n        this.effectClose = true;\n        this.effectFill = true;\n        this.shapeClose = true;\n        this.shapeFill = true;\n        this.pathRotation = false;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.isRotating = false;\n        this.rotation = 0;\n        this.misplaced = false;\n        this.retina = {\n            maxDistance: {},\n        };\n        this.outType = ParticleOutType.normal;\n        this.ignoresResizeRatio = true;\n        const pxRatio = container.retina.pixelRatio, mainOptions = container.actualOptions, particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles), { reduceDuplicates } = particlesOptions, effectType = particlesOptions.effect.type, shapeType = particlesOptions.shape.type;\n        this.effect = itemFromSingleOrMultiple(effectType, this.id, reduceDuplicates);\n        this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n        const effectOptions = particlesOptions.effect, shapeOptions = particlesOptions.shape;\n        if (overrideOptions) {\n            if (overrideOptions.effect?.type) {\n                const overrideEffectType = overrideOptions.effect.type, effect = itemFromSingleOrMultiple(overrideEffectType, this.id, reduceDuplicates);\n                if (effect) {\n                    this.effect = effect;\n                    effectOptions.load(overrideOptions.effect);\n                }\n            }\n            if (overrideOptions.shape?.type) {\n                const overrideShapeType = overrideOptions.shape.type, shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n                if (shape) {\n                    this.shape = shape;\n                    shapeOptions.load(overrideOptions.shape);\n                }\n            }\n        }\n        if (this.effect === randomColorValue) {\n            const availableEffects = [...this.container.effectDrawers.keys()];\n            this.effect = availableEffects[Math.floor(Math.random() * availableEffects.length)];\n        }\n        if (this.shape === randomColorValue) {\n            const availableShapes = [...this.container.shapeDrawers.keys()];\n            this.shape = availableShapes[Math.floor(Math.random() * availableShapes.length)];\n        }\n        this.effectData = loadEffectData(this.effect, effectOptions, this.id, reduceDuplicates);\n        this.shapeData = loadShapeData(this.shape, shapeOptions, this.id, reduceDuplicates);\n        particlesOptions.load(overrideOptions);\n        const effectData = this.effectData;\n        if (effectData) {\n            particlesOptions.load(effectData.particles);\n        }\n        const shapeData = this.shapeData;\n        if (shapeData) {\n            particlesOptions.load(shapeData.particles);\n        }\n        const interactivity = new Interactivity(engine, container);\n        interactivity.load(container.actualOptions.interactivity);\n        interactivity.load(particlesOptions.interactivity);\n        this.interactivity = interactivity;\n        this.effectFill = effectData?.fill ?? particlesOptions.effect.fill;\n        this.effectClose = effectData?.close ?? particlesOptions.effect.close;\n        this.shapeFill = shapeData?.fill ?? particlesOptions.shape.fill;\n        this.shapeClose = shapeData?.close ?? particlesOptions.shape.close;\n        this.options = particlesOptions;\n        const pathOptions = this.options.move.path;\n        this.pathDelay = getRangeValue(pathOptions.delay.value) * millisecondsToSeconds;\n        if (pathOptions.generator) {\n            this.pathGenerator = this._engine.getPathGenerator(pathOptions.generator);\n            if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n                this.pathGenerator.init(container);\n            }\n        }\n        container.retina.initParticle(this);\n        this.size = initParticleNumericAnimationValue(this.options.size, pxRatio);\n        this.bubble = {\n            inRange: false,\n        };\n        this.slow = {\n            inRange: false,\n            factor: 1,\n        };\n        this._initPosition(position);\n        this.initialVelocity = this._calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        this.moveDecay = decayOffset - getRangeValue(this.options.move.decay);\n        const particles = container.particles;\n        particles.setLastZIndex(this.position.z);\n        this.zIndexFactor = this.position.z / container.zLayers;\n        this.sides = 24;\n        let effectDrawer = container.effectDrawers.get(this.effect);\n        if (!effectDrawer) {\n            effectDrawer = this._engine.getEffectDrawer(this.effect);\n            if (effectDrawer) {\n                container.effectDrawers.set(this.effect, effectDrawer);\n            }\n        }\n        if (effectDrawer?.loadEffect) {\n            effectDrawer.loadEffect(this);\n        }\n        let shapeDrawer = container.shapeDrawers.get(this.shape);\n        if (!shapeDrawer) {\n            shapeDrawer = this._engine.getShapeDrawer(this.shape);\n            if (shapeDrawer) {\n                container.shapeDrawers.set(this.shape, shapeDrawer);\n            }\n        }\n        if (shapeDrawer?.loadShape) {\n            shapeDrawer.loadShape(this);\n        }\n        const sideCountFunc = shapeDrawer?.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.spawning = false;\n        this.shadowColor = rangeColorToRgb(this._engine, this.options.shadow.color);\n        for (const updater of particles.updaters) {\n            updater.init(this);\n        }\n        for (const mover of particles.movers) {\n            mover.init?.(this);\n        }\n        effectDrawer?.particleInit?.(container, this);\n        shapeDrawer?.particleInit?.(container, this);\n        for (const plugin of container.plugins.values()) {\n            plugin.particleCreated?.(this);\n        }\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius(), canvasSize = this.container.canvas.size, position = this.position;\n        return (position.x >= -radius &&\n            position.y >= -radius &&\n            position.y <= canvasSize.height + radius &&\n            position.x <= canvasSize.width + radius);\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    reset() {\n        for (const updater of this.container.particles.updaters) {\n            updater.reset?.(this);\n        }\n    }\n}\n", "export class Point {\n    constructor(position, particle) {\n        this.position = position;\n        this.particle = particle;\n    }\n}\n", "export var RangeType;\n(function (RangeType) {\n    RangeType[\"circle\"] = \"circle\";\n    RangeType[\"rectangle\"] = \"rectangle\";\n})(RangeType || (RangeType = {}));\n", "import { RangeType } from \"../../Types/RangeType.js\";\nimport { getDistance } from \"../../Utils/NumberUtils.js\";\nimport { squareExp } from \"./Constants.js\";\nexport class BaseRange {\n    constructor(x, y, type) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n        this.type = type;\n    }\n}\nexport class Circle extends BaseRange {\n    constructor(x, y, radius) {\n        super(x, y, RangeType.circle);\n        this.radius = radius;\n    }\n    contains(point) {\n        return getDistance(point, this.position) <= this.radius;\n    }\n    intersects(range) {\n        const pos1 = this.position, pos2 = range.position, distPos = { x: Math.abs(pos2.x - pos1.x), y: Math.abs(pos2.y - pos1.y) }, r = this.radius;\n        if (range instanceof Circle || range.type === RangeType.circle) {\n            const circleRange = range, rSum = r + circleRange.radius, dist = Math.sqrt(distPos.x ** squareExp + distPos.y ** squareExp);\n            return rSum > dist;\n        }\n        else if (range instanceof Rectangle || range.type === RangeType.rectangle) {\n            const rectRange = range, { width, height } = rectRange.size, edges = Math.pow(distPos.x - width, squareExp) + Math.pow(distPos.y - height, squareExp);\n            return (edges <= r ** squareExp ||\n                (distPos.x <= r + width && distPos.y <= r + height) ||\n                distPos.x <= width ||\n                distPos.y <= height);\n        }\n        return false;\n    }\n}\nexport class Rectangle extends BaseRange {\n    constructor(x, y, width, height) {\n        super(x, y, RangeType.rectangle);\n        this.size = {\n            height: height,\n            width: width,\n        };\n    }\n    contains(point) {\n        const w = this.size.width, h = this.size.height, pos = this.position;\n        return point.x >= pos.x && point.x <= pos.x + w && point.y >= pos.y && point.y <= pos.y + h;\n    }\n    intersects(range) {\n        if (range instanceof Circle) {\n            return range.intersects(this);\n        }\n        const w = this.size.width, h = this.size.height, pos1 = this.position, pos2 = range.position, size2 = range instanceof Rectangle ? range.size : { width: 0, height: 0 }, w2 = size2.width, h2 = size2.height;\n        return pos2.x < pos1.x + w && pos2.x + w2 > pos1.x && pos2.y < pos1.y + h && pos2.y + h2 > pos1.y;\n    }\n}\n", "import { Circle, Rectangle } from \"./Ranges.js\";\nimport { double, half, subdivideCount } from \"./Constants.js\";\nimport { getDistance } from \"../../Utils/NumberUtils.js\";\nexport class QuadTree {\n    constructor(rectangle, capacity) {\n        this.rectangle = rectangle;\n        this.capacity = capacity;\n        this._subdivide = () => {\n            const { x, y } = this.rectangle.position, { width, height } = this.rectangle.size, { capacity } = this;\n            for (let i = 0; i < subdivideCount; i++) {\n                const fixedIndex = i % double;\n                this._subs.push(new QuadTree(new Rectangle(x + width * half * fixedIndex, y + height * half * (Math.round(i * half) - fixedIndex), width * half, height * half), capacity));\n            }\n            this._divided = true;\n        };\n        this._points = [];\n        this._divided = false;\n        this._subs = [];\n    }\n    insert(point) {\n        if (!this.rectangle.contains(point.position)) {\n            return false;\n        }\n        if (this._points.length < this.capacity) {\n            this._points.push(point);\n            return true;\n        }\n        if (!this._divided) {\n            this._subdivide();\n        }\n        return this._subs.some(sub => sub.insert(point));\n    }\n    query(range, check) {\n        const res = [];\n        if (!range.intersects(this.rectangle)) {\n            return [];\n        }\n        for (const p of this._points) {\n            if (!range.contains(p.position) &&\n                getDistance(range.position, p.position) > p.particle.getRadius() &&\n                (!check || check(p.particle))) {\n                continue;\n            }\n            res.push(p.particle);\n        }\n        if (this._divided) {\n            for (const sub of this._subs) {\n                res.push(...sub.query(range, check));\n            }\n        }\n        return res;\n    }\n    queryCircle(position, radius, check) {\n        return this.query(new Circle(position.x, position.y, radius), check);\n    }\n    queryRectangle(position, size, check) {\n        return this.query(new Rectangle(position.x, position.y, size.width, size.height), check);\n    }\n}\n", "import { countOffset, defaultDensityFactor, defaultRemoveQuantity, deleteCount, errorPrefix, lengthOffset, manualCount, minCount, minIndex, minLimit, posOffset, qTreeCapacity, sizeFactor, squareExp, } from \"./Utils/Constants.js\";\nimport { getLogger, getPosition } from \"../Utils/Utils.js\";\nimport { EventType } from \"../Enums/Types/EventType.js\";\nimport { InteractionManager } from \"./Utils/InteractionManager.js\";\nimport { LimitMode } from \"../Enums/Modes/LimitMode.js\";\nimport { Particle } from \"./Particle.js\";\nimport { Point } from \"./Utils/Point.js\";\nimport { QuadTree } from \"./Utils/QuadTree.js\";\nimport { Rectangle } from \"./Utils/Ranges.js\";\nconst qTreeRectangle = (canvasSize) => {\n    const { height, width } = canvasSize;\n    return new Rectangle(posOffset * width, posOffset * height, sizeFactor * width, sizeFactor * height);\n};\nexport class Particles {\n    constructor(engine, container) {\n        this._addToPool = (...particles) => {\n            this._pool.push(...particles);\n        };\n        this._applyDensity = (options, manualCount, group) => {\n            const numberOptions = options.number;\n            if (!options.number.density?.enable) {\n                if (group === undefined) {\n                    this._limit = numberOptions.limit.value;\n                }\n                else if (numberOptions.limit) {\n                    this._groupLimits.set(group, numberOptions.limit.value);\n                }\n                return;\n            }\n            const densityFactor = this._initDensityFactor(numberOptions.density), optParticlesNumber = numberOptions.value, optParticlesLimit = numberOptions.limit.value > minLimit ? numberOptions.limit.value : optParticlesNumber, particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount, particlesCount = Math.min(this.count, this.filter(t => t.group === group).length);\n            if (group === undefined) {\n                this._limit = numberOptions.limit.value * densityFactor;\n            }\n            else {\n                this._groupLimits.set(group, numberOptions.limit.value * densityFactor);\n            }\n            if (particlesCount < particlesNumber) {\n                this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n            }\n            else if (particlesCount > particlesNumber) {\n                this.removeQuantity(particlesCount - particlesNumber, group);\n            }\n        };\n        this._initDensityFactor = densityOptions => {\n            const container = this._container;\n            if (!container.canvas.element || !densityOptions.enable) {\n                return defaultDensityFactor;\n            }\n            const canvas = container.canvas.element, pxRatio = container.retina.pixelRatio;\n            return (canvas.width * canvas.height) / (densityOptions.height * densityOptions.width * pxRatio ** squareExp);\n        };\n        this._pushParticle = (position, overrideOptions, group, initializer) => {\n            try {\n                let particle = this._pool.pop();\n                if (!particle) {\n                    particle = new Particle(this._engine, this._container);\n                }\n                particle.init(this._nextId, position, overrideOptions, group);\n                let canAdd = true;\n                if (initializer) {\n                    canAdd = initializer(particle);\n                }\n                if (!canAdd) {\n                    return;\n                }\n                this._array.push(particle);\n                this._zArray.push(particle);\n                this._nextId++;\n                this._engine.dispatchEvent(EventType.particleAdded, {\n                    container: this._container,\n                    data: {\n                        particle,\n                    },\n                });\n                return particle;\n            }\n            catch (e) {\n                getLogger().warning(`${errorPrefix} adding particle: ${e}`);\n            }\n        };\n        this._removeParticle = (index, group, override) => {\n            const particle = this._array[index];\n            if (!particle || particle.group !== group) {\n                return false;\n            }\n            const zIdx = this._zArray.indexOf(particle);\n            this._array.splice(index, deleteCount);\n            this._zArray.splice(zIdx, deleteCount);\n            particle.destroy(override);\n            this._engine.dispatchEvent(EventType.particleRemoved, {\n                container: this._container,\n                data: {\n                    particle,\n                },\n            });\n            this._addToPool(particle);\n            return true;\n        };\n        this._engine = engine;\n        this._container = container;\n        this._nextId = 0;\n        this._array = [];\n        this._zArray = [];\n        this._pool = [];\n        this._limit = 0;\n        this._groupLimits = new Map();\n        this._needsSort = false;\n        this._lastZIndex = 0;\n        this._interactionManager = new InteractionManager(engine, container);\n        this._pluginsInitialized = false;\n        const canvasSize = container.canvas.size;\n        this.quadTree = new QuadTree(qTreeRectangle(canvasSize), qTreeCapacity);\n        this.movers = [];\n        this.updaters = [];\n    }\n    get count() {\n        return this._array.length;\n    }\n    addManualParticles() {\n        const container = this._container, options = container.actualOptions;\n        options.manualParticles.forEach(p => this.addParticle(p.position ? getPosition(p.position, container.canvas.size) : undefined, p.options));\n    }\n    addParticle(position, overrideOptions, group, initializer) {\n        const limitMode = this._container.actualOptions.particles.number.limit.mode, limit = group === undefined ? this._limit : (this._groupLimits.get(group) ?? this._limit), currentCount = this.count;\n        if (limit > minLimit) {\n            switch (limitMode) {\n                case LimitMode.delete: {\n                    const countToRemove = currentCount + countOffset - limit;\n                    if (countToRemove > minCount) {\n                        this.removeQuantity(countToRemove);\n                    }\n                    break;\n                }\n                case LimitMode.wait:\n                    if (currentCount >= limit) {\n                        return;\n                    }\n                    break;\n            }\n        }\n        return this._pushParticle(position, overrideOptions, group, initializer);\n    }\n    clear() {\n        this._array = [];\n        this._zArray = [];\n        this._pluginsInitialized = false;\n    }\n    destroy() {\n        this._array = [];\n        this._zArray = [];\n        this.movers = [];\n        this.updaters = [];\n    }\n    draw(delta) {\n        const container = this._container, canvas = container.canvas;\n        canvas.clear();\n        this.update(delta);\n        for (const plugin of container.plugins.values()) {\n            canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this._zArray) {\n            p.draw(delta);\n        }\n    }\n    filter(condition) {\n        return this._array.filter(condition);\n    }\n    find(condition) {\n        return this._array.find(condition);\n    }\n    get(index) {\n        return this._array[index];\n    }\n    handleClickMode(mode) {\n        this._interactionManager.handleClickMode(mode);\n    }\n    async init() {\n        const container = this._container, options = container.actualOptions;\n        this._lastZIndex = 0;\n        this._needsSort = false;\n        await this.initPlugins();\n        let handled = false;\n        for (const plugin of container.plugins.values()) {\n            handled = plugin.particlesInitialization?.() ?? handled;\n            if (handled) {\n                break;\n            }\n        }\n        this.addManualParticles();\n        if (!handled) {\n            const particlesOptions = options.particles, groups = particlesOptions.groups;\n            for (const group in groups) {\n                const groupOptions = groups[group];\n                for (let i = this.count, j = 0; j < groupOptions.number?.value && i < particlesOptions.number.value; i++, j++) {\n                    this.addParticle(undefined, groupOptions, group);\n                }\n            }\n            for (let i = this.count; i < particlesOptions.number.value; i++) {\n                this.addParticle();\n            }\n        }\n    }\n    async initPlugins() {\n        if (this._pluginsInitialized) {\n            return;\n        }\n        const container = this._container;\n        this.movers = await this._engine.getMovers(container, true);\n        this.updaters = await this._engine.getUpdaters(container, true);\n        await this._interactionManager.init();\n        for (const pathGenerator of container.pathGenerators.values()) {\n            pathGenerator.init(container);\n        }\n    }\n    push(nb, mouse, overrideOptions, group) {\n        for (let i = 0; i < nb; i++) {\n            this.addParticle(mouse?.position, overrideOptions, group);\n        }\n    }\n    async redraw() {\n        this.clear();\n        await this.init();\n        this.draw({ value: 0, factor: 0 });\n    }\n    remove(particle, group, override) {\n        this.removeAt(this._array.indexOf(particle), undefined, group, override);\n    }\n    removeAt(index, quantity = defaultRemoveQuantity, group, override) {\n        if (index < minIndex || index > this.count) {\n            return;\n        }\n        let deleted = 0;\n        for (let i = index; deleted < quantity && i < this.count; i++) {\n            if (this._removeParticle(i, group, override)) {\n                i--;\n                deleted++;\n            }\n        }\n    }\n    removeQuantity(quantity, group) {\n        this.removeAt(minIndex, quantity, group);\n    }\n    setDensity() {\n        const options = this._container.actualOptions, groups = options.particles.groups;\n        for (const group in groups) {\n            this._applyDensity(groups[group], manualCount, group);\n        }\n        this._applyDensity(options.particles, options.manualParticles.length);\n    }\n    setLastZIndex(zIndex) {\n        this._lastZIndex = zIndex;\n        this._needsSort = this._needsSort || this._lastZIndex < zIndex;\n    }\n    setResizeFactor(factor) {\n        this._resizeFactor = factor;\n    }\n    update(delta) {\n        const container = this._container, particlesToDelete = new Set();\n        this.quadTree = new QuadTree(qTreeRectangle(container.canvas.size), qTreeCapacity);\n        for (const pathGenerator of container.pathGenerators.values()) {\n            pathGenerator.update();\n        }\n        for (const plugin of container.plugins.values()) {\n            plugin.update?.(delta);\n        }\n        const resizeFactor = this._resizeFactor;\n        for (const particle of this._array) {\n            if (resizeFactor && !particle.ignoresResizeRatio) {\n                particle.position.x *= resizeFactor.width;\n                particle.position.y *= resizeFactor.height;\n                particle.initialPosition.x *= resizeFactor.width;\n                particle.initialPosition.y *= resizeFactor.height;\n            }\n            particle.ignoresResizeRatio = false;\n            this._interactionManager.reset(particle);\n            for (const plugin of this._container.plugins.values()) {\n                if (particle.destroyed) {\n                    break;\n                }\n                plugin.particleUpdate?.(particle, delta);\n            }\n            for (const mover of this.movers) {\n                if (mover.isEnabled(particle)) {\n                    mover.move(particle, delta);\n                }\n            }\n            if (particle.destroyed) {\n                particlesToDelete.add(particle);\n                continue;\n            }\n            this.quadTree.insert(new Point(particle.getPosition(), particle));\n        }\n        if (particlesToDelete.size) {\n            const checkDelete = (p) => !particlesToDelete.has(p);\n            this._array = this.filter(checkDelete);\n            this._zArray = this._zArray.filter(checkDelete);\n            for (const particle of particlesToDelete) {\n                this._engine.dispatchEvent(EventType.particleRemoved, {\n                    container: this._container,\n                    data: {\n                        particle,\n                    },\n                });\n            }\n            this._addToPool(...particlesToDelete);\n        }\n        this._interactionManager.externalInteract(delta);\n        for (const particle of this._array) {\n            for (const updater of this.updaters) {\n                updater.update(particle, delta);\n            }\n            if (!particle.destroyed && !particle.spawning) {\n                this._interactionManager.particlesInteract(particle, delta);\n            }\n        }\n        delete this._resizeFactor;\n        if (this._needsSort) {\n            const zArray = this._zArray;\n            zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n            this._lastZIndex = zArray[zArray.length - lengthOffset].position.z;\n            this._needsSort = false;\n        }\n    }\n}\n", "import { defaultRatio, defaultReduceFactor } from \"./Utils/Constants.js\";\nimport { getRangeValue } from \"../Utils/NumberUtils.js\";\nimport { isSsr } from \"../Utils/Utils.js\";\nexport class Retina {\n    constructor(container) {\n        this.container = container;\n        this.pixelRatio = defaultRatio;\n        this.reduceFactor = defaultReduceFactor;\n    }\n    init() {\n        const container = this.container, options = container.actualOptions;\n        this.pixelRatio = !options.detectRetina || isSsr() ? defaultRatio : window.devicePixelRatio;\n        this.reduceFactor = defaultReduceFactor;\n        const ratio = this.pixelRatio, canvas = container.canvas;\n        if (canvas.element) {\n            const element = canvas.element;\n            canvas.size.width = element.offsetWidth * ratio;\n            canvas.size.height = element.offsetHeight * ratio;\n        }\n        const particles = options.particles, moveOptions = particles.move;\n        this.maxSpeed = getRangeValue(moveOptions.gravity.maxSpeed) * ratio;\n        this.sizeAnimationSpeed = getRangeValue(particles.size.animation.speed) * ratio;\n    }\n    initParticle(particle) {\n        const options = particle.options, ratio = this.pixelRatio, moveOptions = options.move, moveDistance = moveOptions.distance, props = particle.retina;\n        props.moveDrift = getRangeValue(moveOptions.drift) * ratio;\n        props.moveSpeed = getRangeValue(moveOptions.speed) * ratio;\n        props.sizeAnimationSpeed = getRangeValue(options.size.animation.speed) * ratio;\n        const maxDistance = props.maxDistance;\n        maxDistance.horizontal = moveDistance.horizontal !== undefined ? moveDistance.horizontal * ratio : undefined;\n        maxDistance.vertical = moveDistance.vertical !== undefined ? moveDistance.vertical * ratio : undefined;\n        props.maxSpeed = getRangeValue(moveOptions.gravity.maxSpeed) * ratio;\n    }\n}\n", "import { animate, cancelAnimation, getRangeValue } from \"../Utils/NumberUtils.js\";\nimport { clickRadius, defaultFps, defaultFpsLimit, errorPrefix, millisecondsToSeconds, minCoordinate, minFpsLimit, removeDeleteCount, removeMinIndex, touchEndLengthOffset, } from \"./Utils/Constants.js\";\nimport { getLogger, safeIntersectionObserver } from \"../Utils/Utils.js\";\nimport { Canvas } from \"./Canvas.js\";\nimport { EventListeners } from \"./Utils/EventListeners.js\";\nimport { EventType } from \"../Enums/Types/EventType.js\";\nimport { Options } from \"../Options/Classes/Options.js\";\nimport { Particles } from \"./Particles.js\";\nimport { Retina } from \"./Retina.js\";\nimport { loadOptions } from \"../Utils/OptionsUtils.js\";\nfunction guardCheck(container) {\n    return container && !container.destroyed;\n}\nfunction initDelta(value, fpsLimit = defaultFps, smooth = false) {\n    return {\n        value,\n        factor: smooth ? defaultFps / fpsLimit : (defaultFps * value) / millisecondsToSeconds,\n    };\n}\nfunction loadContainerOptions(engine, container, ...sourceOptionsArr) {\n    const options = new Options(engine, container);\n    loadOptions(options, ...sourceOptionsArr);\n    return options;\n}\nexport class Container {\n    constructor(engine, id, sourceOptions) {\n        this._intersectionManager = entries => {\n            if (!guardCheck(this) || !this.actualOptions.pauseOnOutsideViewport) {\n                return;\n            }\n            for (const entry of entries) {\n                if (entry.target !== this.interactivity.element) {\n                    continue;\n                }\n                if (entry.isIntersecting) {\n                    void this.play();\n                }\n                else {\n                    this.pause();\n                }\n            }\n        };\n        this._nextFrame = (timestamp) => {\n            try {\n                if (!this._smooth &&\n                    this._lastFrameTime !== undefined &&\n                    timestamp < this._lastFrameTime + millisecondsToSeconds / this.fpsLimit) {\n                    this.draw(false);\n                    return;\n                }\n                this._lastFrameTime ??= timestamp;\n                const delta = initDelta(timestamp - this._lastFrameTime, this.fpsLimit, this._smooth);\n                this.addLifeTime(delta.value);\n                this._lastFrameTime = timestamp;\n                if (delta.value > millisecondsToSeconds) {\n                    this.draw(false);\n                    return;\n                }\n                this.particles.draw(delta);\n                if (!this.alive()) {\n                    this.destroy();\n                    return;\n                }\n                if (this.animationStatus) {\n                    this.draw(false);\n                }\n            }\n            catch (e) {\n                getLogger().error(`${errorPrefix} in animation loop`, e);\n            }\n        };\n        this._engine = engine;\n        this.id = Symbol(id);\n        this.fpsLimit = 120;\n        this._smooth = false;\n        this._delay = 0;\n        this._duration = 0;\n        this._lifeTime = 0;\n        this._firstStart = true;\n        this.started = false;\n        this.destroyed = false;\n        this._paused = true;\n        this._lastFrameTime = 0;\n        this.zLayers = 100;\n        this.pageHidden = false;\n        this._clickHandlers = new Map();\n        this._sourceOptions = sourceOptions;\n        this._initialSourceOptions = sourceOptions;\n        this.retina = new Retina(this);\n        this.canvas = new Canvas(this, this._engine);\n        this.particles = new Particles(this._engine, this);\n        this.pathGenerators = new Map();\n        this.interactivity = {\n            mouse: {\n                clicking: false,\n                inside: false,\n            },\n        };\n        this.plugins = new Map();\n        this.effectDrawers = new Map();\n        this.shapeDrawers = new Map();\n        this._options = loadContainerOptions(this._engine, this);\n        this.actualOptions = loadContainerOptions(this._engine, this);\n        this._eventListeners = new EventListeners(this);\n        this._intersectionObserver = safeIntersectionObserver(entries => this._intersectionManager(entries));\n        this._engine.dispatchEvent(EventType.containerBuilt, { container: this });\n    }\n    get animationStatus() {\n        return !this._paused && !this.pageHidden && guardCheck(this);\n    }\n    get options() {\n        return this._options;\n    }\n    get sourceOptions() {\n        return this._sourceOptions;\n    }\n    addClickHandler(callback) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        const el = this.interactivity.element;\n        if (!el) {\n            return;\n        }\n        const clickOrTouchHandler = (e, pos, radius) => {\n            if (!guardCheck(this)) {\n                return;\n            }\n            const pxRatio = this.retina.pixelRatio, posRetina = {\n                x: pos.x * pxRatio,\n                y: pos.y * pxRatio,\n            }, particles = this.particles.quadTree.queryCircle(posRetina, radius * pxRatio);\n            callback(e, particles);\n        }, clickHandler = (e) => {\n            if (!guardCheck(this)) {\n                return;\n            }\n            const mouseEvent = e, pos = {\n                x: mouseEvent.offsetX || mouseEvent.clientX,\n                y: mouseEvent.offsetY || mouseEvent.clientY,\n            };\n            clickOrTouchHandler(e, pos, clickRadius);\n        }, touchStartHandler = () => {\n            if (!guardCheck(this)) {\n                return;\n            }\n            touched = true;\n            touchMoved = false;\n        }, touchMoveHandler = () => {\n            if (!guardCheck(this)) {\n                return;\n            }\n            touchMoved = true;\n        }, touchEndHandler = (e) => {\n            if (!guardCheck(this)) {\n                return;\n            }\n            if (touched && !touchMoved) {\n                const touchEvent = e;\n                let lastTouch = touchEvent.touches[touchEvent.touches.length - touchEndLengthOffset];\n                if (!lastTouch) {\n                    lastTouch = touchEvent.changedTouches[touchEvent.changedTouches.length - touchEndLengthOffset];\n                    if (!lastTouch) {\n                        return;\n                    }\n                }\n                const element = this.canvas.element, canvasRect = element ? element.getBoundingClientRect() : undefined, pos = {\n                    x: lastTouch.clientX - (canvasRect ? canvasRect.left : minCoordinate),\n                    y: lastTouch.clientY - (canvasRect ? canvasRect.top : minCoordinate),\n                };\n                clickOrTouchHandler(e, pos, Math.max(lastTouch.radiusX, lastTouch.radiusY));\n            }\n            touched = false;\n            touchMoved = false;\n        }, touchCancelHandler = () => {\n            if (!guardCheck(this)) {\n                return;\n            }\n            touched = false;\n            touchMoved = false;\n        };\n        let touched = false, touchMoved = false;\n        this._clickHandlers.set(\"click\", clickHandler);\n        this._clickHandlers.set(\"touchstart\", touchStartHandler);\n        this._clickHandlers.set(\"touchmove\", touchMoveHandler);\n        this._clickHandlers.set(\"touchend\", touchEndHandler);\n        this._clickHandlers.set(\"touchcancel\", touchCancelHandler);\n        for (const [key, handler] of this._clickHandlers) {\n            el.addEventListener(key, handler);\n        }\n    }\n    addLifeTime(value) {\n        this._lifeTime += value;\n    }\n    addPath(key, generator, override = false) {\n        if (!guardCheck(this) || (!override && this.pathGenerators.has(key))) {\n            return false;\n        }\n        this.pathGenerators.set(key, generator);\n        return true;\n    }\n    alive() {\n        return !this._duration || this._lifeTime <= this._duration;\n    }\n    clearClickHandlers() {\n        if (!guardCheck(this)) {\n            return;\n        }\n        for (const [key, handler] of this._clickHandlers) {\n            this.interactivity.element?.removeEventListener(key, handler);\n        }\n        this._clickHandlers.clear();\n    }\n    destroy(remove = true) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this.stop();\n        this.clearClickHandlers();\n        this.particles.destroy();\n        this.canvas.destroy();\n        for (const effectDrawer of this.effectDrawers.values()) {\n            effectDrawer.destroy?.(this);\n        }\n        for (const shapeDrawer of this.shapeDrawers.values()) {\n            shapeDrawer.destroy?.(this);\n        }\n        for (const key of this.effectDrawers.keys()) {\n            this.effectDrawers.delete(key);\n        }\n        for (const key of this.shapeDrawers.keys()) {\n            this.shapeDrawers.delete(key);\n        }\n        this._engine.clearPlugins(this);\n        this.destroyed = true;\n        if (remove) {\n            const mainArr = this._engine.items, idx = mainArr.findIndex(t => t === this);\n            if (idx >= removeMinIndex) {\n                mainArr.splice(idx, removeDeleteCount);\n            }\n        }\n        this._engine.dispatchEvent(EventType.containerDestroyed, { container: this });\n    }\n    draw(force) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        let refreshTime = force;\n        const frame = (timestamp) => {\n            if (refreshTime) {\n                this._lastFrameTime = undefined;\n                refreshTime = false;\n            }\n            this._nextFrame(timestamp);\n        };\n        this._drawAnimationFrame = animate(timestamp => frame(timestamp));\n    }\n    async export(type, options = {}) {\n        for (const plugin of this.plugins.values()) {\n            if (!plugin.export) {\n                continue;\n            }\n            const res = await plugin.export(type, options);\n            if (!res.supported) {\n                continue;\n            }\n            return res.blob;\n        }\n        getLogger().error(`${errorPrefix} - Export plugin with type ${type} not found`);\n    }\n    handleClickMode(mode) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this.particles.handleClickMode(mode);\n        for (const plugin of this.plugins.values()) {\n            plugin.handleClickMode?.(mode);\n        }\n    }\n    async init() {\n        if (!guardCheck(this)) {\n            return;\n        }\n        const effects = this._engine.getSupportedEffects();\n        for (const type of effects) {\n            const drawer = this._engine.getEffectDrawer(type);\n            if (drawer) {\n                this.effectDrawers.set(type, drawer);\n            }\n        }\n        const shapes = this._engine.getSupportedShapes();\n        for (const type of shapes) {\n            const drawer = this._engine.getShapeDrawer(type);\n            if (drawer) {\n                this.shapeDrawers.set(type, drawer);\n            }\n        }\n        await this.particles.initPlugins();\n        this._options = loadContainerOptions(this._engine, this, this._initialSourceOptions, this.sourceOptions);\n        this.actualOptions = loadContainerOptions(this._engine, this, this._options);\n        const availablePlugins = await this._engine.getAvailablePlugins(this);\n        for (const [id, plugin] of availablePlugins) {\n            this.plugins.set(id, plugin);\n        }\n        this.retina.init();\n        await this.canvas.init();\n        this.updateActualOptions();\n        this.canvas.initBackground();\n        this.canvas.resize();\n        const { zLayers, duration, delay, fpsLimit, smooth } = this.actualOptions;\n        this.zLayers = zLayers;\n        this._duration = getRangeValue(duration) * millisecondsToSeconds;\n        this._delay = getRangeValue(delay) * millisecondsToSeconds;\n        this._lifeTime = 0;\n        this.fpsLimit = fpsLimit > minFpsLimit ? fpsLimit : defaultFpsLimit;\n        this._smooth = smooth;\n        for (const drawer of this.effectDrawers.values()) {\n            await drawer.init?.(this);\n        }\n        for (const drawer of this.shapeDrawers.values()) {\n            await drawer.init?.(this);\n        }\n        for (const plugin of this.plugins.values()) {\n            await plugin.init?.();\n        }\n        this._engine.dispatchEvent(EventType.containerInit, { container: this });\n        await this.particles.init();\n        this.particles.setDensity();\n        for (const plugin of this.plugins.values()) {\n            plugin.particlesSetup?.();\n        }\n        this._engine.dispatchEvent(EventType.particlesSetup, { container: this });\n    }\n    async loadTheme(name) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this._currentTheme = name;\n        await this.refresh();\n    }\n    pause() {\n        if (!guardCheck(this)) {\n            return;\n        }\n        if (this._drawAnimationFrame !== undefined) {\n            cancelAnimation(this._drawAnimationFrame);\n            delete this._drawAnimationFrame;\n        }\n        if (this._paused) {\n            return;\n        }\n        for (const plugin of this.plugins.values()) {\n            plugin.pause?.();\n        }\n        if (!this.pageHidden) {\n            this._paused = true;\n        }\n        this._engine.dispatchEvent(EventType.containerPaused, { container: this });\n    }\n    play(force) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        const needsUpdate = this._paused || force;\n        if (this._firstStart && !this.actualOptions.autoPlay) {\n            this._firstStart = false;\n            return;\n        }\n        if (this._paused) {\n            this._paused = false;\n        }\n        if (needsUpdate) {\n            for (const plugin of this.plugins.values()) {\n                if (plugin.play) {\n                    plugin.play();\n                }\n            }\n        }\n        this._engine.dispatchEvent(EventType.containerPlay, { container: this });\n        this.draw(needsUpdate ?? false);\n    }\n    async refresh() {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this.stop();\n        return this.start();\n    }\n    async reset(sourceOptions) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this._initialSourceOptions = sourceOptions;\n        this._sourceOptions = sourceOptions;\n        this._options = loadContainerOptions(this._engine, this, this._initialSourceOptions, this.sourceOptions);\n        this.actualOptions = loadContainerOptions(this._engine, this, this._options);\n        return this.refresh();\n    }\n    async start() {\n        if (!guardCheck(this) || this.started) {\n            return;\n        }\n        await this.init();\n        this.started = true;\n        await new Promise(resolve => {\n            const start = async () => {\n                this._eventListeners.addListeners();\n                if (this.interactivity.element instanceof HTMLElement && this._intersectionObserver) {\n                    this._intersectionObserver.observe(this.interactivity.element);\n                }\n                for (const plugin of this.plugins.values()) {\n                    await plugin.start?.();\n                }\n                this._engine.dispatchEvent(EventType.containerStarted, { container: this });\n                this.play();\n                resolve();\n            };\n            this._delayTimeout = setTimeout(() => void start(), this._delay);\n        });\n    }\n    stop() {\n        if (!guardCheck(this) || !this.started) {\n            return;\n        }\n        if (this._delayTimeout) {\n            clearTimeout(this._delayTimeout);\n            delete this._delayTimeout;\n        }\n        this._firstStart = true;\n        this.started = false;\n        this._eventListeners.removeListeners();\n        this.pause();\n        this.particles.clear();\n        this.canvas.stop();\n        if (this.interactivity.element instanceof HTMLElement && this._intersectionObserver) {\n            this._intersectionObserver.unobserve(this.interactivity.element);\n        }\n        for (const plugin of this.plugins.values()) {\n            plugin.stop?.();\n        }\n        for (const key of this.plugins.keys()) {\n            this.plugins.delete(key);\n        }\n        this._sourceOptions = this._options;\n        this._engine.dispatchEvent(EventType.containerStopped, { container: this });\n    }\n    updateActualOptions() {\n        this.actualOptions.responsive = [];\n        const newMaxWidth = this.actualOptions.setResponsive(this.canvas.size.width, this.retina.pixelRatio, this._options);\n        this.actualOptions.setTheme(this._currentTheme);\n        if (this._responsiveMaxWidth === newMaxWidth) {\n            return false;\n        }\n        this._responsiveMaxWidth = newMaxWidth;\n        return true;\n    }\n}\n", "import { deleteCount, minIndex } from \"../Core/Utils/Constants.js\";\nexport class EventDispatcher {\n    constructor() {\n        this._listeners = new Map();\n    }\n    addEventListener(type, listener) {\n        this.removeEventListener(type, listener);\n        let arr = this._listeners.get(type);\n        if (!arr) {\n            arr = [];\n            this._listeners.set(type, arr);\n        }\n        arr.push(listener);\n    }\n    dispatchEvent(type, args) {\n        const listeners = this._listeners.get(type);\n        listeners?.forEach(handler => handler(args));\n    }\n    hasEventListener(type) {\n        return !!this._listeners.get(type);\n    }\n    removeAllEventListeners(type) {\n        if (!type) {\n            this._listeners = new Map();\n        }\n        else {\n            this._listeners.delete(type);\n        }\n    }\n    removeEventListener(type, listener) {\n        const arr = this._listeners.get(type);\n        if (!arr) {\n            return;\n        }\n        const length = arr.length, idx = arr.indexOf(listener);\n        if (idx < minIndex) {\n            return;\n        }\n        if (length === deleteCount) {\n            this._listeners.delete(type);\n        }\n        else {\n            arr.splice(idx, deleteCount);\n        }\n    }\n}\n", "import { canvasFirstIndex, canvasTag, errorPrefix, generatedAttribute, generatedFalse, generatedTrue, loadMinIndex, loadRandomFactor, none, one, removeDeleteCount, } from \"./Utils/Constants.js\";\nimport { executeOnSingleOrMultiple, getLogger, itemFromSingleOrMultiple } from \"../Utils/Utils.js\";\nimport { Container } from \"./Container.js\";\nimport { EventDispatcher } from \"../Utils/EventDispatcher.js\";\nimport { EventType } from \"../Enums/Types/EventType.js\";\nimport { getRandom } from \"../Utils/NumberUtils.js\";\nasync function getItemsFromInitializer(container, map, initializers, force = false) {\n    let res = map.get(container);\n    if (!res || force) {\n        res = await Promise.all([...initializers.values()].map(t => t(container)));\n        map.set(container, res);\n    }\n    return res;\n}\nasync function getDataFromUrl(data) {\n    const url = itemFromSingleOrMultiple(data.url, data.index);\n    if (!url) {\n        return data.fallback;\n    }\n    const response = await fetch(url);\n    if (response.ok) {\n        return (await response.json());\n    }\n    getLogger().error(`${errorPrefix} ${response.status} while retrieving config file`);\n    return data.fallback;\n}\nconst getCanvasFromContainer = (domContainer) => {\n    let canvasEl;\n    if (domContainer instanceof HTMLCanvasElement || domContainer.tagName.toLowerCase() === canvasTag) {\n        canvasEl = domContainer;\n        if (!canvasEl.dataset[generatedAttribute]) {\n            canvasEl.dataset[generatedAttribute] = generatedFalse;\n        }\n    }\n    else {\n        const existingCanvases = domContainer.getElementsByTagName(canvasTag);\n        if (existingCanvases.length) {\n            canvasEl = existingCanvases[canvasFirstIndex];\n            canvasEl.dataset[generatedAttribute] = generatedFalse;\n        }\n        else {\n            canvasEl = document.createElement(canvasTag);\n            canvasEl.dataset[generatedAttribute] = generatedTrue;\n            domContainer.appendChild(canvasEl);\n        }\n    }\n    const fullPercent = \"100%\";\n    if (!canvasEl.style.width) {\n        canvasEl.style.width = fullPercent;\n    }\n    if (!canvasEl.style.height) {\n        canvasEl.style.height = fullPercent;\n    }\n    return canvasEl;\n}, getDomContainer = (id, source) => {\n    let domContainer = source ?? document.getElementById(id);\n    if (domContainer) {\n        return domContainer;\n    }\n    domContainer = document.createElement(\"div\");\n    domContainer.id = id;\n    domContainer.dataset[generatedAttribute] = generatedTrue;\n    document.body.append(domContainer);\n    return domContainer;\n};\nexport class Engine {\n    constructor() {\n        this._configs = new Map();\n        this._domArray = [];\n        this._eventDispatcher = new EventDispatcher();\n        this._initialized = false;\n        this.plugins = [];\n        this.colorManagers = new Map();\n        this.easingFunctions = new Map();\n        this._initializers = {\n            interactors: new Map(),\n            movers: new Map(),\n            updaters: new Map(),\n        };\n        this.interactors = new Map();\n        this.movers = new Map();\n        this.updaters = new Map();\n        this.presets = new Map();\n        this.effectDrawers = new Map();\n        this.shapeDrawers = new Map();\n        this.pathGenerators = new Map();\n    }\n    get configs() {\n        const res = {};\n        for (const [name, config] of this._configs) {\n            res[name] = config;\n        }\n        return res;\n    }\n    get items() {\n        return this._domArray;\n    }\n    get version() {\n        return \"3.8.1\";\n    }\n    async addColorManager(manager, refresh = true) {\n        this.colorManagers.set(manager.key, manager);\n        await this.refresh(refresh);\n    }\n    addConfig(config) {\n        const key = config.key ?? config.name ?? \"default\";\n        this._configs.set(key, config);\n        this._eventDispatcher.dispatchEvent(EventType.configAdded, { data: { name: key, config } });\n    }\n    async addEasing(name, easing, refresh = true) {\n        if (this.getEasing(name)) {\n            return;\n        }\n        this.easingFunctions.set(name, easing);\n        await this.refresh(refresh);\n    }\n    async addEffect(effect, drawer, refresh = true) {\n        executeOnSingleOrMultiple(effect, type => {\n            if (!this.getEffectDrawer(type)) {\n                this.effectDrawers.set(type, drawer);\n            }\n        });\n        await this.refresh(refresh);\n    }\n    addEventListener(type, listener) {\n        this._eventDispatcher.addEventListener(type, listener);\n    }\n    async addInteractor(name, interactorInitializer, refresh = true) {\n        this._initializers.interactors.set(name, interactorInitializer);\n        await this.refresh(refresh);\n    }\n    async addMover(name, moverInitializer, refresh = true) {\n        this._initializers.movers.set(name, moverInitializer);\n        await this.refresh(refresh);\n    }\n    async addParticleUpdater(name, updaterInitializer, refresh = true) {\n        this._initializers.updaters.set(name, updaterInitializer);\n        await this.refresh(refresh);\n    }\n    async addPathGenerator(name, generator, refresh = true) {\n        if (!this.getPathGenerator(name)) {\n            this.pathGenerators.set(name, generator);\n        }\n        await this.refresh(refresh);\n    }\n    async addPlugin(plugin, refresh = true) {\n        if (!this.getPlugin(plugin.id)) {\n            this.plugins.push(plugin);\n        }\n        await this.refresh(refresh);\n    }\n    async addPreset(preset, options, override = false, refresh = true) {\n        if (override || !this.getPreset(preset)) {\n            this.presets.set(preset, options);\n        }\n        await this.refresh(refresh);\n    }\n    async addShape(drawer, refresh = true) {\n        for (const validType of drawer.validTypes) {\n            if (this.getShapeDrawer(validType)) {\n                continue;\n            }\n            this.shapeDrawers.set(validType, drawer);\n        }\n        await this.refresh(refresh);\n    }\n    checkVersion(pluginVersion) {\n        if (this.version === pluginVersion) {\n            return;\n        }\n        throw new Error(`The tsParticles version is different from the loaded plugins version. Engine version: ${this.version}. Plugin version: ${pluginVersion}`);\n    }\n    clearPlugins(container) {\n        this.updaters.delete(container);\n        this.movers.delete(container);\n        this.interactors.delete(container);\n    }\n    dispatchEvent(type, args) {\n        this._eventDispatcher.dispatchEvent(type, args);\n    }\n    dom() {\n        return this.items;\n    }\n    domItem(index) {\n        return this.item(index);\n    }\n    async getAvailablePlugins(container) {\n        const res = new Map();\n        for (const plugin of this.plugins) {\n            if (plugin.needsPlugin(container.actualOptions)) {\n                res.set(plugin.id, await plugin.getPlugin(container));\n            }\n        }\n        return res;\n    }\n    getEasing(name) {\n        return this.easingFunctions.get(name) ?? ((value) => value);\n    }\n    getEffectDrawer(type) {\n        return this.effectDrawers.get(type);\n    }\n    async getInteractors(container, force = false) {\n        return getItemsFromInitializer(container, this.interactors, this._initializers.interactors, force);\n    }\n    async getMovers(container, force = false) {\n        return getItemsFromInitializer(container, this.movers, this._initializers.movers, force);\n    }\n    getPathGenerator(type) {\n        return this.pathGenerators.get(type);\n    }\n    getPlugin(plugin) {\n        return this.plugins.find(t => t.id === plugin);\n    }\n    getPreset(preset) {\n        return this.presets.get(preset);\n    }\n    getShapeDrawer(type) {\n        return this.shapeDrawers.get(type);\n    }\n    getSupportedEffects() {\n        return this.effectDrawers.keys();\n    }\n    getSupportedShapes() {\n        return this.shapeDrawers.keys();\n    }\n    async getUpdaters(container, force = false) {\n        return getItemsFromInitializer(container, this.updaters, this._initializers.updaters, force);\n    }\n    init() {\n        if (this._initialized) {\n            return;\n        }\n        this._initialized = true;\n    }\n    item(index) {\n        const { items } = this, item = items[index];\n        if (!item || item.destroyed) {\n            items.splice(index, removeDeleteCount);\n            return;\n        }\n        return item;\n    }\n    async load(params) {\n        const id = params.id ?? params.element?.id ?? `tsparticles${Math.floor(getRandom() * loadRandomFactor)}`, { index, url } = params, options = url ? await getDataFromUrl({ fallback: params.options, url, index }) : params.options;\n        const currentOptions = itemFromSingleOrMultiple(options, index), { items } = this, oldIndex = items.findIndex(v => v.id.description === id), newItem = new Container(this, id, currentOptions);\n        if (oldIndex >= loadMinIndex) {\n            const old = this.item(oldIndex), deleteCount = old ? one : none;\n            if (old && !old.destroyed) {\n                old.destroy(false);\n            }\n            items.splice(oldIndex, deleteCount, newItem);\n        }\n        else {\n            items.push(newItem);\n        }\n        const domContainer = getDomContainer(id, params.element), canvasEl = getCanvasFromContainer(domContainer);\n        newItem.canvas.loadCanvas(canvasEl);\n        await newItem.start();\n        return newItem;\n    }\n    loadOptions(options, sourceOptions) {\n        this.plugins.forEach(plugin => plugin.loadOptions?.(options, sourceOptions));\n    }\n    loadParticlesOptions(container, options, ...sourceOptions) {\n        const updaters = this.updaters.get(container);\n        if (!updaters) {\n            return;\n        }\n        updaters.forEach(updater => updater.loadOptions?.(options, ...sourceOptions));\n    }\n    async refresh(refresh = true) {\n        if (!refresh) {\n            return;\n        }\n        await Promise.all(this.items.map(t => t.refresh()));\n    }\n    removeEventListener(type, listener) {\n        this._eventDispatcher.removeEventListener(type, listener);\n    }\n    setOnClickHandler(callback) {\n        const { items } = this;\n        if (!items.length) {\n            throw new Error(`${errorPrefix} can only set click handlers after calling tsParticles.load()`);\n        }\n        items.forEach(item => item.addClickHandler(callback));\n    }\n}\n", "import { Engine } from \"./Core/Engine.js\";\nexport function init() {\n    const engine = new Engine();\n    engine.init();\n    return engine;\n}\n", "import { InteractorType } from \"../../Enums/Types/InteractorType.js\";\nexport class ExternalInteractorBase {\n    constructor(container) {\n        this.type = InteractorType.external;\n        this.container = container;\n    }\n}\n", "import { InteractorType } from \"../../Enums/Types/InteractorType.js\";\nexport class ParticlesInteractorBase {\n    constructor(container) {\n        this.type = InteractorType.particles;\n        this.container = container;\n    }\n}\n", "export var RotateDirection;\n(function (RotateDirection) {\n    RotateDirection[\"clockwise\"] = \"clockwise\";\n    RotateDirection[\"counterClockwise\"] = \"counter-clockwise\";\n    RotateDirection[\"random\"] = \"random\";\n})(RotateDirection || (RotateDirection = {}));\n", "export var GradientType;\n(function (GradientType) {\n    GradientType[\"linear\"] = \"linear\";\n    GradientType[\"radial\"] = \"radial\";\n    GradientType[\"random\"] = \"random\";\n})(GradientType || (GradientType = {}));\n", "export var EasingType;\n(function (EasingType) {\n    EasingType[\"easeInBack\"] = \"ease-in-back\";\n    EasingType[\"easeInCirc\"] = \"ease-in-circ\";\n    EasingType[\"easeInCubic\"] = \"ease-in-cubic\";\n    EasingType[\"easeInLinear\"] = \"ease-in-linear\";\n    EasingType[\"easeInQuad\"] = \"ease-in-quad\";\n    EasingType[\"easeInQuart\"] = \"ease-in-quart\";\n    EasingType[\"easeInQuint\"] = \"ease-in-quint\";\n    EasingType[\"easeInExpo\"] = \"ease-in-expo\";\n    EasingType[\"easeInSine\"] = \"ease-in-sine\";\n    EasingType[\"easeOutBack\"] = \"ease-out-back\";\n    EasingType[\"easeOutCirc\"] = \"ease-out-circ\";\n    EasingType[\"easeOutCubic\"] = \"ease-out-cubic\";\n    EasingType[\"easeOutLinear\"] = \"ease-out-linear\";\n    EasingType[\"easeOutQuad\"] = \"ease-out-quad\";\n    EasingType[\"easeOutQuart\"] = \"ease-out-quart\";\n    EasingType[\"easeOutQuint\"] = \"ease-out-quint\";\n    EasingType[\"easeOutExpo\"] = \"ease-out-expo\";\n    EasingType[\"easeOutSine\"] = \"ease-out-sine\";\n    EasingType[\"easeInOutBack\"] = \"ease-in-out-back\";\n    EasingType[\"easeInOutCirc\"] = \"ease-in-out-circ\";\n    EasingType[\"easeInOutCubic\"] = \"ease-in-out-cubic\";\n    EasingType[\"easeInOutLinear\"] = \"ease-in-out-linear\";\n    EasingType[\"easeInOutQuad\"] = \"ease-in-out-quad\";\n    EasingType[\"easeInOutQuart\"] = \"ease-in-out-quart\";\n    EasingType[\"easeInOutQuint\"] = \"ease-in-out-quint\";\n    EasingType[\"easeInOutExpo\"] = \"ease-in-out-expo\";\n    EasingType[\"easeInOutSine\"] = \"ease-in-out-sine\";\n})(EasingType || (EasingType = {}));\n", "import { init } from \"./init.js\";\nimport { isSsr } from \"./Utils/Utils.js\";\nconst tsParticles = init();\nif (!isSsr()) {\n    window.tsParticles = tsParticles;\n}\nexport * from \"./exports.js\";\nexport * from \"./export-types.js\";\nexport { tsParticles };\n", "import { isNull } from \"@tsparticles/engine\";\nexport class AbsorberSizeLimit {\n    constructor() {\n        this.radius = 0;\n        this.mass = 0;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.mass !== undefined) {\n            this.mass = data.mass;\n        }\n        if (data.radius !== undefined) {\n            this.radius = data.radius;\n        }\n    }\n}\n", "import { ValueWithRandom, isNull, isNumber } from \"@tsparticles/engine\";\nimport { AbsorberSizeLimit } from \"./AbsorberSizeLimit.js\";\nexport class AbsorberSize extends ValueWithRandom {\n    constructor() {\n        super();\n        this.density = 5;\n        this.value = 50;\n        this.limit = new AbsorberSizeLimit();\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        super.load(data);\n        if (data.density !== undefined) {\n            this.density = data.density;\n        }\n        if (isNumber(data.limit)) {\n            this.limit.radius = data.limit;\n        }\n        else {\n            this.limit.load(data.limit);\n        }\n    }\n}\n", "import { OptionsColor, isNull, setRangeValue, } from \"@tsparticles/engine\";\nimport { AbsorberSize } from \"./AbsorberSize.js\";\nexport class Absorber {\n    constructor() {\n        this.color = new OptionsColor();\n        this.color.value = \"#000000\";\n        this.draggable = false;\n        this.opacity = 1;\n        this.destroy = true;\n        this.orbits = false;\n        this.size = new AbsorberSize();\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.draggable !== undefined) {\n            this.draggable = data.draggable;\n        }\n        this.name = data.name;\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n        if (data.position !== undefined) {\n            this.position = {};\n            if (data.position.x !== undefined) {\n                this.position.x = setRangeValue(data.position.x);\n            }\n            if (data.position.y !== undefined) {\n                this.position.y = setRangeValue(data.position.y);\n            }\n        }\n        if (data.size !== undefined) {\n            this.size.load(data.size);\n        }\n        if (data.destroy !== undefined) {\n            this.destroy = data.destroy;\n        }\n        if (data.orbits !== undefined) {\n            this.orbits = data.orbits;\n        }\n    }\n}\n", "export var AbsorberClickMode;\n(function (AbsorberClickMode) {\n    AbsorberClickMode[\"absorber\"] = \"absorber\";\n})(AbsorberClickMode || (AbsorberClickMode = {}));\n", "import { RotateDirection, Vector, calcPositionOrRandomFromSize, calcPositionOrRandomFromSizeRanged, getDistance, getDistances, getRandom, getRangeValue, getStyleFromRgb, isPointInside, originPoint, percentDenominator, rangeColorToRgb, } from \"@tsparticles/engine\";\nimport { Absorber } from \"./Options/Classes/Absorber.js\";\nconst squareExp = 2, absorbFactor = 0.033, minOrbitLength = 0, minRadius = 0, minMass = 0, minAngle = 0, double = 2, maxAngle = Math.PI * double, minVelocity = 0;\nexport class AbsorberInstance {\n    constructor(absorbers, container, engine, options, position) {\n        this._calcPosition = () => {\n            const exactPosition = calcPositionOrRandomFromSizeRanged({\n                size: this._container.canvas.size,\n                position: this.options.position,\n            });\n            return Vector.create(exactPosition.x, exactPosition.y);\n        };\n        this._updateParticlePosition = (particle, v) => {\n            if (particle.destroyed) {\n                return;\n            }\n            const container = this._container, canvasSize = container.canvas.size;\n            if (particle.needsNewPosition) {\n                const newPosition = calcPositionOrRandomFromSize({ size: canvasSize });\n                particle.position.setTo(newPosition);\n                particle.velocity.setTo(particle.initialVelocity);\n                particle.absorberOrbit = undefined;\n                particle.needsNewPosition = false;\n            }\n            if (this.options.orbits) {\n                if (particle.absorberOrbit === undefined) {\n                    particle.absorberOrbit = Vector.origin;\n                    particle.absorberOrbit.length = getDistance(particle.getPosition(), this.position);\n                    particle.absorberOrbit.angle = getRandom() * maxAngle;\n                }\n                if (particle.absorberOrbit.length <= this.size && !this.options.destroy) {\n                    const minSize = Math.min(canvasSize.width, canvasSize.height), offset = 1, randomOffset = 0.1, randomFactor = 0.2;\n                    particle.absorberOrbit.length = minSize * (offset + (getRandom() * randomFactor - randomOffset));\n                }\n                if (particle.absorberOrbitDirection === undefined) {\n                    particle.absorberOrbitDirection =\n                        particle.velocity.x >= minVelocity ? RotateDirection.clockwise : RotateDirection.counterClockwise;\n                }\n                const orbitRadius = particle.absorberOrbit.length, orbitAngle = particle.absorberOrbit.angle, orbitDirection = particle.absorberOrbitDirection;\n                particle.velocity.setTo(Vector.origin);\n                const updateFunc = {\n                    x: orbitDirection === RotateDirection.clockwise ? Math.cos : Math.sin,\n                    y: orbitDirection === RotateDirection.clockwise ? Math.sin : Math.cos,\n                };\n                particle.position.x = this.position.x + orbitRadius * updateFunc.x(orbitAngle);\n                particle.position.y = this.position.y + orbitRadius * updateFunc.y(orbitAngle);\n                particle.absorberOrbit.length -= v.length;\n                particle.absorberOrbit.angle +=\n                    (((particle.retina.moveSpeed ?? minVelocity) * container.retina.pixelRatio) / percentDenominator) *\n                        container.retina.reduceFactor;\n            }\n            else {\n                const addV = Vector.origin;\n                addV.length = v.length;\n                addV.angle = v.angle;\n                particle.velocity.addTo(addV);\n            }\n        };\n        this._absorbers = absorbers;\n        this._container = container;\n        this._engine = engine;\n        this.initialPosition = position ? Vector.create(position.x, position.y) : undefined;\n        if (options instanceof Absorber) {\n            this.options = options;\n        }\n        else {\n            this.options = new Absorber();\n            this.options.load(options);\n        }\n        this.dragging = false;\n        this.name = this.options.name;\n        this.opacity = this.options.opacity;\n        this.size = getRangeValue(this.options.size.value) * container.retina.pixelRatio;\n        this.mass = this.size * this.options.size.density * container.retina.reduceFactor;\n        const limit = this.options.size.limit;\n        this.limit = {\n            radius: limit.radius * container.retina.pixelRatio * container.retina.reduceFactor,\n            mass: limit.mass,\n        };\n        this.color = rangeColorToRgb(this._engine, this.options.color) ?? {\n            b: 0,\n            g: 0,\n            r: 0,\n        };\n        this.position = this.initialPosition?.copy() ?? this._calcPosition();\n    }\n    attract(particle) {\n        const container = this._container, options = this.options;\n        if (options.draggable) {\n            const mouse = container.interactivity.mouse;\n            if (mouse.clicking && mouse.downPosition) {\n                const mouseDist = getDistance(this.position, mouse.downPosition);\n                if (mouseDist <= this.size) {\n                    this.dragging = true;\n                }\n            }\n            else {\n                this.dragging = false;\n            }\n            if (this.dragging && mouse.position) {\n                this.position.x = mouse.position.x;\n                this.position.y = mouse.position.y;\n            }\n        }\n        const pos = particle.getPosition(), { dx, dy, distance } = getDistances(this.position, pos), v = Vector.create(dx, dy);\n        v.length = (this.mass / Math.pow(distance, squareExp)) * container.retina.reduceFactor;\n        if (distance < this.size + particle.getRadius()) {\n            const sizeFactor = particle.getRadius() * absorbFactor * container.retina.pixelRatio;\n            if ((this.size > particle.getRadius() && distance < this.size - particle.getRadius()) ||\n                (particle.absorberOrbit !== undefined && particle.absorberOrbit.length < minOrbitLength)) {\n                if (options.destroy) {\n                    particle.destroy();\n                }\n                else {\n                    particle.needsNewPosition = true;\n                    this._updateParticlePosition(particle, v);\n                }\n            }\n            else {\n                if (options.destroy) {\n                    particle.size.value -= sizeFactor;\n                }\n                this._updateParticlePosition(particle, v);\n            }\n            if (this.limit.radius <= minRadius || this.size < this.limit.radius) {\n                this.size += sizeFactor;\n            }\n            if (this.limit.mass <= minMass || this.mass < this.limit.mass) {\n                this.mass += sizeFactor * this.options.size.density * container.retina.reduceFactor;\n            }\n        }\n        else {\n            this._updateParticlePosition(particle, v);\n        }\n    }\n    draw(context) {\n        context.translate(this.position.x, this.position.y);\n        context.beginPath();\n        context.arc(originPoint.x, originPoint.y, this.size, minAngle, maxAngle, false);\n        context.closePath();\n        context.fillStyle = getStyleFromRgb(this.color, this.opacity);\n        context.fill();\n    }\n    resize() {\n        const initialPosition = this.initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this._container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n    }\n}\n", "import { executeOnSingleOrMultiple, isNumber, itemFromSingleOrMultiple, } from \"@tsparticles/engine\";\nimport { AbsorberClickMode } from \"./Enums/AbsorberClickMode.js\";\nimport { AbsorberInstance } from \"./AbsorberInstance.js\";\nconst defaultIndex = 0;\nexport class Absorbers {\n    constructor(container, engine) {\n        this._container = container;\n        this._engine = engine;\n        this.array = [];\n        this.absorbers = [];\n        this.interactivityAbsorbers = [];\n        container.getAbsorber = (idxOrName) => idxOrName === undefined || isNumber(idxOrName)\n            ? this.array[idxOrName ?? defaultIndex]\n            : this.array.find(t => t.name === idxOrName);\n        container.addAbsorber = async (options, position) => this.addAbsorber(options, position);\n    }\n    async addAbsorber(options, position) {\n        const absorber = new AbsorberInstance(this, this._container, this._engine, options, position);\n        this.array.push(absorber);\n        return Promise.resolve(absorber);\n    }\n    draw(context) {\n        for (const absorber of this.array) {\n            absorber.draw(context);\n        }\n    }\n    handleClickMode(mode) {\n        const absorberOptions = this.absorbers, modeAbsorbers = this.interactivityAbsorbers;\n        if (mode === AbsorberClickMode.absorber) {\n            const absorbersModeOptions = itemFromSingleOrMultiple(modeAbsorbers), absorbersOptions = absorbersModeOptions ?? itemFromSingleOrMultiple(absorberOptions), aPosition = this._container.interactivity.mouse.clickPosition;\n            void this.addAbsorber(absorbersOptions, aPosition);\n        }\n    }\n    async init() {\n        this.absorbers = this._container.actualOptions.absorbers;\n        this.interactivityAbsorbers = this._container.actualOptions.interactivity.modes.absorbers;\n        const promises = executeOnSingleOrMultiple(this.absorbers, async (absorber) => {\n            await this.addAbsorber(absorber);\n        });\n        if (promises instanceof Array) {\n            await Promise.all(promises);\n        }\n        else {\n            await promises;\n        }\n    }\n    particleUpdate(particle) {\n        for (const absorber of this.array) {\n            absorber.attract(particle);\n            if (particle.destroyed) {\n                break;\n            }\n        }\n    }\n    removeAbsorber(absorber) {\n        const index = this.array.indexOf(absorber), deleteCount = 1;\n        if (index >= defaultIndex) {\n            this.array.splice(index, deleteCount);\n        }\n    }\n    resize() {\n        for (const absorber of this.array) {\n            absorber.resize();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n}\n", "import { executeOnSingleOrMultiple, isArray, isInArray, } from \"@tsparticles/engine\";\nimport { Absorber } from \"./Options/Classes/Absorber.js\";\nimport { AbsorberClickMode } from \"./Enums/AbsorberClickMode.js\";\nimport { Absorbers } from \"./Absorbers.js\";\nexport class AbsorbersPlugin {\n    constructor(engine) {\n        this.id = \"absorbers\";\n        this._engine = engine;\n    }\n    async getPlugin(container) {\n        return Promise.resolve(new Absorbers(container, this._engine));\n    }\n    loadOptions(options, source) {\n        if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n            return;\n        }\n        if (source?.absorbers) {\n            options.absorbers = executeOnSingleOrMultiple(source.absorbers, absorber => {\n                const tmp = new Absorber();\n                tmp.load(absorber);\n                return tmp;\n            });\n        }\n        options.interactivity.modes.absorbers = executeOnSingleOrMultiple(source?.interactivity?.modes?.absorbers, absorber => {\n            const tmp = new Absorber();\n            tmp.load(absorber);\n            return tmp;\n        });\n    }\n    needsPlugin(options) {\n        if (!options) {\n            return false;\n        }\n        const absorbers = options.absorbers;\n        if (isArray(absorbers)) {\n            return !!absorbers.length;\n        }\n        else if (absorbers) {\n            return true;\n        }\n        else if (options.interactivity?.events?.onClick?.mode &&\n            isInArray(AbsorberClickMode.absorber, options.interactivity.events.onClick.mode)) {\n            return true;\n        }\n        return false;\n    }\n}\n", "import { AbsorbersPlugin } from \"./AbsorbersPlugin.js\";\nexport async function loadAbsorbersPlugin(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addPlugin(new AbsorbersPlugin(engine), refresh);\n}\nexport * from \"./AbsorberContainer.js\";\nexport * from \"./Enums/AbsorberClickMode.js\";\n", "import { isNull, setRangeValue } from \"@tsparticles/engine\";\nexport class DestroyBounds {\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.bottom !== undefined) {\n            this.bottom = setRangeValue(data.bottom);\n        }\n        if (data.left !== undefined) {\n            this.left = setRangeValue(data.left);\n        }\n        if (data.right !== undefined) {\n            this.right = setRangeValue(data.right);\n        }\n        if (data.top !== undefined) {\n            this.top = setRangeValue(data.top);\n        }\n    }\n}\n", "export var DestroyMode;\n(function (DestroyMode) {\n    DestroyMode[\"none\"] = \"none\";\n    DestroyMode[\"split\"] = \"split\";\n})(DestroyMode || (DestroyMode = {}));\n", "import { ValueWithRandom } from \"@tsparticles/engine\";\nexport class SplitFactor extends ValueWithRandom {\n    constructor() {\n        super();\n        this.value = 3;\n    }\n}\n", "import { ValueWithRandom } from \"@tsparticles/engine\";\nexport class SplitRate extends ValueWithRandom {\n    constructor() {\n        super();\n        this.value = { min: 4, max: 9 };\n    }\n}\n", "import { OptionsColor, deepExtend, executeOnSingleOrMultiple, isNull, } from \"@tsparticles/engine\";\nimport { SplitFactor } from \"./SplitFactor.js\";\nimport { SplitRate } from \"./SplitRate.js\";\nexport class Split {\n    constructor() {\n        this.count = 1;\n        this.factor = new SplitFactor();\n        this.rate = new SplitRate();\n        this.sizeOffset = true;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        this.factor.load(data.factor);\n        this.rate.load(data.rate);\n        this.particles = executeOnSingleOrMultiple(data.particles, particles => {\n            return deepExtend({}, particles);\n        });\n        if (data.sizeOffset !== undefined) {\n            this.sizeOffset = data.sizeOffset;\n        }\n        if (data.colorOffset) {\n            this.colorOffset = this.colorOffset ?? {};\n            if (data.colorOffset.h !== undefined) {\n                this.colorOffset.h = data.colorOffset.h;\n            }\n            if (data.colorOffset.s !== undefined) {\n                this.colorOffset.s = data.colorOffset.s;\n            }\n            if (data.colorOffset.l !== undefined) {\n                this.colorOffset.l = data.colorOffset.l;\n            }\n        }\n    }\n}\n", "import { isNull } from \"@tsparticles/engine\";\nimport { DestroyBounds } from \"./DestroyBounds.js\";\nimport { DestroyMode } from \"../../Enums/DestroyMode.js\";\nimport { Split } from \"./Split.js\";\nexport class Destroy {\n    constructor() {\n        this.bounds = new DestroyBounds();\n        this.mode = DestroyMode.none;\n        this.split = new Split();\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.mode) {\n            this.mode = data.mode;\n        }\n        if (data.bounds) {\n            this.bounds.load(data.bounds);\n        }\n        this.split.load(data.split);\n    }\n}\n", "import { PixelMode, getRangeValue, isNumber, itemFromSingleOrMultiple, loadParticlesOptions, randomInRange, setRangeValue, } from \"@tsparticles/engine\";\nconst defaultOffset = 0, minDestroySize = 0.5, defaultSplitCount = 0, increment = 1, unbreakableTime = 500, minSplitCount = 0;\nfunction addSplitParticle(engine, container, parent, splitParticlesOptions) {\n    const destroyOptions = parent.options.destroy;\n    if (!destroyOptions) {\n        return;\n    }\n    const splitOptions = destroyOptions.split, options = loadParticlesOptions(engine, container, parent.options), factor = getRangeValue(splitOptions.factor.value), parentColor = parent.getFillColor();\n    if (splitOptions.color) {\n        options.color.load(splitOptions.color);\n    }\n    else if (splitOptions.colorOffset && parentColor) {\n        options.color.load({\n            value: {\n                hsl: {\n                    h: parentColor.h + getRangeValue(splitOptions.colorOffset.h ?? defaultOffset),\n                    s: parentColor.s + getRangeValue(splitOptions.colorOffset.s ?? defaultOffset),\n                    l: parentColor.l + getRangeValue(splitOptions.colorOffset.l ?? defaultOffset),\n                },\n            },\n        });\n    }\n    else {\n        options.color.load({\n            value: {\n                hsl: parent.getFillColor(),\n            },\n        });\n    }\n    options.move.load({\n        center: {\n            x: parent.position.x,\n            y: parent.position.y,\n            mode: PixelMode.precise,\n        },\n    });\n    if (isNumber(options.size.value)) {\n        options.size.value /= factor;\n    }\n    else {\n        options.size.value.min /= factor;\n        options.size.value.max /= factor;\n    }\n    options.load(splitParticlesOptions);\n    const offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : defaultOffset, position = {\n        x: parent.position.x + randomInRange(offset),\n        y: parent.position.y + randomInRange(offset),\n    };\n    return container.particles.addParticle(position, options, parent.group, (particle) => {\n        if (particle.size.value < minDestroySize) {\n            return false;\n        }\n        particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n        particle.splitCount = (parent.splitCount ?? defaultSplitCount) + increment;\n        particle.unbreakable = true;\n        setTimeout(() => {\n            particle.unbreakable = false;\n        }, unbreakableTime);\n        return true;\n    });\n}\nexport function split(engine, container, particle) {\n    const destroyOptions = particle.options.destroy;\n    if (!destroyOptions) {\n        return;\n    }\n    const splitOptions = destroyOptions.split;\n    if (splitOptions.count >= minSplitCount &&\n        (particle.splitCount === undefined || particle.splitCount++ > splitOptions.count)) {\n        return;\n    }\n    const rate = getRangeValue(splitOptions.rate.value), particlesSplitOptions = itemFromSingleOrMultiple(splitOptions.particles);\n    for (let i = 0; i < rate; i++) {\n        addSplitParticle(engine, container, particle, particlesSplitOptions);\n    }\n}\n", "import { getRangeValue, percentDenominator, } from \"@tsparticles/engine\";\nimport { Destroy } from \"./Options/Classes/Destroy.js\";\nimport { DestroyMode } from \"./Enums/DestroyMode.js\";\nimport { split } from \"./Utils.js\";\nexport class DestroyUpdater {\n    constructor(engine, container) {\n        this.container = container;\n        this.engine = engine;\n    }\n    init(particle) {\n        const container = this.container, particlesOptions = particle.options, destroyOptions = particlesOptions.destroy;\n        if (!destroyOptions) {\n            return;\n        }\n        particle.splitCount = 0;\n        const destroyBoundsOptions = destroyOptions.bounds;\n        if (!particle.destroyBounds) {\n            particle.destroyBounds = {};\n        }\n        const { bottom, left, right, top } = destroyBoundsOptions, { destroyBounds } = particle, canvasSize = container.canvas.size;\n        if (bottom) {\n            destroyBounds.bottom = (getRangeValue(bottom) * canvasSize.height) / percentDenominator;\n        }\n        if (left) {\n            destroyBounds.left = (getRangeValue(left) * canvasSize.width) / percentDenominator;\n        }\n        if (right) {\n            destroyBounds.right = (getRangeValue(right) * canvasSize.width) / percentDenominator;\n        }\n        if (top) {\n            destroyBounds.top = (getRangeValue(top) * canvasSize.height) / percentDenominator;\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.destroy) {\n            options.destroy = new Destroy();\n        }\n        for (const source of sources) {\n            options.destroy.load(source?.destroy);\n        }\n    }\n    particleDestroyed(particle, override) {\n        if (override) {\n            return;\n        }\n        const destroyOptions = particle.options.destroy;\n        if (destroyOptions && destroyOptions.mode === DestroyMode.split) {\n            split(this.engine, this.container, particle);\n        }\n    }\n    update(particle) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        const position = particle.getPosition(), bounds = particle.destroyBounds;\n        if (!bounds) {\n            return;\n        }\n        if ((bounds.bottom !== undefined && position.y >= bounds.bottom) ||\n            (bounds.left !== undefined && position.x <= bounds.left) ||\n            (bounds.right !== undefined && position.x >= bounds.right) ||\n            (bounds.top !== undefined && position.y <= bounds.top)) {\n            particle.destroy();\n        }\n    }\n}\n", "import { DestroyUpdater } from \"./DestroyUpdater.js\";\nexport async function loadDestroyUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"destroy\", container => {\n        return Promise.resolve(new DestroyUpdater(engine, container));\n    }, refresh);\n}\n", "import { isNull, setRangeValue } from \"@tsparticles/engine\";\nexport class EmitterLife {\n    constructor() {\n        this.wait = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        if (data.delay !== undefined) {\n            this.delay = setRangeValue(data.delay);\n        }\n        if (data.duration !== undefined) {\n            this.duration = setRangeValue(data.duration);\n        }\n        if (data.wait !== undefined) {\n            this.wait = data.wait;\n        }\n    }\n}\n", "import { isNull, setRangeValue } from \"@tsparticles/engine\";\nexport class EmitterRate {\n    constructor() {\n        this.quantity = 1;\n        this.delay = 0.1;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.quantity !== undefined) {\n            this.quantity = setRangeValue(data.quantity);\n        }\n        if (data.delay !== undefined) {\n            this.delay = setRangeValue(data.delay);\n        }\n    }\n}\n", "import { isNull } from \"@tsparticles/engine\";\nexport class EmitterShapeReplace {\n    constructor() {\n        this.color = false;\n        this.opacity = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = data.color;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n", "import { deepExtend, isNull } from \"@tsparticles/engine\";\nimport { EmitterShapeReplace } from \"./EmitterShapeReplace.js\";\nexport class EmitterShape {\n    constructor() {\n        this.options = {};\n        this.replace = new EmitterShapeReplace();\n        this.type = \"square\";\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.options !== undefined) {\n            this.options = deepExtend({}, data.options ?? {});\n        }\n        this.replace.load(data.replace);\n        if (data.type !== undefined) {\n            this.type = data.type;\n        }\n    }\n}\n", "import { PixelMode, isNull } from \"@tsparticles/engine\";\nexport class EmitterSize {\n    constructor() {\n        this.mode = PixelMode.percent;\n        this.height = 0;\n        this.width = 0;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.height !== undefined) {\n            this.height = data.height;\n        }\n        if (data.width !== undefined) {\n            this.width = data.width;\n        }\n    }\n}\n", "import { AnimatableColor, deepExtend, executeOnSingleOrMultiple, isNull, setRangeValue, } from \"@tsparticles/engine\";\nimport { EmitterLife } from \"./EmitterLife.js\";\nimport { EmitterRate } from \"./EmitterRate.js\";\nimport { EmitterShape } from \"./EmitterShape.js\";\nimport { EmitterSize } from \"./EmitterSize.js\";\nexport class Emitter {\n    constructor() {\n        this.autoPlay = true;\n        this.fill = true;\n        this.life = new EmitterLife();\n        this.rate = new EmitterRate();\n        this.shape = new EmitterShape();\n        this.startCount = 0;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.autoPlay !== undefined) {\n            this.autoPlay = data.autoPlay;\n        }\n        if (data.size !== undefined) {\n            if (!this.size) {\n                this.size = new EmitterSize();\n            }\n            this.size.load(data.size);\n        }\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        this.domId = data.domId;\n        if (data.fill !== undefined) {\n            this.fill = data.fill;\n        }\n        this.life.load(data.life);\n        this.name = data.name;\n        this.particles = executeOnSingleOrMultiple(data.particles, particles => {\n            return deepExtend({}, particles);\n        });\n        this.rate.load(data.rate);\n        this.shape.load(data.shape);\n        if (data.position !== undefined) {\n            this.position = {};\n            if (data.position.x !== undefined) {\n                this.position.x = setRangeValue(data.position.x);\n            }\n            if (data.position.y !== undefined) {\n                this.position.y = setRangeValue(data.position.y);\n            }\n        }\n        if (data.spawnColor !== undefined) {\n            if (this.spawnColor === undefined) {\n                this.spawnColor = new AnimatableColor();\n            }\n            this.spawnColor.load(data.spawnColor);\n        }\n        if (data.startCount !== undefined) {\n            this.startCount = data.startCount;\n        }\n    }\n}\n", "export var EmitterClickMode;\n(function (EmitterClickMode) {\n    EmitterClickMode[\"emitter\"] = \"emitter\";\n})(EmitterClickMode || (EmitterClickMode = {}));\n", "import { PixelMode, Vector, calcPositionOrRandomFromSizeRanged, deepExtend, getRangeValue, getSize, isPointInside, itemFromSingleOrMultiple, millisecondsToSeconds, randomInRange, rangeColorToHsl, } from \"@tsparticles/engine\";\nimport { Emitter } from \"./Options/Classes/Emitter.js\";\nimport { EmitterSize } from \"./Options/Classes/EmitterSize.js\";\nconst half = 0.5, defaultLifeDelay = 0, minLifeCount = 0, defaultSpawnDelay = 0, defaultEmitDelay = 0, defaultLifeCount = -1, defaultColorAnimationFactor = 1;\nfunction setParticlesOptionsColor(particlesOptions, color) {\n    if (particlesOptions.color) {\n        particlesOptions.color.value = color;\n    }\n    else {\n        particlesOptions.color = {\n            value: color,\n        };\n    }\n}\nexport class EmitterInstance {\n    constructor(engine, emitters, container, options, position) {\n        this.emitters = emitters;\n        this.container = container;\n        this._destroy = () => {\n            this._mutationObserver?.disconnect();\n            this._mutationObserver = undefined;\n            this._resizeObserver?.disconnect();\n            this._resizeObserver = undefined;\n            this.emitters.removeEmitter(this);\n            this._engine.dispatchEvent(\"emitterDestroyed\", {\n                container: this.container,\n                data: {\n                    emitter: this,\n                },\n            });\n        };\n        this._prepareToDie = () => {\n            if (this._paused) {\n                return;\n            }\n            const duration = this.options.life?.duration !== undefined ? getRangeValue(this.options.life.duration) : undefined, minDuration = 0, minLifeCount = 0;\n            if (this.container.retina.reduceFactor &&\n                (this._lifeCount > minLifeCount || this._immortal) &&\n                duration !== undefined &&\n                duration > minDuration) {\n                this._duration = duration * millisecondsToSeconds;\n            }\n        };\n        this._setColorAnimation = (animation, initValue, maxValue, factor = defaultColorAnimationFactor) => {\n            const container = this.container;\n            if (!animation.enable) {\n                return initValue;\n            }\n            const colorOffset = randomInRange(animation.offset), delay = getRangeValue(this.options.rate.delay), emitFactor = (delay * millisecondsToSeconds) / container.retina.reduceFactor, defaultColorSpeed = 0, colorSpeed = getRangeValue(animation.speed ?? defaultColorSpeed);\n            return (initValue + (colorSpeed * container.fpsLimit) / emitFactor + colorOffset * factor) % maxValue;\n        };\n        this._engine = engine;\n        this._currentDuration = 0;\n        this._currentEmitDelay = 0;\n        this._currentSpawnDelay = 0;\n        this._initialPosition = position;\n        if (options instanceof Emitter) {\n            this.options = options;\n        }\n        else {\n            this.options = new Emitter();\n            this.options.load(options);\n        }\n        this._spawnDelay =\n            (getRangeValue(this.options.life.delay ?? defaultLifeDelay) * millisecondsToSeconds) /\n                this.container.retina.reduceFactor;\n        this.position = this._initialPosition ?? this._calcPosition();\n        this.name = this.options.name;\n        this.fill = this.options.fill;\n        this._firstSpawn = !this.options.life.wait;\n        this._startParticlesAdded = false;\n        let particlesOptions = deepExtend({}, this.options.particles);\n        particlesOptions ??= {};\n        particlesOptions.move ??= {};\n        particlesOptions.move.direction ??= this.options.direction;\n        if (this.options.spawnColor) {\n            this.spawnColor = rangeColorToHsl(this._engine, this.options.spawnColor);\n        }\n        this._paused = !this.options.autoPlay;\n        this._particlesOptions = particlesOptions;\n        this._size = this._calcSize();\n        this.size = getSize(this._size, this.container.canvas.size);\n        this._lifeCount = this.options.life.count ?? defaultLifeCount;\n        this._immortal = this._lifeCount <= minLifeCount;\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                this._mutationObserver = new MutationObserver(() => {\n                    this.resize();\n                });\n                this._resizeObserver = new ResizeObserver(() => {\n                    this.resize();\n                });\n                this._mutationObserver.observe(element, {\n                    attributes: true,\n                    attributeFilter: [\"style\", \"width\", \"height\"],\n                });\n                this._resizeObserver.observe(element);\n            }\n        }\n        const shapeOptions = this.options.shape, shapeGenerator = this._engine.emitterShapeManager?.getShapeGenerator(shapeOptions.type);\n        if (shapeGenerator) {\n            this._shape = shapeGenerator.generate(this.position, this.size, this.fill, shapeOptions.options);\n        }\n        this._engine.dispatchEvent(\"emitterCreated\", {\n            container,\n            data: {\n                emitter: this,\n            },\n        });\n        this.play();\n    }\n    externalPause() {\n        this._paused = true;\n        this.pause();\n    }\n    externalPlay() {\n        this._paused = false;\n        this.play();\n    }\n    async init() {\n        await this._shape?.init();\n    }\n    pause() {\n        if (this._paused) {\n            return;\n        }\n        delete this._emitDelay;\n    }\n    play() {\n        if (this._paused) {\n            return;\n        }\n        if (!(this.container.retina.reduceFactor &&\n            (this._lifeCount > minLifeCount || this._immortal || !this.options.life.count) &&\n            (this._firstSpawn || this._currentSpawnDelay >= (this._spawnDelay ?? defaultSpawnDelay)))) {\n            return;\n        }\n        if (this._emitDelay === undefined) {\n            const delay = getRangeValue(this.options.rate.delay);\n            this._emitDelay = (delay * millisecondsToSeconds) / this.container.retina.reduceFactor;\n        }\n        if (this._lifeCount > minLifeCount || this._immortal) {\n            this._prepareToDie();\n        }\n    }\n    resize() {\n        const initialPosition = this._initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n        this._size = this._calcSize();\n        this.size = getSize(this._size, this.container.canvas.size);\n        this._shape?.resize(this.position, this.size);\n    }\n    update(delta) {\n        if (this._paused) {\n            return;\n        }\n        if (this._firstSpawn) {\n            this._firstSpawn = false;\n            this._currentSpawnDelay = this._spawnDelay ?? defaultSpawnDelay;\n            this._currentEmitDelay = this._emitDelay ?? defaultEmitDelay;\n        }\n        if (!this._startParticlesAdded) {\n            this._startParticlesAdded = true;\n            this._emitParticles(this.options.startCount);\n        }\n        if (this._duration !== undefined) {\n            this._currentDuration += delta.value;\n            if (this._currentDuration >= this._duration) {\n                this.pause();\n                if (this._spawnDelay !== undefined) {\n                    delete this._spawnDelay;\n                }\n                if (!this._immortal) {\n                    this._lifeCount--;\n                }\n                if (this._lifeCount > minLifeCount || this._immortal) {\n                    this.position = this._calcPosition();\n                    this._shape?.resize(this.position, this.size);\n                    this._spawnDelay =\n                        (getRangeValue(this.options.life.delay ?? defaultLifeDelay) * millisecondsToSeconds) /\n                            this.container.retina.reduceFactor;\n                }\n                else {\n                    this._destroy();\n                }\n                this._currentDuration -= this._duration;\n                delete this._duration;\n            }\n        }\n        if (this._spawnDelay !== undefined) {\n            this._currentSpawnDelay += delta.value;\n            if (this._currentSpawnDelay >= this._spawnDelay) {\n                this._engine.dispatchEvent(\"emitterPlay\", {\n                    container: this.container,\n                });\n                this.play();\n                this._currentSpawnDelay -= this._currentSpawnDelay;\n                delete this._spawnDelay;\n            }\n        }\n        if (this._emitDelay !== undefined) {\n            this._currentEmitDelay += delta.value;\n            if (this._currentEmitDelay >= this._emitDelay) {\n                this._emit();\n                this._currentEmitDelay -= this._emitDelay;\n            }\n        }\n    }\n    _calcPosition() {\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect(), pxRatio = this.container.retina.pixelRatio;\n                return {\n                    x: (elRect.x + elRect.width * half) * pxRatio,\n                    y: (elRect.y + elRect.height * half) * pxRatio,\n                };\n            }\n        }\n        return calcPositionOrRandomFromSizeRanged({\n            size: this.container.canvas.size,\n            position: this.options.position,\n        });\n    }\n    _calcSize() {\n        const container = this.container;\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect();\n                return {\n                    width: elRect.width * container.retina.pixelRatio,\n                    height: elRect.height * container.retina.pixelRatio,\n                    mode: PixelMode.precise,\n                };\n            }\n        }\n        return (this.options.size ??\n            (() => {\n                const size = new EmitterSize();\n                size.load({\n                    height: 0,\n                    mode: PixelMode.percent,\n                    width: 0,\n                });\n                return size;\n            })());\n    }\n    _emit() {\n        if (this._paused) {\n            return;\n        }\n        const quantity = getRangeValue(this.options.rate.quantity);\n        this._emitParticles(quantity);\n    }\n    _emitParticles(quantity) {\n        const singleParticlesOptions = itemFromSingleOrMultiple(this._particlesOptions);\n        for (let i = 0; i < quantity; i++) {\n            const particlesOptions = deepExtend({}, singleParticlesOptions);\n            if (this.spawnColor) {\n                const hslAnimation = this.options.spawnColor?.animation;\n                if (hslAnimation) {\n                    const maxValues = {\n                        h: 360,\n                        s: 100,\n                        l: 100,\n                    }, colorFactor = 3.6;\n                    this.spawnColor.h = this._setColorAnimation(hslAnimation.h, this.spawnColor.h, maxValues.h, colorFactor);\n                    this.spawnColor.s = this._setColorAnimation(hslAnimation.s, this.spawnColor.s, maxValues.s);\n                    this.spawnColor.l = this._setColorAnimation(hslAnimation.l, this.spawnColor.l, maxValues.l);\n                }\n                setParticlesOptionsColor(particlesOptions, this.spawnColor);\n            }\n            const shapeOptions = this.options.shape;\n            let position = this.position;\n            if (this._shape) {\n                const shapePosData = this._shape.randomPosition();\n                if (shapePosData) {\n                    position = shapePosData.position;\n                    const replaceData = shapeOptions.replace;\n                    if (replaceData.color && shapePosData.color) {\n                        setParticlesOptionsColor(particlesOptions, shapePosData.color);\n                    }\n                    if (replaceData.opacity) {\n                        if (particlesOptions.opacity) {\n                            particlesOptions.opacity.value = shapePosData.opacity;\n                        }\n                        else {\n                            particlesOptions.opacity = {\n                                value: shapePosData.opacity,\n                            };\n                        }\n                    }\n                }\n                else {\n                    position = null;\n                }\n            }\n            if (position) {\n                this.container.particles.addParticle(position, particlesOptions);\n            }\n        }\n    }\n}\n", "import { arrayRandomIndex, executeOnSingleOrMultiple, isArray, isNumber, itemFromArray, } from \"@tsparticles/engine\";\nimport { Emitter } from \"./Options/Classes/Emitter.js\";\nimport { EmitterClickMode } from \"./Enums/EmitterClickMode.js\";\nimport { EmitterInstance } from \"./EmitterInstance.js\";\nexport class Emitters {\n    constructor(engine, container) {\n        this.container = container;\n        this._engine = engine;\n        this.array = [];\n        this.emitters = [];\n        this.interactivityEmitters = {\n            random: {\n                count: 1,\n                enable: false,\n            },\n            value: [],\n        };\n        const defaultIndex = 0;\n        container.getEmitter = (idxOrName) => idxOrName === undefined || isNumber(idxOrName)\n            ? this.array[idxOrName ?? defaultIndex]\n            : this.array.find(t => t.name === idxOrName);\n        container.addEmitter = async (options, position) => this.addEmitter(options, position);\n        container.removeEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                this.removeEmitter(emitter);\n            }\n        };\n        container.playEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPlay();\n            }\n        };\n        container.pauseEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPause();\n            }\n        };\n    }\n    async addEmitter(options, position) {\n        const emitterOptions = new Emitter();\n        emitterOptions.load(options);\n        const emitter = new EmitterInstance(this._engine, this, this.container, emitterOptions, position);\n        await emitter.init();\n        this.array.push(emitter);\n        return emitter;\n    }\n    handleClickMode(mode) {\n        const emitterOptions = this.emitters, modeEmitters = this.interactivityEmitters;\n        if (mode !== EmitterClickMode.emitter) {\n            return;\n        }\n        let emittersModeOptions;\n        if (modeEmitters && isArray(modeEmitters.value)) {\n            const minLength = 0;\n            if (modeEmitters.value.length > minLength && modeEmitters.random.enable) {\n                emittersModeOptions = [];\n                const usedIndexes = [];\n                for (let i = 0; i < modeEmitters.random.count; i++) {\n                    const idx = arrayRandomIndex(modeEmitters.value);\n                    if (usedIndexes.includes(idx) && usedIndexes.length < modeEmitters.value.length) {\n                        i--;\n                        continue;\n                    }\n                    usedIndexes.push(idx);\n                    emittersModeOptions.push(itemFromArray(modeEmitters.value, idx));\n                }\n            }\n            else {\n                emittersModeOptions = modeEmitters.value;\n            }\n        }\n        else {\n            emittersModeOptions = modeEmitters?.value;\n        }\n        const emittersOptions = emittersModeOptions ?? emitterOptions, ePosition = this.container.interactivity.mouse.clickPosition;\n        void executeOnSingleOrMultiple(emittersOptions, async (emitter) => {\n            await this.addEmitter(emitter, ePosition);\n        });\n    }\n    async init() {\n        this.emitters = this.container.actualOptions.emitters;\n        this.interactivityEmitters = this.container.actualOptions.interactivity.modes.emitters;\n        if (!this.emitters) {\n            return;\n        }\n        if (isArray(this.emitters)) {\n            for (const emitterOptions of this.emitters) {\n                await this.addEmitter(emitterOptions);\n            }\n        }\n        else {\n            await this.addEmitter(this.emitters);\n        }\n    }\n    pause() {\n        for (const emitter of this.array) {\n            emitter.pause();\n        }\n    }\n    play() {\n        for (const emitter of this.array) {\n            emitter.play();\n        }\n    }\n    removeEmitter(emitter) {\n        const index = this.array.indexOf(emitter), minIndex = 0, deleteCount = 1;\n        if (index >= minIndex) {\n            this.array.splice(index, deleteCount);\n        }\n    }\n    resize() {\n        for (const emitter of this.array) {\n            emitter.resize();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n    update(delta) {\n        for (const emitter of this.array) {\n            emitter.update(delta);\n        }\n    }\n}\n", "import { executeOnSingleOrMultiple, isArray, isInArray, } from \"@tsparticles/engine\";\nimport { Emitter } from \"./Options/Classes/Emitter.js\";\nimport { EmitterClickMode } from \"./Enums/EmitterClickMode.js\";\nimport { Emitters } from \"./Emitters.js\";\nexport class EmittersPlugin {\n    constructor(engine) {\n        this._engine = engine;\n        this.id = \"emitters\";\n    }\n    getPlugin(container) {\n        return Promise.resolve(new Emitters(this._engine, container));\n    }\n    loadOptions(options, source) {\n        if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n            return;\n        }\n        if (source?.emitters) {\n            options.emitters = executeOnSingleOrMultiple(source.emitters, emitter => {\n                const tmp = new Emitter();\n                tmp.load(emitter);\n                return tmp;\n            });\n        }\n        const interactivityEmitters = source?.interactivity?.modes?.emitters;\n        if (interactivityEmitters) {\n            if (isArray(interactivityEmitters)) {\n                options.interactivity.modes.emitters = {\n                    random: {\n                        count: 1,\n                        enable: true,\n                    },\n                    value: interactivityEmitters.map(s => {\n                        const tmp = new Emitter();\n                        tmp.load(s);\n                        return tmp;\n                    }),\n                };\n            }\n            else {\n                const emitterMode = interactivityEmitters;\n                if (emitterMode.value !== undefined) {\n                    const defaultCount = 1;\n                    if (isArray(emitterMode.value)) {\n                        options.interactivity.modes.emitters = {\n                            random: {\n                                count: emitterMode.random.count ?? defaultCount,\n                                enable: emitterMode.random.enable ?? false,\n                            },\n                            value: emitterMode.value.map(s => {\n                                const tmp = new Emitter();\n                                tmp.load(s);\n                                return tmp;\n                            }),\n                        };\n                    }\n                    else {\n                        const tmp = new Emitter();\n                        tmp.load(emitterMode.value);\n                        options.interactivity.modes.emitters = {\n                            random: {\n                                count: emitterMode.random.count ?? defaultCount,\n                                enable: emitterMode.random.enable ?? false,\n                            },\n                            value: tmp,\n                        };\n                    }\n                }\n                else {\n                    const emitterOptions = (options.interactivity.modes.emitters = {\n                        random: {\n                            count: 1,\n                            enable: false,\n                        },\n                        value: new Emitter(),\n                    });\n                    emitterOptions.value.load(interactivityEmitters);\n                }\n            }\n        }\n    }\n    needsPlugin(options) {\n        if (!options) {\n            return false;\n        }\n        const emitters = options.emitters;\n        return ((isArray(emitters) && !!emitters.length) ||\n            emitters !== undefined ||\n            (!!options.interactivity?.events?.onClick?.mode &&\n                isInArray(EmitterClickMode.emitter, options.interactivity.events.onClick.mode)));\n    }\n}\n", "const shapeGeneratorss = new Map();\nexport class ShapeManager {\n    constructor(engine) {\n        this._engine = engine;\n    }\n    addShapeGenerator(name, generator) {\n        if (!this.getShapeGenerator(name)) {\n            shapeGeneratorss.set(name, generator);\n        }\n    }\n    getShapeGenerator(name) {\n        return shapeGeneratorss.get(name);\n    }\n    getSupportedShapeGenerators() {\n        return shapeGeneratorss.keys();\n    }\n}\n", "export class EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        this.position = position;\n        this.size = size;\n        this.fill = fill;\n        this.options = options;\n    }\n    resize(position, size) {\n        this.position = position;\n        this.size = size;\n    }\n}\n", "import { EmittersPlugin } from \"./EmittersPlugin.js\";\nimport { ShapeManager } from \"./ShapeManager.js\";\nexport async function loadEmittersPlugin(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    if (!engine.emitterShapeManager) {\n        engine.emitterShapeManager = new ShapeManager(engine);\n    }\n    if (!engine.addEmitterShapeGenerator) {\n        engine.addEmitterShapeGenerator = (name, generator) => {\n            engine.emitterShapeManager?.addShapeGenerator(name, generator);\n        };\n    }\n    const plugin = new EmittersPlugin(engine);\n    await engine.addPlugin(plugin, refresh);\n}\nexport * from \"./EmitterContainer.js\";\nexport * from \"./EmitterShapeBase.js\";\nexport * from \"./EmittersEngine.js\";\nexport * from \"./IEmitterShape.js\";\nexport * from \"./IEmitterShapeGenerator.js\";\nexport * from \"./Enums/EmitterClickMode.js\";\nexport * from \"./IRandomPositionData.js\";\n", "import { EmitterShapeBase } from \"@tsparticles/plugin-emitters\";\nimport { getRandom } from \"@tsparticles/engine\";\nconst quarter = 0.25, double = 2, doublePI = Math.PI * double, squareExp = 2, half = 0.5;\nexport class EmittersCircleShape extends EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        super(position, size, fill, options);\n    }\n    async init() {\n    }\n    randomPosition() {\n        const size = this.size, fill = this.fill, position = this.position, generateTheta = (x, y) => {\n            const u = getRandom() * quarter, theta = Math.atan((y / x) * Math.tan(doublePI * u)), v = getRandom();\n            if (v < quarter) {\n                return theta;\n            }\n            else if (v < double * quarter) {\n                return Math.PI - theta;\n            }\n            else if (v < double * quarter + quarter) {\n                return Math.PI + theta;\n            }\n            else {\n                return -theta;\n            }\n        }, radius = (x, y, theta) => (x * y) / Math.sqrt((y * Math.cos(theta)) ** squareExp + (x * Math.sin(theta)) ** squareExp), [a, b] = [size.width * half, size.height * half], randomTheta = generateTheta(a, b), maxRadius = radius(a, b, randomTheta), randomRadius = fill ? maxRadius * Math.sqrt(getRandom()) : maxRadius;\n        return {\n            position: {\n                x: position.x + randomRadius * Math.cos(randomTheta),\n                y: position.y + randomRadius * Math.sin(randomTheta),\n            },\n        };\n    }\n}\n", "import { EmittersCircleShape } from \"./EmittersCircleShape.js\";\nexport class EmittersCircleShapeGenerator {\n    generate(position, size, fill, options) {\n        return new EmittersCircleShape(position, size, fill, options);\n    }\n}\n", "import { EmittersCircleShapeGenerator } from \"./EmittersCircleShapeGenerator.js\";\nexport async function loadEmittersShapeCircle(engine, refresh = true) {\n    const emittersEngine = engine;\n    emittersEngine.checkVersion(\"3.8.1\");\n    emittersEngine.addEmitterShapeGenerator?.(\"circle\", new EmittersCircleShapeGenerator());\n    await emittersEngine.refresh(refresh);\n}\n", "import { EmitterShapeBase } from \"@tsparticles/plugin-emitters\";\nimport { double, getRandom, half } from \"@tsparticles/engine\";\nconst sides = 4;\nvar Sides;\n(function (Sides) {\n    Sides[Sides[\"TopLeft\"] = 0] = \"TopLeft\";\n    Sides[Sides[\"TopRight\"] = 1] = \"TopRight\";\n    Sides[Sides[\"BottomRight\"] = 2] = \"BottomRight\";\n    Sides[Sides[\"BottomLeft\"] = 3] = \"BottomLeft\";\n})(Sides || (Sides = {}));\nfunction randomSquareCoordinate(position, offset) {\n    return position + offset * (getRandom() - half);\n}\nexport class EmittersSquareShape extends EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        super(position, size, fill, options);\n    }\n    async init() {\n    }\n    randomPosition() {\n        const fill = this.fill, position = this.position, size = this.size;\n        if (fill) {\n            return {\n                position: {\n                    x: randomSquareCoordinate(position.x, size.width),\n                    y: randomSquareCoordinate(position.y, size.height),\n                },\n            };\n        }\n        else {\n            const halfW = size.width * half, halfH = size.height * half, side = Math.floor(getRandom() * sides), v = (getRandom() - half) * double;\n            switch (side) {\n                case Sides.TopLeft:\n                    return {\n                        position: {\n                            x: position.x + v * halfW,\n                            y: position.y - halfH,\n                        },\n                    };\n                case Sides.TopRight:\n                    return {\n                        position: {\n                            x: position.x - halfW,\n                            y: position.y + v * halfH,\n                        },\n                    };\n                case Sides.BottomRight:\n                    return {\n                        position: {\n                            x: position.x + v * halfW,\n                            y: position.y + halfH,\n                        },\n                    };\n                case Sides.BottomLeft:\n                default:\n                    return {\n                        position: {\n                            x: position.x + halfW,\n                            y: position.y + v * halfH,\n                        },\n                    };\n            }\n        }\n    }\n}\n", "import { EmittersSquareShape } from \"./EmittersSquareShape.js\";\nexport class EmittersSquareShapeGenerator {\n    generate(position, size, fill, options) {\n        return new EmittersSquareShape(position, size, fill, options);\n    }\n}\n", "import { EmittersSquareShapeGenerator } from \"./EmittersSquareShapeGenerator.js\";\nexport async function loadEmittersShapeSquare(engine, refresh = true) {\n    const emittersEngine = engine;\n    emittersEngine.checkVersion(\"3.8.1\");\n    emittersEngine.addEmitterShapeGenerator?.(\"square\", new EmittersSquareShapeGenerator());\n    await emittersEngine.refresh(refresh);\n}\n", "import { deepExtend, isNull, } from \"@tsparticles/engine\";\nexport class Trail {\n    constructor() {\n        this.delay = 1;\n        this.pauseOnStop = false;\n        this.quantity = 1;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.delay !== undefined) {\n            this.delay = data.delay;\n        }\n        if (data.quantity !== undefined) {\n            this.quantity = data.quantity;\n        }\n        if (data.particles !== undefined) {\n            this.particles = deepExtend({}, data.particles);\n        }\n        if (data.pauseOnStop !== undefined) {\n            this.pauseOnStop = data.pauseOnStop;\n        }\n    }\n}\n", "import { ExternalInteractorBase, isInArray, millisecondsToSeconds, } from \"@tsparticles/engine\";\nimport { Trail } from \"./Options/Classes/Trail.js\";\nconst trailMode = \"trail\";\nexport class TrailMaker extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this._delay = 0;\n    }\n    clear() {\n    }\n    init() {\n    }\n    interact(delta) {\n        const container = this.container, { interactivity } = container;\n        if (!container.retina.reduceFactor) {\n            return;\n        }\n        const options = container.actualOptions, trailOptions = options.interactivity.modes.trail;\n        if (!trailOptions) {\n            return;\n        }\n        const optDelay = (trailOptions.delay * millisecondsToSeconds) / this.container.retina.reduceFactor;\n        if (this._delay < optDelay) {\n            this._delay += delta.value;\n        }\n        if (this._delay < optDelay) {\n            return;\n        }\n        const canEmit = !(trailOptions.pauseOnStop &&\n            (interactivity.mouse.position === this._lastPosition ||\n                (interactivity.mouse.position?.x === this._lastPosition?.x &&\n                    interactivity.mouse.position?.y === this._lastPosition?.y)));\n        const mousePos = container.interactivity.mouse.position;\n        if (mousePos) {\n            this._lastPosition = { ...mousePos };\n        }\n        else {\n            delete this._lastPosition;\n        }\n        if (canEmit) {\n            container.particles.push(trailOptions.quantity, container.interactivity.mouse, trailOptions.particles);\n        }\n        this._delay -= optDelay;\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events;\n        return ((mouse.clicking && mouse.inside && !!mouse.position && isInArray(trailMode, events.onClick.mode)) ||\n            (mouse.inside && !!mouse.position && isInArray(trailMode, events.onHover.mode)));\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.trail) {\n            options.trail = new Trail();\n        }\n        for (const source of sources) {\n            options.trail.load(source?.trail);\n        }\n    }\n    reset() {\n    }\n}\n", "import { TrailMaker } from \"./TrailMaker.js\";\nexport async function loadExternalTrailInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalTrail\", container => {\n        return Promise.resolve(new TrailMaker(container));\n    }, refresh);\n}\nexport * from \"./Options/Classes/Trail.js\";\nexport * from \"./Options/Interfaces/ITrail.js\";\n", "export var RollMode;\n(function (RollMode) {\n    RollMode[\"both\"] = \"both\";\n    RollMode[\"horizontal\"] = \"horizontal\";\n    RollMode[\"vertical\"] = \"vertical\";\n})(RollMode || (RollMode = {}));\n", "import { AlterType, getRandom, getRangeValue, half, rangeColorToHsl, } from \"@tsparticles/engine\";\nimport { RollMode } from \"./RollMode.js\";\nconst double = 2, doublePI = Math.PI * double, maxAngle = 360;\nexport function initParticle(engine, particle) {\n    const rollOpt = particle.options.roll;\n    if (!rollOpt?.enable) {\n        particle.roll = {\n            enable: false,\n            horizontal: false,\n            vertical: false,\n            angle: 0,\n            speed: 0,\n        };\n        return;\n    }\n    particle.roll = {\n        enable: rollOpt.enable,\n        horizontal: rollOpt.mode === RollMode.horizontal || rollOpt.mode === RollMode.both,\n        vertical: rollOpt.mode === RollMode.vertical || rollOpt.mode === RollMode.both,\n        angle: getRandom() * doublePI,\n        speed: getRangeValue(rollOpt.speed) / maxAngle,\n    };\n    if (rollOpt.backColor) {\n        particle.backColor = rangeColorToHsl(engine, rollOpt.backColor);\n    }\n    else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n        const alterType = getRandom() >= half ? AlterType.darken : AlterType.enlighten;\n        particle.roll.alter = {\n            type: alterType,\n            value: getRangeValue(alterType === AlterType.darken ? rollOpt.darken.value : rollOpt.enlighten.value),\n        };\n    }\n    else if (rollOpt.darken.enable) {\n        particle.roll.alter = {\n            type: AlterType.darken,\n            value: getRangeValue(rollOpt.darken.value),\n        };\n    }\n    else if (rollOpt.enlighten.enable) {\n        particle.roll.alter = {\n            type: AlterType.enlighten,\n            value: getRangeValue(rollOpt.enlighten.value),\n        };\n    }\n}\nexport function updateRoll(particle, delta) {\n    const roll = particle.options.roll, data = particle.roll;\n    if (!data || !roll?.enable) {\n        return;\n    }\n    const speed = data.speed * delta.factor, max = doublePI;\n    data.angle += speed;\n    if (data.angle > max) {\n        data.angle -= max;\n    }\n}\n", "import { isNull, setRangeValue } from \"@tsparticles/engine\";\nexport class RollLight {\n    constructor() {\n        this.enable = false;\n        this.value = 0;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.value !== undefined) {\n            this.value = setRangeValue(data.value);\n        }\n    }\n}\n", "import { OptionsColor, isNull, setRangeValue, } from \"@tsparticles/engine\";\nimport { RollLight } from \"./RollLight.js\";\nimport { RollMode } from \"../../RollMode.js\";\nexport class Roll {\n    constructor() {\n        this.darken = new RollLight();\n        this.enable = false;\n        this.enlighten = new RollLight();\n        this.mode = RollMode.vertical;\n        this.speed = 25;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.backColor !== undefined) {\n            this.backColor = OptionsColor.create(this.backColor, data.backColor);\n        }\n        this.darken.load(data.darken);\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        this.enlighten.load(data.enlighten);\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n    }\n}\n", "import { initParticle, updateRoll } from \"./Utils.js\";\nimport { Roll } from \"./Options/Classes/Roll.js\";\nexport class RollUpdater {\n    constructor(engine) {\n        this._engine = engine;\n    }\n    getTransformValues(particle) {\n        const roll = particle.roll?.enable && particle.roll, rollHorizontal = roll && roll.horizontal, rollVertical = roll && roll.vertical;\n        return {\n            a: rollHorizontal ? Math.cos(roll.angle) : undefined,\n            d: rollVertical ? Math.sin(roll.angle) : undefined,\n        };\n    }\n    init(particle) {\n        initParticle(this._engine, particle);\n    }\n    isEnabled(particle) {\n        const roll = particle.options.roll;\n        return !particle.destroyed && !particle.spawning && !!roll?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.roll) {\n            options.roll = new Roll();\n        }\n        for (const source of sources) {\n            options.roll.load(source?.roll);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateRoll(particle, delta);\n    }\n}\n", "import { RollUpdater } from \"./RollUpdater.js\";\nexport async function loadRollUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"roll\", () => {\n        return Promise.resolve(new RollUpdater(engine));\n    }, refresh);\n}\n", "import { RotateDirection, clamp, getDistance, getDistances, getRandom, getRangeValue, } from \"@tsparticles/engine\";\nconst half = 0.5, double = 2, minVelocity = 0, identity = 1, moveSpeedFactor = 60, minSpinRadius = 0, spinFactor = 0.01, doublePI = Math.PI * double;\nexport function applyDistance(particle) {\n    const initialPosition = particle.initialPosition, { dx, dy } = getDistances(initialPosition, particle.position), dxFixed = Math.abs(dx), dyFixed = Math.abs(dy), { maxDistance } = particle.retina, hDistance = maxDistance.horizontal, vDistance = maxDistance.vertical;\n    if (!hDistance && !vDistance) {\n        return;\n    }\n    const hasHDistance = (hDistance && dxFixed >= hDistance) ?? false, hasVDistance = (vDistance && dyFixed >= vDistance) ?? false;\n    if ((hasHDistance || hasVDistance) && !particle.misplaced) {\n        particle.misplaced = (!!hDistance && dxFixed > hDistance) || (!!vDistance && dyFixed > vDistance);\n        if (hDistance) {\n            particle.velocity.x = particle.velocity.y * half - particle.velocity.x;\n        }\n        if (vDistance) {\n            particle.velocity.y = particle.velocity.x * half - particle.velocity.y;\n        }\n    }\n    else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n        particle.misplaced = false;\n    }\n    else if (particle.misplaced) {\n        const pos = particle.position, vel = particle.velocity;\n        if (hDistance &&\n            ((pos.x < initialPosition.x && vel.x < minVelocity) || (pos.x > initialPosition.x && vel.x > minVelocity))) {\n            vel.x *= -getRandom();\n        }\n        if (vDistance &&\n            ((pos.y < initialPosition.y && vel.y < minVelocity) || (pos.y > initialPosition.y && vel.y > minVelocity))) {\n            vel.y *= -getRandom();\n        }\n    }\n}\nexport function move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta) {\n    applyPath(particle, delta);\n    const gravityOptions = particle.gravity, gravityFactor = gravityOptions?.enable && gravityOptions.inverse ? -identity : identity;\n    if (moveDrift && moveSpeed) {\n        particle.velocity.x += (moveDrift * delta.factor) / (moveSpeedFactor * moveSpeed);\n    }\n    if (gravityOptions?.enable && moveSpeed) {\n        particle.velocity.y +=\n            (gravityFactor * (gravityOptions.acceleration * delta.factor)) / (moveSpeedFactor * moveSpeed);\n    }\n    const decay = particle.moveDecay;\n    particle.velocity.multTo(decay);\n    const velocity = particle.velocity.mult(moveSpeed);\n    if (gravityOptions?.enable &&\n        maxSpeed > minVelocity &&\n        ((!gravityOptions.inverse && velocity.y >= minVelocity && velocity.y >= maxSpeed) ||\n            (gravityOptions.inverse && velocity.y <= minVelocity && velocity.y <= -maxSpeed))) {\n        velocity.y = gravityFactor * maxSpeed;\n        if (moveSpeed) {\n            particle.velocity.y = velocity.y / moveSpeed;\n        }\n    }\n    const zIndexOptions = particle.options.zIndex, zVelocityFactor = (identity - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n    velocity.multTo(zVelocityFactor);\n    const { position } = particle;\n    position.addTo(velocity);\n    if (moveOptions.vibrate) {\n        position.x += Math.sin(position.x * Math.cos(position.y));\n        position.y += Math.cos(position.y * Math.sin(position.x));\n    }\n}\nexport function spin(particle, moveSpeed) {\n    const container = particle.container;\n    if (!particle.spin) {\n        return;\n    }\n    const spinClockwise = particle.spin.direction === RotateDirection.clockwise, updateFunc = {\n        x: spinClockwise ? Math.cos : Math.sin,\n        y: spinClockwise ? Math.sin : Math.cos,\n    };\n    particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n    particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n    particle.spin.radius += particle.spin.acceleration;\n    const maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height), halfMaxSize = maxCanvasSize * half;\n    if (particle.spin.radius > halfMaxSize) {\n        particle.spin.radius = halfMaxSize;\n        particle.spin.acceleration *= -identity;\n    }\n    else if (particle.spin.radius < minSpinRadius) {\n        particle.spin.radius = minSpinRadius;\n        particle.spin.acceleration *= -identity;\n    }\n    particle.spin.angle += moveSpeed * spinFactor * (identity - particle.spin.radius / maxCanvasSize);\n}\nexport function applyPath(particle, delta) {\n    const particlesOptions = particle.options, pathOptions = particlesOptions.move.path, pathEnabled = pathOptions.enable;\n    if (!pathEnabled) {\n        return;\n    }\n    if (particle.lastPathTime <= particle.pathDelay) {\n        particle.lastPathTime += delta.value;\n        return;\n    }\n    const path = particle.pathGenerator?.generate(particle, delta);\n    if (path) {\n        particle.velocity.addTo(path);\n    }\n    if (pathOptions.clamp) {\n        particle.velocity.x = clamp(particle.velocity.x, -identity, identity);\n        particle.velocity.y = clamp(particle.velocity.y, -identity, identity);\n    }\n    particle.lastPathTime -= particle.pathDelay;\n}\nexport function getProximitySpeedFactor(particle) {\n    return particle.slow.inRange ? particle.slow.factor : identity;\n}\nexport function initSpin(particle) {\n    const container = particle.container, options = particle.options, spinOptions = options.move.spin;\n    if (!spinOptions.enable) {\n        return;\n    }\n    const spinPos = spinOptions.position ?? { x: 50, y: 50 }, spinFactor = 0.01, spinCenter = {\n        x: spinPos.x * spinFactor * container.canvas.size.width,\n        y: spinPos.y * spinFactor * container.canvas.size.height,\n    }, pos = particle.getPosition(), distance = getDistance(pos, spinCenter), spinAcceleration = getRangeValue(spinOptions.acceleration);\n    particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n    particle.spin = {\n        center: spinCenter,\n        direction: particle.velocity.x >= minVelocity ? RotateDirection.clockwise : RotateDirection.counterClockwise,\n        angle: getRandom() * doublePI,\n        radius: distance,\n        acceleration: particle.retina.spinAcceleration,\n    };\n}\n", "import { getRangeMax, getRangeValue } from \"@tsparticles/engine\";\nimport { applyDistance, getProximitySpeedFactor, initSpin, move, spin } from \"./Utils.js\";\nconst diffFactor = 2, defaultSizeFactor = 1, defaultDeltaFactor = 1;\nexport class BaseMover {\n    init(particle) {\n        const options = particle.options, gravityOptions = options.move.gravity;\n        particle.gravity = {\n            enable: gravityOptions.enable,\n            acceleration: getRangeValue(gravityOptions.acceleration),\n            inverse: gravityOptions.inverse,\n        };\n        initSpin(particle);\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && particle.options.move.enable;\n    }\n    move(particle, delta) {\n        const particleOptions = particle.options, moveOptions = particleOptions.move;\n        if (!moveOptions.enable) {\n            return;\n        }\n        const container = particle.container, pxRatio = container.retina.pixelRatio;\n        particle.retina.moveSpeed ??= getRangeValue(moveOptions.speed) * pxRatio;\n        particle.retina.moveDrift ??= getRangeValue(particle.options.move.drift) * pxRatio;\n        const slowFactor = getProximitySpeedFactor(particle), baseSpeed = particle.retina.moveSpeed * container.retina.reduceFactor, moveDrift = particle.retina.moveDrift, maxSize = getRangeMax(particleOptions.size.value) * pxRatio, sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : defaultSizeFactor, deltaFactor = delta.factor || defaultDeltaFactor, moveSpeed = (baseSpeed * sizeFactor * slowFactor * deltaFactor) / diffFactor, maxSpeed = particle.retina.maxSpeed ?? container.retina.maxSpeed;\n        if (moveOptions.spin.enable) {\n            spin(particle, moveSpeed);\n        }\n        else {\n            move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta);\n        }\n        applyDistance(particle);\n    }\n}\n", "import { BaseMover } from \"./BaseMover.js\";\nexport async function loadBaseMover(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addMover(\"base\", () => {\n        return Promise.resolve(new BaseMover());\n    }, refresh);\n}\n", "const double = 2, doublePI = Math.PI * double, minAngle = 0, origin = { x: 0, y: 0 };\nexport function drawCircle(data) {\n    const { context, particle, radius } = data;\n    if (!particle.circleRange) {\n        particle.circleRange = { min: minAngle, max: doublePI };\n    }\n    const circleRange = particle.circleRange;\n    context.arc(origin.x, origin.y, radius, circleRange.min, circleRange.max, false);\n}\n", "import { degToRad, isObject } from \"@tsparticles/engine\";\nimport { drawCircle } from \"./Utils.js\";\nconst sides = 12, maxAngle = 360, minAngle = 0;\nexport class CircleDrawer {\n    constructor() {\n        this.validTypes = [\"circle\"];\n    }\n    draw(data) {\n        drawCircle(data);\n    }\n    getSidesCount() {\n        return sides;\n    }\n    particleInit(container, particle) {\n        const shapeData = particle.shapeData, angle = shapeData?.angle ?? {\n            max: maxAngle,\n            min: minAngle,\n        };\n        particle.circleRange = !isObject(angle)\n            ? {\n                min: minAngle,\n                max: degToRad(angle),\n            }\n            : { min: degToRad(angle.min), max: degToRad(angle.max) };\n    }\n}\n", "import { CircleDrawer } from \"./CircleDrawer.js\";\nexport async function loadCircleShape(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addShape(new CircleDrawer(), refresh);\n}\n", "import { getHslAnimationFromHsl, rangeColorToHsl, updateColor, } from \"@tsparticles/engine\";\nexport class ColorUpdater {\n    constructor(container, engine) {\n        this._container = container;\n        this._engine = engine;\n    }\n    init(particle) {\n        const hslColor = rangeColorToHsl(this._engine, particle.options.color, particle.id, particle.options.reduceDuplicates);\n        if (hslColor) {\n            particle.color = getHslAnimationFromHsl(hslColor, particle.options.color.animation, this._container.retina.reduceFactor);\n        }\n    }\n    isEnabled(particle) {\n        const { h: hAnimation, s: sAnimation, l: lAnimation } = particle.options.color.animation, { color } = particle;\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            ((color?.h.value !== undefined && hAnimation.enable) ||\n                (color?.s.value !== undefined && sAnimation.enable) ||\n                (color?.l.value !== undefined && lAnimation.enable)));\n    }\n    update(particle, delta) {\n        updateColor(particle.color, delta);\n    }\n}\n", "import { ColorUpdater } from \"./ColorUpdater.js\";\nexport async function loadColorUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"color\", container => {\n        return Promise.resolve(new ColorUpdater(container, engine));\n    }, refresh);\n}\n", "var RgbIndexes;\n(function (RgbIndexes) {\n    RgbIndexes[RgbIndexes[\"r\"] = 1] = \"r\";\n    RgbIndexes[RgbIndexes[\"g\"] = 2] = \"g\";\n    RgbIndexes[RgbIndexes[\"b\"] = 3] = \"b\";\n    RgbIndexes[RgbIndexes[\"a\"] = 4] = \"a\";\n})(RgbIndexes || (RgbIndexes = {}));\nconst shorthandHexRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])?$/i, hexRegex = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})?$/i, hexRadix = 16, defaultAlpha = 1, alphaFactor = 0xff;\nexport class HexColorManager {\n    constructor() {\n        this.key = \"hex\";\n        this.stringPrefix = \"#\";\n    }\n    handleColor(color) {\n        return this._parseString(color.value);\n    }\n    handleRangeColor(color) {\n        return this._parseString(color.value);\n    }\n    parseString(input) {\n        return this._parseString(input);\n    }\n    _parseString(hexColor) {\n        if (typeof hexColor !== \"string\") {\n            return;\n        }\n        if (!hexColor?.startsWith(this.stringPrefix)) {\n            return;\n        }\n        const hexFixed = hexColor.replace(shorthandHexRegex, (_, r, g, b, a) => {\n            return r + r + g + g + b + b + (a !== undefined ? a + a : \"\");\n        }), result = hexRegex.exec(hexFixed);\n        return result\n            ? {\n                a: result[RgbIndexes.a] !== undefined\n                    ? parseInt(result[RgbIndexes.a], hexRadix) / alphaFactor\n                    : defaultAlpha,\n                b: parseInt(result[RgbIndexes.b], hexRadix),\n                g: parseInt(result[RgbIndexes.g], hexRadix),\n                r: parseInt(result[RgbIndexes.r], hexRadix),\n            }\n            : undefined;\n    }\n}\n", "import { HexColorManager } from \"./HexColorManager.js\";\nexport async function loadHexColorPlugin(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addColorManager(new HexColorManager(), refresh);\n}\n", "import { getRangeValue, hslToRgb, hslaToRgba, parseAlpha, } from \"@tsparticles/engine\";\nvar HslIndexes;\n(function (HslIndexes) {\n    HslIndexes[HslIndexes[\"h\"] = 1] = \"h\";\n    HslIndexes[HslIndexes[\"s\"] = 2] = \"s\";\n    HslIndexes[HslIndexes[\"l\"] = 3] = \"l\";\n    HslIndexes[HslIndexes[\"a\"] = 5] = \"a\";\n})(HslIndexes || (HslIndexes = {}));\nexport class HslColorManager {\n    constructor() {\n        this.key = \"hsl\";\n        this.stringPrefix = \"hsl\";\n    }\n    handleColor(color) {\n        const colorValue = color.value, hslColor = colorValue.hsl ?? color.value;\n        if (hslColor.h !== undefined && hslColor.s !== undefined && hslColor.l !== undefined) {\n            return hslToRgb(hslColor);\n        }\n    }\n    handleRangeColor(color) {\n        const colorValue = color.value, hslColor = colorValue.hsl ?? color.value;\n        if (hslColor.h !== undefined && hslColor.l !== undefined) {\n            return hslToRgb({\n                h: getRangeValue(hslColor.h),\n                l: getRangeValue(hslColor.l),\n                s: getRangeValue(hslColor.s),\n            });\n        }\n    }\n    parseString(input) {\n        if (!input.startsWith(\"hsl\")) {\n            return;\n        }\n        const regex = /hsla?\\(\\s*(\\d+)\\s*[\\s,]\\s*(\\d+)%\\s*[\\s,]\\s*(\\d+)%\\s*([\\s,]\\s*(0|1|0?\\.\\d+|(\\d{1,3})%)\\s*)?\\)/i, result = regex.exec(input), minLength = 4, defaultAlpha = 1, radix = 10;\n        return result\n            ? hslaToRgba({\n                a: result.length > minLength ? parseAlpha(result[HslIndexes.a]) : defaultAlpha,\n                h: parseInt(result[HslIndexes.h], radix),\n                l: parseInt(result[HslIndexes.l], radix),\n                s: parseInt(result[HslIndexes.s], radix),\n            })\n            : undefined;\n    }\n}\n", "import { HslColorManager } from \"./HslColorManager.js\";\nexport async function loadHslColorPlugin(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addColorManager(new HslColorManager(), refresh);\n}\n", "import { getRandom, getRangeValue, initParticleNumericAnimationValue, percentDenominator, updateAnimation, } from \"@tsparticles/engine\";\nexport class OpacityUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const opacityOptions = particle.options.opacity, pxRatio = 1;\n        particle.opacity = initParticleNumericAnimationValue(opacityOptions, pxRatio);\n        const opacityAnimation = opacityOptions.animation;\n        if (opacityAnimation.enable) {\n            particle.opacity.velocity =\n                (getRangeValue(opacityAnimation.speed) / percentDenominator) * this.container.retina.reduceFactor;\n            if (!opacityAnimation.sync) {\n                particle.opacity.velocity *= getRandom();\n            }\n        }\n    }\n    isEnabled(particle) {\n        const none = 0;\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            !!particle.opacity &&\n            particle.opacity.enable &&\n            ((particle.opacity.maxLoops ?? none) <= none ||\n                ((particle.opacity.maxLoops ?? none) > none &&\n                    (particle.opacity.loops ?? none) < (particle.opacity.maxLoops ?? none))));\n    }\n    reset(particle) {\n        if (particle.opacity) {\n            particle.opacity.time = 0;\n            particle.opacity.loops = 0;\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle) || !particle.opacity) {\n            return;\n        }\n        updateAnimation(particle, particle.opacity, true, particle.options.opacity.animation.destroy, delta);\n    }\n}\n", "import { OpacityUpdater } from \"./OpacityUpdater.js\";\nexport async function loadOpacityUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"opacity\", container => {\n        return Promise.resolve(new OpacityUpdater(container));\n    }, refresh);\n}\n", "import { OutMode, OutModeDirection, getRangeValue } from \"@tsparticles/engine\";\nconst minVelocity = 0, boundsMin = 0;\nexport function bounceHorizontal(data) {\n    if ((data.outMode !== OutMode.bounce && data.outMode !== OutMode.split) ||\n        (data.direction !== OutModeDirection.left && data.direction !== OutModeDirection.right)) {\n        return;\n    }\n    if (data.bounds.right < boundsMin && data.direction === OutModeDirection.left) {\n        data.particle.position.x = data.size + data.offset.x;\n    }\n    else if (data.bounds.left > data.canvasSize.width && data.direction === OutModeDirection.right) {\n        data.particle.position.x = data.canvasSize.width - data.size - data.offset.x;\n    }\n    const velocity = data.particle.velocity.x;\n    let bounced = false;\n    if ((data.direction === OutModeDirection.right &&\n        data.bounds.right >= data.canvasSize.width &&\n        velocity > minVelocity) ||\n        (data.direction === OutModeDirection.left && data.bounds.left <= boundsMin && velocity < minVelocity)) {\n        const newVelocity = getRangeValue(data.particle.options.bounce.horizontal.value);\n        data.particle.velocity.x *= -newVelocity;\n        bounced = true;\n    }\n    if (!bounced) {\n        return;\n    }\n    const minPos = data.offset.x + data.size;\n    if (data.bounds.right >= data.canvasSize.width && data.direction === OutModeDirection.right) {\n        data.particle.position.x = data.canvasSize.width - minPos;\n    }\n    else if (data.bounds.left <= boundsMin && data.direction === OutModeDirection.left) {\n        data.particle.position.x = minPos;\n    }\n    if (data.outMode === OutMode.split) {\n        data.particle.destroy();\n    }\n}\nexport function bounceVertical(data) {\n    if ((data.outMode !== OutMode.bounce && data.outMode !== OutMode.split) ||\n        (data.direction !== OutModeDirection.bottom && data.direction !== OutModeDirection.top)) {\n        return;\n    }\n    if (data.bounds.bottom < boundsMin && data.direction === OutModeDirection.top) {\n        data.particle.position.y = data.size + data.offset.y;\n    }\n    else if (data.bounds.top > data.canvasSize.height && data.direction === OutModeDirection.bottom) {\n        data.particle.position.y = data.canvasSize.height - data.size - data.offset.y;\n    }\n    const velocity = data.particle.velocity.y;\n    let bounced = false;\n    if ((data.direction === OutModeDirection.bottom &&\n        data.bounds.bottom >= data.canvasSize.height &&\n        velocity > minVelocity) ||\n        (data.direction === OutModeDirection.top && data.bounds.top <= boundsMin && velocity < minVelocity)) {\n        const newVelocity = getRangeValue(data.particle.options.bounce.vertical.value);\n        data.particle.velocity.y *= -newVelocity;\n        bounced = true;\n    }\n    if (!bounced) {\n        return;\n    }\n    const minPos = data.offset.y + data.size;\n    if (data.bounds.bottom >= data.canvasSize.height && data.direction === OutModeDirection.bottom) {\n        data.particle.position.y = data.canvasSize.height - minPos;\n    }\n    else if (data.bounds.top <= boundsMin && data.direction === OutModeDirection.top) {\n        data.particle.position.y = minPos;\n    }\n    if (data.outMode === OutMode.split) {\n        data.particle.destroy();\n    }\n}\n", "import { OutMode, calculateBounds, } from \"@tsparticles/engine\";\nimport { bounceHorizontal, bounceVertical } from \"./Utils.js\";\nexport class BounceOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [\n            OutMode.bounce,\n            OutMode.split,\n        ];\n    }\n    update(particle, direction, delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        const container = this.container;\n        let handled = false;\n        for (const plugin of container.plugins.values()) {\n            if (plugin.particleBounce !== undefined) {\n                handled = plugin.particleBounce(particle, delta, direction);\n            }\n            if (handled) {\n                break;\n            }\n        }\n        if (handled) {\n            return;\n        }\n        const pos = particle.getPosition(), offset = particle.offset, size = particle.getRadius(), bounds = calculateBounds(pos, size), canvasSize = container.canvas.size;\n        bounceHorizontal({ particle, outMode, direction, bounds, canvasSize, offset, size });\n        bounceVertical({ particle, outMode, direction, bounds, canvasSize, offset, size });\n    }\n}\n", "import { OutMode, ParticleOutType, Vector, getDistances, isPointInside, } from \"@tsparticles/engine\";\nconst minVelocity = 0;\nexport class DestroyOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [OutMode.destroy];\n    }\n    update(particle, direction, _delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        const container = this.container;\n        switch (particle.outType) {\n            case ParticleOutType.normal:\n            case ParticleOutType.outside:\n                if (isPointInside(particle.position, container.canvas.size, Vector.origin, particle.getRadius(), direction)) {\n                    return;\n                }\n                break;\n            case ParticleOutType.inside: {\n                const { dx, dy } = getDistances(particle.position, particle.moveCenter), { x: vx, y: vy } = particle.velocity;\n                if ((vx < minVelocity && dx > particle.moveCenter.radius) ||\n                    (vy < minVelocity && dy > particle.moveCenter.radius) ||\n                    (vx >= minVelocity && dx < -particle.moveCenter.radius) ||\n                    (vy >= minVelocity && dy < -particle.moveCenter.radius)) {\n                    return;\n                }\n                break;\n            }\n        }\n        container.particles.remove(particle, particle.group, true);\n    }\n}\n", "import { OutMode, OutModeDirection, Vector, isPointInside, } from \"@tsparticles/engine\";\nconst minVelocity = 0;\nexport class NoneOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [OutMode.none];\n    }\n    update(particle, direction, delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        if ((particle.options.move.distance.horizontal &&\n            (direction === OutModeDirection.left || direction === OutModeDirection.right)) ??\n            (particle.options.move.distance.vertical &&\n                (direction === OutModeDirection.top || direction === OutModeDirection.bottom))) {\n            return;\n        }\n        const gravityOptions = particle.options.move.gravity, container = this.container, canvasSize = container.canvas.size, pRadius = particle.getRadius();\n        if (!gravityOptions.enable) {\n            if ((particle.velocity.y > minVelocity && particle.position.y <= canvasSize.height + pRadius) ||\n                (particle.velocity.y < minVelocity && particle.position.y >= -pRadius) ||\n                (particle.velocity.x > minVelocity && particle.position.x <= canvasSize.width + pRadius) ||\n                (particle.velocity.x < minVelocity && particle.position.x >= -pRadius)) {\n                return;\n            }\n            if (!isPointInside(particle.position, container.canvas.size, Vector.origin, pRadius, direction)) {\n                container.particles.remove(particle);\n            }\n        }\n        else {\n            const position = particle.position;\n            if ((!gravityOptions.inverse &&\n                position.y > canvasSize.height + pRadius &&\n                direction === OutModeDirection.bottom) ||\n                (gravityOptions.inverse && position.y < -pRadius && direction === OutModeDirection.top)) {\n                container.particles.remove(particle);\n            }\n        }\n    }\n}\n", "import { OutMode, OutModeDirection, ParticleOutType, Vector, calculateBounds, getDistances, getRandom, isPointInside, randomInRange, } from \"@tsparticles/engine\";\nconst minVelocity = 0, minDistance = 0;\nexport class OutOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [OutMode.out];\n    }\n    update(particle, direction, delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        const container = this.container;\n        switch (particle.outType) {\n            case ParticleOutType.inside: {\n                const { x: vx, y: vy } = particle.velocity;\n                const circVec = Vector.origin;\n                circVec.length = particle.moveCenter.radius;\n                circVec.angle = particle.velocity.angle + Math.PI;\n                circVec.addTo(Vector.create(particle.moveCenter));\n                const { dx, dy } = getDistances(particle.position, circVec);\n                if ((vx <= minVelocity && dx >= minDistance) ||\n                    (vy <= minVelocity && dy >= minDistance) ||\n                    (vx >= minVelocity && dx <= minDistance) ||\n                    (vy >= minVelocity && dy <= minDistance)) {\n                    return;\n                }\n                particle.position.x = Math.floor(randomInRange({\n                    min: 0,\n                    max: container.canvas.size.width,\n                }));\n                particle.position.y = Math.floor(randomInRange({\n                    min: 0,\n                    max: container.canvas.size.height,\n                }));\n                const { dx: newDx, dy: newDy } = getDistances(particle.position, particle.moveCenter);\n                particle.direction = Math.atan2(-newDy, -newDx);\n                particle.velocity.angle = particle.direction;\n                break;\n            }\n            default: {\n                if (isPointInside(particle.position, container.canvas.size, Vector.origin, particle.getRadius(), direction)) {\n                    return;\n                }\n                switch (particle.outType) {\n                    case ParticleOutType.outside: {\n                        particle.position.x =\n                            Math.floor(randomInRange({\n                                min: -particle.moveCenter.radius,\n                                max: particle.moveCenter.radius,\n                            })) + particle.moveCenter.x;\n                        particle.position.y =\n                            Math.floor(randomInRange({\n                                min: -particle.moveCenter.radius,\n                                max: particle.moveCenter.radius,\n                            })) + particle.moveCenter.y;\n                        const { dx, dy } = getDistances(particle.position, particle.moveCenter);\n                        if (particle.moveCenter.radius) {\n                            particle.direction = Math.atan2(dy, dx);\n                            particle.velocity.angle = particle.direction;\n                        }\n                        break;\n                    }\n                    case ParticleOutType.normal: {\n                        const warp = particle.options.move.warp, canvasSize = container.canvas.size, newPos = {\n                            bottom: canvasSize.height + particle.getRadius() + particle.offset.y,\n                            left: -particle.getRadius() - particle.offset.x,\n                            right: canvasSize.width + particle.getRadius() + particle.offset.x,\n                            top: -particle.getRadius() - particle.offset.y,\n                        }, sizeValue = particle.getRadius(), nextBounds = calculateBounds(particle.position, sizeValue);\n                        if (direction === OutModeDirection.right &&\n                            nextBounds.left > canvasSize.width + particle.offset.x) {\n                            particle.position.x = newPos.left;\n                            particle.initialPosition.x = particle.position.x;\n                            if (!warp) {\n                                particle.position.y = getRandom() * canvasSize.height;\n                                particle.initialPosition.y = particle.position.y;\n                            }\n                        }\n                        else if (direction === OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n                            particle.position.x = newPos.right;\n                            particle.initialPosition.x = particle.position.x;\n                            if (!warp) {\n                                particle.position.y = getRandom() * canvasSize.height;\n                                particle.initialPosition.y = particle.position.y;\n                            }\n                        }\n                        if (direction === OutModeDirection.bottom &&\n                            nextBounds.top > canvasSize.height + particle.offset.y) {\n                            if (!warp) {\n                                particle.position.x = getRandom() * canvasSize.width;\n                                particle.initialPosition.x = particle.position.x;\n                            }\n                            particle.position.y = newPos.top;\n                            particle.initialPosition.y = particle.position.y;\n                        }\n                        else if (direction === OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n                            if (!warp) {\n                                particle.position.x = getRandom() * canvasSize.width;\n                                particle.initialPosition.x = particle.position.x;\n                            }\n                            particle.position.y = newPos.bottom;\n                            particle.initialPosition.y = particle.position.y;\n                        }\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n}\n", "import { OutMode, OutModeDirection, } from \"@tsparticles/engine\";\nimport { BounceOutMode } from \"./BounceOutMode.js\";\nimport { DestroyOutMode } from \"./DestroyOutMode.js\";\nimport { NoneOutMode } from \"./NoneOutMode.js\";\nimport { OutOutMode } from \"./OutOutMode.js\";\nconst checkOutMode = (outModes, outMode) => {\n    return (outModes.default === outMode ||\n        outModes.bottom === outMode ||\n        outModes.left === outMode ||\n        outModes.right === outMode ||\n        outModes.top === outMode);\n};\nexport class OutOfCanvasUpdater {\n    constructor(container) {\n        this._addUpdaterIfMissing = (particle, outMode, getUpdater) => {\n            const outModes = particle.options.move.outModes;\n            if (!this.updaters.has(outMode) && checkOutMode(outModes, outMode)) {\n                this.updaters.set(outMode, getUpdater(this.container));\n            }\n        };\n        this._updateOutMode = (particle, delta, outMode, direction) => {\n            for (const updater of this.updaters.values()) {\n                updater.update(particle, direction, delta, outMode);\n            }\n        };\n        this.container = container;\n        this.updaters = new Map();\n    }\n    init(particle) {\n        this._addUpdaterIfMissing(particle, OutMode.bounce, container => new BounceOutMode(container));\n        this._addUpdaterIfMissing(particle, OutMode.out, container => new OutOutMode(container));\n        this._addUpdaterIfMissing(particle, OutMode.destroy, container => new DestroyOutMode(container));\n        this._addUpdaterIfMissing(particle, OutMode.none, container => new NoneOutMode(container));\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && !particle.spawning;\n    }\n    update(particle, delta) {\n        const outModes = particle.options.move.outModes;\n        this._updateOutMode(particle, delta, outModes.bottom ?? outModes.default, OutModeDirection.bottom);\n        this._updateOutMode(particle, delta, outModes.left ?? outModes.default, OutModeDirection.left);\n        this._updateOutMode(particle, delta, outModes.right ?? outModes.default, OutModeDirection.right);\n        this._updateOutMode(particle, delta, outModes.top ?? outModes.default, OutModeDirection.top);\n    }\n}\n", "import { OutOfCanvasUpdater } from \"./OutOfCanvasUpdater.js\";\nexport async function loadOutModesUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"outModes\", container => {\n        return Promise.resolve(new OutOfCanvasUpdater(container));\n    }, refresh);\n}\n", "import { getRangeValue, parseAlpha, } from \"@tsparticles/engine\";\nvar RgbIndexes;\n(function (RgbIndexes) {\n    RgbIndexes[RgbIndexes[\"r\"] = 1] = \"r\";\n    RgbIndexes[RgbIndexes[\"g\"] = 2] = \"g\";\n    RgbIndexes[RgbIndexes[\"b\"] = 3] = \"b\";\n    RgbIndexes[RgbIndexes[\"a\"] = 5] = \"a\";\n})(RgbIndexes || (RgbIndexes = {}));\nexport class RgbColorManager {\n    constructor() {\n        this.key = \"rgb\";\n        this.stringPrefix = \"rgb\";\n    }\n    handleColor(color) {\n        const colorValue = color.value, rgbColor = colorValue.rgb ?? color.value;\n        if (rgbColor.r !== undefined) {\n            return rgbColor;\n        }\n    }\n    handleRangeColor(color) {\n        const colorValue = color.value, rgbColor = colorValue.rgb ?? color.value;\n        if (rgbColor.r !== undefined) {\n            return {\n                r: getRangeValue(rgbColor.r),\n                g: getRangeValue(rgbColor.g),\n                b: getRangeValue(rgbColor.b),\n            };\n        }\n    }\n    parseString(input) {\n        if (!input.startsWith(this.stringPrefix)) {\n            return;\n        }\n        const regex = /rgba?\\(\\s*(\\d{1,3})\\s*[\\s,]\\s*(\\d{1,3})\\s*[\\s,]\\s*(\\d{1,3})\\s*([\\s,]\\s*(0|1|0?\\.\\d+|(\\d{1,3})%)\\s*)?\\)/i, result = regex.exec(input), radix = 10, minLength = 4, defaultAlpha = 1;\n        return result\n            ? {\n                a: result.length > minLength ? parseAlpha(result[RgbIndexes.a]) : defaultAlpha,\n                b: parseInt(result[RgbIndexes.b], radix),\n                g: parseInt(result[RgbIndexes.g], radix),\n                r: parseInt(result[RgbIndexes.r], radix),\n            }\n            : undefined;\n    }\n}\n", "import { RgbColorManager } from \"./RgbColorManager.js\";\nexport async function loadRgbColorPlugin(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addColorManager(new RgbColorManager(), refresh);\n}\n", "import { getRandom, percentDenominator, updateAnimation, } from \"@tsparticles/engine\";\nconst minLoops = 0;\nexport class SizeUpdater {\n    init(particle) {\n        const container = particle.container, sizeOptions = particle.options.size, sizeAnimation = sizeOptions.animation;\n        if (sizeAnimation.enable) {\n            particle.size.velocity =\n                ((particle.retina.sizeAnimationSpeed ?? container.retina.sizeAnimationSpeed) / percentDenominator) *\n                    container.retina.reduceFactor;\n            if (!sizeAnimation.sync) {\n                particle.size.velocity *= getRandom();\n            }\n        }\n    }\n    isEnabled(particle) {\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            particle.size.enable &&\n            ((particle.size.maxLoops ?? minLoops) <= minLoops ||\n                ((particle.size.maxLoops ?? minLoops) > minLoops &&\n                    (particle.size.loops ?? minLoops) < (particle.size.maxLoops ?? minLoops))));\n    }\n    reset(particle) {\n        particle.size.loops = minLoops;\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateAnimation(particle, particle.size, true, particle.options.size.animation.destroy, delta);\n    }\n}\n", "import { SizeUpdater } from \"./SizeUpdater.js\";\nexport async function loadSizeUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"size\", () => {\n        return Promise.resolve(new SizeUpdater());\n    }, refresh);\n}\n", "import { loadBaseMover } from \"@tsparticles/move-base\";\nimport { loadCircleShape } from \"@tsparticles/shape-circle\";\nimport { loadColorUpdater } from \"@tsparticles/updater-color\";\nimport { loadHexColorPlugin } from \"@tsparticles/plugin-hex-color\";\nimport { loadHslColorPlugin } from \"@tsparticles/plugin-hsl-color\";\nimport { loadOpacityUpdater } from \"@tsparticles/updater-opacity\";\nimport { loadOutModesUpdater } from \"@tsparticles/updater-out-modes\";\nimport { loadRgbColorPlugin } from \"@tsparticles/plugin-rgb-color\";\nimport { loadSizeUpdater } from \"@tsparticles/updater-size\";\nexport async function loadBasic(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await loadHexColorPlugin(engine, false);\n    await loadHslColorPlugin(engine, false);\n    await loadRgbColorPlugin(engine, false);\n    await loadBaseMover(engine, false);\n    await loadCircleShape(engine, false);\n    await loadColorUpdater(engine, false);\n    await loadOpacityUpdater(engine, false);\n    await loadOutModesUpdater(engine, false);\n    await loadSizeUpdater(engine, false);\n    await engine.refresh(refresh);\n}\n", "import { EasingType } from \"@tsparticles/engine\";\nexport async function loadEasingQuadPlugin(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addEasing(EasingType.easeInQuad, value => value ** 2, false);\n    await engine.addEasing(EasingType.easeOutQuad, value => 1 - (1 - value) ** 2, false);\n    await engine.addEasing(EasingType.easeInOutQuad, value => (value < 0.5 ? 2 * value ** 2 : 1 - (-2 * value + 2) ** 2 / 2), false);\n    await engine.refresh(refresh);\n}\n", "export function drawEmoji(data, image) {\n    const { context, opacity } = data, half = 0.5, previousAlpha = context.globalAlpha;\n    if (!image) {\n        return;\n    }\n    const diameter = image.width, radius = diameter * half;\n    context.globalAlpha = opacity;\n    context.drawImage(image, -radius, -radius, diameter, diameter);\n    context.globalAlpha = previousAlpha;\n}\n", "import { executeOnSingleOrMultiple, getRangeMax, isInArray, itemFromSingleOrMultiple, loadFont, } from \"@tsparticles/engine\";\nimport { drawEmoji } from \"./Utils.js\";\nconst defaultFont = '\"Twemoji Mozilla\", Apple Color Emoji, \"Segoe UI Emoji\", \"Noto Color Emoji\", \"EmojiOne Color\"', noPadding = 0;\nexport class EmojiDrawer {\n    constructor() {\n        this.validTypes = [\"emoji\"];\n        this._emojiShapeDict = new Map();\n    }\n    destroy() {\n        for (const [key, data] of this._emojiShapeDict) {\n            if (data instanceof ImageBitmap) {\n                data?.close();\n            }\n            this._emojiShapeDict.delete(key);\n        }\n    }\n    draw(data) {\n        const key = data.particle.emojiDataKey;\n        if (!key) {\n            return;\n        }\n        const image = this._emojiShapeDict.get(key);\n        if (!image) {\n            return;\n        }\n        drawEmoji(data, image);\n    }\n    async init(container) {\n        const options = container.actualOptions, { validTypes } = this;\n        if (!validTypes.find(t => isInArray(t, options.particles.shape.type))) {\n            return;\n        }\n        const promises = [loadFont(defaultFont)], shapeOptions = validTypes\n            .map(t => options.particles.shape.options[t])\n            .find(t => !!t);\n        if (shapeOptions) {\n            executeOnSingleOrMultiple(shapeOptions, shape => {\n                if (shape.font) {\n                    promises.push(loadFont(shape.font));\n                }\n            });\n        }\n        await Promise.all(promises);\n    }\n    particleDestroy(particle) {\n        particle.emojiDataKey = undefined;\n    }\n    particleInit(_container, particle) {\n        const double = 2, shapeData = particle.shapeData;\n        if (!shapeData?.value) {\n            return;\n        }\n        const emoji = itemFromSingleOrMultiple(shapeData.value, particle.randomIndexData);\n        if (!emoji) {\n            return;\n        }\n        const emojiOptions = typeof emoji === \"string\"\n            ? {\n                font: shapeData.font ?? defaultFont,\n                padding: shapeData.padding ?? noPadding,\n                value: emoji,\n            }\n            : {\n                font: defaultFont,\n                padding: noPadding,\n                ...shapeData,\n                ...emoji,\n            }, font = emojiOptions.font, value = emojiOptions.value;\n        const key = `${value}_${font}`;\n        if (this._emojiShapeDict.has(key)) {\n            particle.emojiDataKey = key;\n            return;\n        }\n        const padding = emojiOptions.padding * double, maxSize = getRangeMax(particle.size.value), fullSize = maxSize + padding, canvasSize = fullSize * double;\n        let image;\n        if (typeof OffscreenCanvas !== \"undefined\") {\n            const canvas = new OffscreenCanvas(canvasSize, canvasSize), context = canvas.getContext(\"2d\");\n            if (!context) {\n                return;\n            }\n            context.font = `400 ${maxSize * double}px ${font}`;\n            context.textBaseline = \"middle\";\n            context.textAlign = \"center\";\n            context.fillText(value, fullSize, fullSize);\n            image = canvas.transferToImageBitmap();\n        }\n        else {\n            const canvas = document.createElement(\"canvas\");\n            canvas.width = canvasSize;\n            canvas.height = canvasSize;\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                return;\n            }\n            context.font = `400 ${maxSize * double}px ${font}`;\n            context.textBaseline = \"middle\";\n            context.textAlign = \"center\";\n            context.fillText(value, fullSize, fullSize);\n            image = canvas;\n        }\n        this._emojiShapeDict.set(key, image);\n        particle.emojiDataKey = key;\n    }\n}\n", "import { EmojiDrawer } from \"./EmojiDrawer.js\";\nexport async function loadEmojiShape(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addShape(new EmojiDrawer(), refresh);\n}\n", "import { Circle, Vector, clamp, getDistances, } from \"@tsparticles/engine\";\nconst minFactor = 1, identity = 1, minRadius = 0;\nfunction processAttract(engine, container, position, attractRadius, area, queryCb) {\n    const attractOptions = container.actualOptions.interactivity.modes.attract;\n    if (!attractOptions) {\n        return;\n    }\n    const query = container.particles.quadTree.query(area, queryCb);\n    for (const particle of query) {\n        const { dx, dy, distance } = getDistances(particle.position, position), velocity = attractOptions.speed * attractOptions.factor, attractFactor = clamp(engine.getEasing(attractOptions.easing)(identity - distance / attractRadius) * velocity, minFactor, attractOptions.maxSpeed), normVec = Vector.create(!distance ? velocity : (dx / distance) * attractFactor, !distance ? velocity : (dy / distance) * attractFactor);\n        particle.position.subFrom(normVec);\n    }\n}\nexport function clickAttract(engine, container, enabledCb) {\n    if (!container.attract) {\n        container.attract = { particles: [] };\n    }\n    const { attract } = container;\n    if (!attract.finish) {\n        if (!attract.count) {\n            attract.count = 0;\n        }\n        attract.count++;\n        if (attract.count === container.particles.count) {\n            attract.finish = true;\n        }\n    }\n    if (attract.clicking) {\n        const mousePos = container.interactivity.mouse.clickPosition, attractRadius = container.retina.attractModeDistance;\n        if (!attractRadius || attractRadius < minRadius || !mousePos) {\n            return;\n        }\n        processAttract(engine, container, mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius), (p) => enabledCb(p));\n    }\n    else if (attract.clicking === false) {\n        attract.particles = [];\n    }\n}\nexport function hoverAttract(engine, container, enabledCb) {\n    const mousePos = container.interactivity.mouse.position, attractRadius = container.retina.attractModeDistance;\n    if (!attractRadius || attractRadius < minRadius || !mousePos) {\n        return;\n    }\n    processAttract(engine, container, mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius), (p) => enabledCb(p));\n}\n", "import { EasingType, isNull } from \"@tsparticles/engine\";\nexport class Attract {\n    constructor() {\n        this.distance = 200;\n        this.duration = 0.4;\n        this.easing = EasingType.easeOutQuad;\n        this.factor = 1;\n        this.maxSpeed = 50;\n        this.speed = 1;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        if (data.duration !== undefined) {\n            this.duration = data.duration;\n        }\n        if (data.easing !== undefined) {\n            this.easing = data.easing;\n        }\n        if (data.factor !== undefined) {\n            this.factor = data.factor;\n        }\n        if (data.maxSpeed !== undefined) {\n            this.maxSpeed = data.maxSpeed;\n        }\n        if (data.speed !== undefined) {\n            this.speed = data.speed;\n        }\n    }\n}\n", "import { ExternalInteractorBase, isInArray, millisecondsToSeconds, mouseMoveEvent, } from \"@tsparticles/engine\";\nimport { clickAttract, hoverAttract } from \"./Utils.js\";\nimport { Attract } from \"./Options/Classes/Attract.js\";\nconst attractMode = \"attract\";\nexport class Attractor extends ExternalInteractorBase {\n    constructor(engine, container) {\n        super(container);\n        this._engine = engine;\n        if (!container.attract) {\n            container.attract = { particles: [] };\n        }\n        this.handleClickMode = (mode) => {\n            const options = this.container.actualOptions, attract = options.interactivity.modes.attract;\n            if (!attract || mode !== attractMode) {\n                return;\n            }\n            if (!container.attract) {\n                container.attract = { particles: [] };\n            }\n            container.attract.clicking = true;\n            container.attract.count = 0;\n            for (const particle of container.attract.particles) {\n                if (!this.isEnabled(particle)) {\n                    continue;\n                }\n                particle.velocity.setTo(particle.initialVelocity);\n            }\n            container.attract.particles = [];\n            container.attract.finish = false;\n            setTimeout(() => {\n                if (container.destroyed) {\n                    return;\n                }\n                if (!container.attract) {\n                    container.attract = { particles: [] };\n                }\n                container.attract.clicking = false;\n            }, attract.duration * millisecondsToSeconds);\n        };\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, attract = container.actualOptions.interactivity.modes.attract;\n        if (!attract) {\n            return;\n        }\n        container.retina.attractModeDistance = attract.distance * container.retina.pixelRatio;\n    }\n    interact() {\n        const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, events = options.interactivity.events, { enable: hoverEnabled, mode: hoverMode } = events.onHover, { enable: clickEnabled, mode: clickMode } = events.onClick;\n        if (mouseMoveStatus && hoverEnabled && isInArray(attractMode, hoverMode)) {\n            hoverAttract(this._engine, this.container, p => this.isEnabled(p));\n        }\n        else if (clickEnabled && isInArray(attractMode, clickMode)) {\n            clickAttract(this._engine, this.container, p => this.isEnabled(p));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events;\n        if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode, clickMode = events.onClick.mode;\n        return isInArray(attractMode, hoverMode) || isInArray(attractMode, clickMode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.attract) {\n            options.attract = new Attract();\n        }\n        for (const source of sources) {\n            options.attract.load(source?.attract);\n        }\n    }\n    reset() {\n    }\n}\n", "import { Attractor } from \"./Attractor.js\";\nexport async function loadExternalAttractInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalAttract\", container => {\n        return Promise.resolve(new Attractor(engine, container));\n    }, refresh);\n}\nexport * from \"./Options/Classes/Attract.js\";\nexport * from \"./Options/Interfaces/IAttract.js\";\n", "import { Circle, DivType, Rectangle, Vector, calculateBounds, circleBounce, circleBounceDataFromParticle, divModeExecute, rectBounce, } from \"@tsparticles/engine\";\nconst squareExp = 2, half = 0.5, halfPI = Math.PI * half, double = 2, toleranceFactor = 10, minRadius = 0;\nfunction processBounce(container, position, radius, area, enabledCb) {\n    const query = container.particles.quadTree.query(area, enabledCb);\n    for (const particle of query) {\n        if (area instanceof Circle) {\n            circleBounce(circleBounceDataFromParticle(particle), {\n                position,\n                radius,\n                mass: radius ** squareExp * halfPI,\n                velocity: Vector.origin,\n                factor: Vector.origin,\n            });\n        }\n        else if (area instanceof Rectangle) {\n            rectBounce(particle, calculateBounds(position, radius));\n        }\n    }\n}\nfunction singleSelectorBounce(container, selector, div, bounceCb) {\n    const query = document.querySelectorAll(selector);\n    if (!query.length) {\n        return;\n    }\n    query.forEach(item => {\n        const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n            x: (elem.offsetLeft + elem.offsetWidth * half) * pxRatio,\n            y: (elem.offsetTop + elem.offsetHeight * half) * pxRatio,\n        }, radius = elem.offsetWidth * half * pxRatio, tolerance = toleranceFactor * pxRatio, area = div.type === DivType.circle\n            ? new Circle(pos.x, pos.y, radius + tolerance)\n            : new Rectangle(elem.offsetLeft * pxRatio - tolerance, elem.offsetTop * pxRatio - tolerance, elem.offsetWidth * pxRatio + tolerance * double, elem.offsetHeight * pxRatio + tolerance * double);\n        bounceCb(pos, radius, area);\n    });\n}\nexport function divBounce(container, divs, bounceMode, enabledCb) {\n    divModeExecute(bounceMode, divs, (selector, div) => singleSelectorBounce(container, selector, div, (pos, radius, area) => processBounce(container, pos, radius, area, enabledCb)));\n}\nexport function mouseBounce(container, enabledCb) {\n    const pxRatio = container.retina.pixelRatio, tolerance = toleranceFactor * pxRatio, mousePos = container.interactivity.mouse.position, radius = container.retina.bounceModeDistance;\n    if (!radius || radius < minRadius || !mousePos) {\n        return;\n    }\n    processBounce(container, mousePos, radius, new Circle(mousePos.x, mousePos.y, radius + tolerance), enabledCb);\n}\n", "import { isNull } from \"@tsparticles/engine\";\nexport class Bounce {\n    constructor() {\n        this.distance = 200;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n    }\n}\n", "import { ExternalInteractorBase, isDivModeEnabled, isInArray, mouseMoveEvent, } from \"@tsparticles/engine\";\nimport { divBounce, mouseBounce } from \"./Utils.js\";\nimport { Bounce } from \"./Options/Classes/Bounce.js\";\nconst bounceMode = \"bounce\";\nexport class Bouncer extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, bounce = container.actualOptions.interactivity.modes.bounce;\n        if (!bounce) {\n            return;\n        }\n        container.retina.bounceModeDistance = bounce.distance * container.retina.pixelRatio;\n    }\n    interact() {\n        const container = this.container, options = container.actualOptions, events = options.interactivity.events, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, divs = events.onDiv;\n        if (mouseMoveStatus && hoverEnabled && isInArray(bounceMode, hoverMode)) {\n            mouseBounce(this.container, p => this.isEnabled(p));\n        }\n        else {\n            divBounce(this.container, divs, bounceMode, p => this.isEnabled(p));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, divs = events.onDiv;\n        return ((!!mouse.position && events.onHover.enable && isInArray(bounceMode, events.onHover.mode)) ||\n            isDivModeEnabled(bounceMode, divs));\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.bounce) {\n            options.bounce = new Bounce();\n        }\n        for (const source of sources) {\n            options.bounce.load(source?.bounce);\n        }\n    }\n    reset() {\n    }\n}\n", "import { Bouncer } from \"./Bouncer.js\";\nexport async function loadExternalBounceInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalBounce\", container => {\n        return Promise.resolve(new Bouncer(container));\n    }, refresh);\n}\nexport * from \"./Options/Classes/Bounce.js\";\nexport * from \"./Options/Interfaces/IBounce.js\";\n", "import { OptionsColor, executeOnSingleOrMultiple, isArray, isNull, } from \"@tsparticles/engine\";\nexport class BubbleBase {\n    constructor() {\n        this.distance = 200;\n        this.duration = 0.4;\n        this.mix = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        if (data.duration !== undefined) {\n            this.duration = data.duration;\n        }\n        if (data.mix !== undefined) {\n            this.mix = data.mix;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n        if (data.color !== undefined) {\n            const sourceColor = isArray(this.color) ? undefined : this.color;\n            this.color = executeOnSingleOrMultiple(data.color, color => {\n                return OptionsColor.create(sourceColor, color);\n            });\n        }\n        if (data.size !== undefined) {\n            this.size = data.size;\n        }\n    }\n}\n", "import { isNull } from \"@tsparticles/engine\";\nimport { BubbleBase } from \"./BubbleBase.js\";\nexport class BubbleDiv extends BubbleBase {\n    constructor() {\n        super();\n        this.selectors = [];\n    }\n    load(data) {\n        super.load(data);\n        if (isNull(data)) {\n            return;\n        }\n        if (data.selectors !== undefined) {\n            this.selectors = data.selectors;\n        }\n    }\n}\n", "import { executeOnSingleOrMultiple, isNull, } from \"@tsparticles/engine\";\nimport { BubbleBase } from \"./BubbleBase.js\";\nimport { BubbleDiv } from \"./BubbleDiv.js\";\nexport class Bubble extends BubbleBase {\n    load(data) {\n        super.load(data);\n        if (isNull(data)) {\n            return;\n        }\n        this.divs = executeOnSingleOrMultiple(data.divs, div => {\n            const tmp = new BubbleDiv();\n            tmp.load(div);\n            return tmp;\n        });\n    }\n}\n", "export var ProcessBubbleType;\n(function (ProcessBubbleType) {\n    ProcessBubbleType[\"color\"] = \"color\";\n    ProcessBubbleType[\"opacity\"] = \"opacity\";\n    ProcessBubbleType[\"size\"] = \"size\";\n})(ProcessBubbleType || (ProcessBubbleType = {}));\n", "import { clamp } from \"@tsparticles/engine\";\nexport function calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n    if (modeValue >= optionsValue) {\n        const value = particleValue + (modeValue - optionsValue) * ratio;\n        return clamp(value, particleValue, modeValue);\n    }\n    else if (modeValue < optionsValue) {\n        const value = particleValue - (optionsValue - modeValue) * ratio;\n        return clamp(value, modeValue, particleValue);\n    }\n}\n", "import { Circle, DivType, ExternalInteractorBase, Rectangle, colorMix, divMode, divModeExecute, getDistance, getRangeMax, isDivModeEnabled, isInArray, itemFromSingleOrMultiple, millisecondsToSeconds, mouseLeaveEvent, mouseMoveEvent, rangeColorToHsl, rgbToHsl, } from \"@tsparticles/engine\";\nimport { Bubble } from \"./Options/Classes/Bubble.js\";\nimport { ProcessBubbleType } from \"./Enums.js\";\nimport { calculateBubbleValue } from \"./Utils.js\";\nconst bubbleMode = \"bubble\", minDistance = 0, defaultClickTime = 0, double = 2, defaultOpacity = 1, ratioOffset = 1, defaultBubbleValue = 0, minRatio = 0, half = 0.5, defaultRatio = 1;\nexport class Bubbler extends ExternalInteractorBase {\n    constructor(container, engine) {\n        super(container);\n        this._clickBubble = () => {\n            const container = this.container, options = container.actualOptions, mouseClickPos = container.interactivity.mouse.clickPosition, bubbleOptions = options.interactivity.modes.bubble;\n            if (!bubbleOptions || !mouseClickPos) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            const distance = container.retina.bubbleModeDistance;\n            if (!distance || distance < minDistance) {\n                return;\n            }\n            const query = container.particles.quadTree.queryCircle(mouseClickPos, distance, p => this.isEnabled(p)), { bubble } = container;\n            for (const particle of query) {\n                if (!bubble.clicking) {\n                    continue;\n                }\n                particle.bubble.inRange = !bubble.durationEnd;\n                const pos = particle.getPosition(), distMouse = getDistance(pos, mouseClickPos), timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime ?? defaultClickTime)) /\n                    millisecondsToSeconds;\n                if (timeSpent > bubbleOptions.duration) {\n                    bubble.durationEnd = true;\n                }\n                if (timeSpent > bubbleOptions.duration * double) {\n                    bubble.clicking = false;\n                    bubble.durationEnd = false;\n                }\n                const sizeData = {\n                    bubbleObj: {\n                        optValue: container.retina.bubbleModeSize,\n                        value: particle.bubble.radius,\n                    },\n                    particlesObj: {\n                        optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n                        value: particle.size.value,\n                    },\n                    type: ProcessBubbleType.size,\n                };\n                this._process(particle, distMouse, timeSpent, sizeData);\n                const opacityData = {\n                    bubbleObj: {\n                        optValue: bubbleOptions.opacity,\n                        value: particle.bubble.opacity,\n                    },\n                    particlesObj: {\n                        optValue: getRangeMax(particle.options.opacity.value),\n                        value: particle.opacity?.value ?? defaultOpacity,\n                    },\n                    type: ProcessBubbleType.opacity,\n                };\n                this._process(particle, distMouse, timeSpent, opacityData);\n                if (!bubble.durationEnd && distMouse <= distance) {\n                    this._hoverBubbleColor(particle, distMouse);\n                }\n                else {\n                    delete particle.bubble.color;\n                }\n            }\n        };\n        this._hoverBubble = () => {\n            const container = this.container, mousePos = container.interactivity.mouse.position, distance = container.retina.bubbleModeDistance;\n            if (!distance || distance < minDistance || !mousePos) {\n                return;\n            }\n            const query = container.particles.quadTree.queryCircle(mousePos, distance, p => this.isEnabled(p));\n            for (const particle of query) {\n                particle.bubble.inRange = true;\n                const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos), ratio = ratioOffset - pointDistance / distance;\n                if (pointDistance <= distance) {\n                    if (ratio >= minRatio && container.interactivity.status === mouseMoveEvent) {\n                        this._hoverBubbleSize(particle, ratio);\n                        this._hoverBubbleOpacity(particle, ratio);\n                        this._hoverBubbleColor(particle, ratio);\n                    }\n                }\n                else {\n                    this.reset(particle);\n                }\n                if (container.interactivity.status === mouseLeaveEvent) {\n                    this.reset(particle);\n                }\n            }\n        };\n        this._hoverBubbleColor = (particle, ratio, divBubble) => {\n            const options = this.container.actualOptions, bubbleOptions = divBubble ?? options.interactivity.modes.bubble;\n            if (!bubbleOptions) {\n                return;\n            }\n            if (!particle.bubble.finalColor) {\n                const modeColor = bubbleOptions.color;\n                if (!modeColor) {\n                    return;\n                }\n                const bubbleColor = itemFromSingleOrMultiple(modeColor);\n                particle.bubble.finalColor = rangeColorToHsl(this._engine, bubbleColor);\n            }\n            if (!particle.bubble.finalColor) {\n                return;\n            }\n            if (bubbleOptions.mix) {\n                particle.bubble.color = undefined;\n                const pColor = particle.getFillColor();\n                particle.bubble.color = pColor\n                    ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, ratioOffset - ratio, ratio))\n                    : particle.bubble.finalColor;\n            }\n            else {\n                particle.bubble.color = particle.bubble.finalColor;\n            }\n        };\n        this._hoverBubbleOpacity = (particle, ratio, divBubble) => {\n            const container = this.container, options = container.actualOptions, modeOpacity = divBubble?.opacity ?? options.interactivity.modes.bubble?.opacity;\n            if (!modeOpacity) {\n                return;\n            }\n            const optOpacity = particle.options.opacity.value, pOpacity = particle.opacity?.value ?? defaultOpacity, opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n            if (opacity !== undefined) {\n                particle.bubble.opacity = opacity;\n            }\n        };\n        this._hoverBubbleSize = (particle, ratio, divBubble) => {\n            const container = this.container, modeSize = divBubble?.size ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n            if (modeSize === undefined) {\n                return;\n            }\n            const optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio, pSize = particle.size.value, size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n            if (size !== undefined) {\n                particle.bubble.radius = size;\n            }\n        };\n        this._process = (particle, distMouse, timeSpent, data) => {\n            const container = this.container, bubbleParam = data.bubbleObj.optValue, options = container.actualOptions, bubbleOptions = options.interactivity.modes.bubble;\n            if (!bubbleOptions || bubbleParam === undefined) {\n                return;\n            }\n            const bubbleDuration = bubbleOptions.duration, bubbleDistance = container.retina.bubbleModeDistance, particlesParam = data.particlesObj.optValue, pObjBubble = data.bubbleObj.value, pObj = data.particlesObj.value ?? defaultBubbleValue, type = data.type;\n            if (!bubbleDistance || bubbleDistance < minDistance || bubbleParam === particlesParam) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            if (container.bubble.durationEnd) {\n                if (pObjBubble) {\n                    if (type === ProcessBubbleType.size) {\n                        delete particle.bubble.radius;\n                    }\n                    if (type === ProcessBubbleType.opacity) {\n                        delete particle.bubble.opacity;\n                    }\n                }\n            }\n            else {\n                if (distMouse <= bubbleDistance) {\n                    const obj = pObjBubble ?? pObj;\n                    if (obj !== bubbleParam) {\n                        const value = pObj - (timeSpent * (pObj - bubbleParam)) / bubbleDuration;\n                        if (type === ProcessBubbleType.size) {\n                            particle.bubble.radius = value;\n                        }\n                        if (type === ProcessBubbleType.opacity) {\n                            particle.bubble.opacity = value;\n                        }\n                    }\n                }\n                else {\n                    if (type === ProcessBubbleType.size) {\n                        delete particle.bubble.radius;\n                    }\n                    if (type === ProcessBubbleType.opacity) {\n                        delete particle.bubble.opacity;\n                    }\n                }\n            }\n        };\n        this._singleSelectorHover = (delta, selector, div) => {\n            const container = this.container, selectors = document.querySelectorAll(selector), bubble = container.actualOptions.interactivity.modes.bubble;\n            if (!bubble || !selectors.length) {\n                return;\n            }\n            selectors.forEach(item => {\n                const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                    x: (elem.offsetLeft + elem.offsetWidth * half) * pxRatio,\n                    y: (elem.offsetTop + elem.offsetHeight * half) * pxRatio,\n                }, repulseRadius = elem.offsetWidth * half * pxRatio, area = div.type === DivType.circle\n                    ? new Circle(pos.x, pos.y, repulseRadius)\n                    : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), query = container.particles.quadTree.query(area, p => this.isEnabled(p));\n                for (const particle of query) {\n                    if (!area.contains(particle.getPosition())) {\n                        continue;\n                    }\n                    particle.bubble.inRange = true;\n                    const divs = bubble.divs, divBubble = divMode(divs, elem);\n                    if (!particle.bubble.div || particle.bubble.div !== elem) {\n                        this.clear(particle, delta, true);\n                        particle.bubble.div = elem;\n                    }\n                    this._hoverBubbleSize(particle, defaultRatio, divBubble);\n                    this._hoverBubbleOpacity(particle, defaultRatio, divBubble);\n                    this._hoverBubbleColor(particle, defaultRatio, divBubble);\n                }\n            });\n        };\n        this._engine = engine;\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        this.handleClickMode = (mode) => {\n            if (mode !== bubbleMode) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            container.bubble.clicking = true;\n        };\n    }\n    clear(particle, delta, force) {\n        if (particle.bubble.inRange && !force) {\n            return;\n        }\n        delete particle.bubble.div;\n        delete particle.bubble.opacity;\n        delete particle.bubble.radius;\n        delete particle.bubble.color;\n    }\n    init() {\n        const container = this.container, bubble = container.actualOptions.interactivity.modes.bubble;\n        if (!bubble) {\n            return;\n        }\n        container.retina.bubbleModeDistance = bubble.distance * container.retina.pixelRatio;\n        if (bubble.size !== undefined) {\n            container.retina.bubbleModeSize = bubble.size * container.retina.pixelRatio;\n        }\n    }\n    interact(delta) {\n        const options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n        if (hoverEnabled && isInArray(bubbleMode, hoverMode)) {\n            this._hoverBubble();\n        }\n        else if (clickEnabled && isInArray(bubbleMode, clickMode)) {\n            this._clickBubble();\n        }\n        else {\n            divModeExecute(bubbleMode, divs, (selector, div) => this._singleSelectorHover(delta, selector, div));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, { onClick, onDiv, onHover } = events, divBubble = isDivModeEnabled(bubbleMode, onDiv);\n        if (!(divBubble || (onHover.enable && !!mouse.position) || (onClick.enable && mouse.clickPosition))) {\n            return false;\n        }\n        return isInArray(bubbleMode, onHover.mode) || isInArray(bubbleMode, onClick.mode) || divBubble;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.bubble) {\n            options.bubble = new Bubble();\n        }\n        for (const source of sources) {\n            options.bubble.load(source?.bubble);\n        }\n    }\n    reset(particle) {\n        particle.bubble.inRange = false;\n    }\n}\n", "import { Bubbler } from \"./Bubbler.js\";\nexport async function loadExternalBubbleInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalBubble\", container => {\n        return Promise.resolve(new Bubbler(container, engine));\n    }, refresh);\n}\nexport * from \"./Options/Classes/BubbleBase.js\";\nexport * from \"./Options/Classes/BubbleDiv.js\";\nexport * from \"./Options/Classes/Bubble.js\";\nexport * from \"./Options/Interfaces/IBubbleBase.js\";\nexport * from \"./Options/Interfaces/IBubbleDiv.js\";\nexport * from \"./Options/Interfaces/IBubble.js\";\n", "import { isNull } from \"@tsparticles/engine\";\nexport class ConnectLinks {\n    constructor() {\n        this.opacity = 0.5;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n", "import { isNull } from \"@tsparticles/engine\";\nimport { ConnectLinks } from \"./ConnectLinks.js\";\nexport class Connect {\n    constructor() {\n        this.distance = 80;\n        this.links = new ConnectLinks();\n        this.radius = 60;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        this.links.load(data.links);\n        if (data.radius !== undefined) {\n            this.radius = data.radius;\n        }\n    }\n}\n", "import { clamp, colorMix, drawLine, getStyleFromHsl, getStyleFromRgb, } from \"@tsparticles/engine\";\nconst gradientMin = 0, gradientMax = 1, defaultLinksWidth = 0;\nexport function gradient(context, p1, p2, opacity) {\n    const gradStop = Math.floor(p2.getRadius() / p1.getRadius()), color1 = p1.getFillColor(), color2 = p2.getFillColor();\n    if (!color1 || !color2) {\n        return;\n    }\n    const sourcePos = p1.getPosition(), destPos = p2.getPosition(), midRgb = colorMix(color1, color2, p1.getRadius(), p2.getRadius()), grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n    grad.addColorStop(gradientMin, getStyleFromHsl(color1, opacity));\n    grad.addColorStop(clamp(gradStop, gradientMin, gradientMax), getStyleFromRgb(midRgb, opacity));\n    grad.addColorStop(gradientMax, getStyleFromHsl(color2, opacity));\n    return grad;\n}\nexport function drawConnectLine(context, width, lineStyle, begin, end) {\n    drawLine(context, begin, end);\n    context.lineWidth = width;\n    context.strokeStyle = lineStyle;\n    context.stroke();\n}\nexport function lineStyle(container, ctx, p1, p2) {\n    const options = container.actualOptions, connectOptions = options.interactivity.modes.connect;\n    if (!connectOptions) {\n        return;\n    }\n    return gradient(ctx, p1, p2, connectOptions.links.opacity);\n}\nexport function drawConnection(container, p1, p2) {\n    container.canvas.draw(ctx => {\n        const ls = lineStyle(container, ctx, p1, p2);\n        if (!ls) {\n            return;\n        }\n        const pos1 = p1.getPosition(), pos2 = p2.getPosition();\n        drawConnectLine(ctx, p1.retina.linksWidth ?? defaultLinksWidth, ls, pos1, pos2);\n    });\n}\n", "import { ExternalInteractorBase, isInArray, } from \"@tsparticles/engine\";\nimport { Connect } from \"./Options/Classes/Connect.js\";\nimport { drawConnection } from \"./Utils.js\";\nconst connectMode = \"connect\", minDistance = 0;\nexport class Connector extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, connect = container.actualOptions.interactivity.modes.connect;\n        if (!connect) {\n            return;\n        }\n        container.retina.connectModeDistance = connect.distance * container.retina.pixelRatio;\n        container.retina.connectModeRadius = connect.radius * container.retina.pixelRatio;\n    }\n    interact() {\n        const container = this.container, options = container.actualOptions;\n        if (options.interactivity.events.onHover.enable && container.interactivity.status === \"pointermove\") {\n            const mousePos = container.interactivity.mouse.position, { connectModeDistance, connectModeRadius } = container.retina;\n            if (!connectModeDistance ||\n                connectModeDistance < minDistance ||\n                !connectModeRadius ||\n                connectModeRadius < minDistance ||\n                !mousePos) {\n                return;\n            }\n            const distance = Math.abs(connectModeRadius), query = container.particles.quadTree.queryCircle(mousePos, distance, p => this.isEnabled(p));\n            query.forEach((p1, i) => {\n                const pos1 = p1.getPosition(), indexOffset = 1;\n                for (const p2 of query.slice(i + indexOffset)) {\n                    const pos2 = p2.getPosition(), distMax = Math.abs(connectModeDistance), xDiff = Math.abs(pos1.x - pos2.x), yDiff = Math.abs(pos1.y - pos2.y);\n                    if (xDiff < distMax && yDiff < distMax) {\n                        drawConnection(container, p1, p2);\n                    }\n                }\n            });\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        if (!(events.onHover.enable && mouse.position)) {\n            return false;\n        }\n        return isInArray(connectMode, events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.connect) {\n            options.connect = new Connect();\n        }\n        for (const source of sources) {\n            options.connect.load(source?.connect);\n        }\n    }\n    reset() {\n    }\n}\n", "import { Connector } from \"./Connector.js\";\nexport async function loadExternalConnectInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalConnect\", container => {\n        return Promise.resolve(new Connector(container));\n    }, refresh);\n}\nexport * from \"./Options/Classes/Connect.js\";\nexport * from \"./Options/Classes/ConnectLinks.js\";\nexport * from \"./Options/Interfaces/IConnect.js\";\nexport * from \"./Options/Interfaces/IConnectLinks.js\";\n", "import { OptionsColor, isNull } from \"@tsparticles/engine\";\nexport class GrabLinks {\n    constructor() {\n        this.blink = false;\n        this.consent = false;\n        this.opacity = 1;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.blink !== undefined) {\n            this.blink = data.blink;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.consent !== undefined) {\n            this.consent = data.consent;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n", "import { isNull } from \"@tsparticles/engine\";\nimport { GrabLinks } from \"./GrabLinks.js\";\nexport class Grab {\n    constructor() {\n        this.distance = 100;\n        this.links = new GrabLinks();\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        this.links.load(data.links);\n    }\n}\n", "import { drawLine, getStyleFromRgb } from \"@tsparticles/engine\";\nconst defaultWidth = 0;\nexport function drawGrabLine(context, width, begin, end, colorLine, opacity) {\n    drawLine(context, begin, end);\n    context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n    context.lineWidth = width;\n    context.stroke();\n}\nexport function drawGrab(container, particle, lineColor, opacity, mousePos) {\n    container.canvas.draw(ctx => {\n        const beginPos = particle.getPosition();\n        drawGrabLine(ctx, particle.retina.linksWidth ?? defaultWidth, beginPos, mousePos, lineColor, opacity);\n    });\n}\n", "import { ExternalInteractorBase, getDistance, getLinkColor, getLinkRandomColor, isInArray, mouseMoveEvent, } from \"@tsparticles/engine\";\nimport { Grab } from \"./Options/Classes/Grab.js\";\nimport { drawGrab } from \"./Utils.js\";\nconst grabMode = \"grab\", minDistance = 0, minOpacity = 0;\nexport class Grabber extends ExternalInteractorBase {\n    constructor(container, engine) {\n        super(container);\n        this._engine = engine;\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, grab = container.actualOptions.interactivity.modes.grab;\n        if (!grab) {\n            return;\n        }\n        container.retina.grabModeDistance = grab.distance * container.retina.pixelRatio;\n    }\n    interact() {\n        const container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n        if (!interactivity.modes.grab ||\n            !interactivity.events.onHover.enable ||\n            container.interactivity.status !== mouseMoveEvent) {\n            return;\n        }\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const distance = container.retina.grabModeDistance;\n        if (!distance || distance < minDistance) {\n            return;\n        }\n        const query = container.particles.quadTree.queryCircle(mousePos, distance, p => this.isEnabled(p));\n        for (const particle of query) {\n            const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos);\n            if (pointDistance > distance) {\n                continue;\n            }\n            const grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - (pointDistance * lineOpacity) / distance;\n            if (opacityLine <= minOpacity) {\n                continue;\n            }\n            const optColor = grabLineOptions.color ?? particle.options.links?.color;\n            if (!container.particles.grabLineColor && optColor) {\n                const linksOptions = interactivity.modes.grab.links;\n                container.particles.grabLineColor = getLinkRandomColor(this._engine, optColor, linksOptions.blink, linksOptions.consent);\n            }\n            const colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n            if (!colorLine) {\n                continue;\n            }\n            drawGrab(container, particle, colorLine, opacityLine, mousePos);\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        return events.onHover.enable && !!mouse.position && isInArray(grabMode, events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.grab) {\n            options.grab = new Grab();\n        }\n        for (const source of sources) {\n            options.grab.load(source?.grab);\n        }\n    }\n    reset() {\n    }\n}\n", "import { Grabber } from \"./Grabber.js\";\nexport async function loadExternalGrabInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalGrab\", container => {\n        return Promise.resolve(new Grabber(container, engine));\n    }, refresh);\n}\nexport * from \"./Options/Classes/Grab.js\";\nexport * from \"./Options/Classes/GrabLinks.js\";\nexport * from \"./Options/Interfaces/IGrab.js\";\nexport * from \"./Options/Interfaces/IGrabLinks.js\";\n", "import { ExternalInteractorBase } from \"@tsparticles/engine\";\nconst pauseMode = \"pause\";\nexport class Pauser extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this.handleClickMode = (mode) => {\n            if (mode !== pauseMode) {\n                return;\n            }\n            const container = this.container;\n            if (container.animationStatus) {\n                container.pause();\n            }\n            else {\n                container.play();\n            }\n        };\n    }\n    clear() {\n    }\n    init() {\n    }\n    interact() {\n    }\n    isEnabled() {\n        return true;\n    }\n    reset() {\n    }\n}\n", "import { Pauser } from \"./Pauser.js\";\nexport async function loadExternalPauseInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalPause\", container => {\n        return Promise.resolve(new Pauser(container));\n    }, refresh);\n}\n", "import { isNull, setRangeValue } from \"@tsparticles/engine\";\nexport class Push {\n    constructor() {\n        this.default = true;\n        this.groups = [];\n        this.quantity = 4;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.default !== undefined) {\n            this.default = data.default;\n        }\n        if (data.groups !== undefined) {\n            this.groups = data.groups.map(t => t);\n        }\n        if (!this.groups.length) {\n            this.default = true;\n        }\n        const quantity = data.quantity;\n        if (quantity !== undefined) {\n            this.quantity = setRangeValue(quantity);\n        }\n    }\n}\n", "import { ExternalInteractorBase, getRangeValue, itemFromArray, } from \"@tsparticles/engine\";\nimport { Push } from \"./Options/Classes/Push.js\";\nconst pushMode = \"push\", minQuantity = 0;\nexport class Pusher extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this.handleClickMode = (mode) => {\n            if (mode !== pushMode) {\n                return;\n            }\n            const container = this.container, options = container.actualOptions, pushOptions = options.interactivity.modes.push;\n            if (!pushOptions) {\n                return;\n            }\n            const quantity = getRangeValue(pushOptions.quantity);\n            if (quantity <= minQuantity) {\n                return;\n            }\n            const group = itemFromArray([undefined, ...pushOptions.groups]), groupOptions = group !== undefined ? container.actualOptions.particles.groups[group] : undefined;\n            void container.particles.push(quantity, container.interactivity.mouse, groupOptions, group);\n        };\n    }\n    clear() {\n    }\n    init() {\n    }\n    interact() {\n    }\n    isEnabled() {\n        return true;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.push) {\n            options.push = new Push();\n        }\n        for (const source of sources) {\n            options.push.load(source?.push);\n        }\n    }\n    reset() {\n    }\n}\n", "import { Pusher } from \"./Pusher.js\";\nexport async function loadExternalPushInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalPush\", container => {\n        return Promise.resolve(new Pusher(container));\n    }, refresh);\n}\nexport * from \"./Options/Classes/Push.js\";\nexport * from \"./Options/Interfaces/IPush.js\";\n", "import { isNull, setRangeValue } from \"@tsparticles/engine\";\nexport class Remove {\n    constructor() {\n        this.quantity = 2;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        const quantity = data.quantity;\n        if (quantity !== undefined) {\n            this.quantity = setRangeValue(quantity);\n        }\n    }\n}\n", "import { ExternalInteractorBase, getRangeValue, } from \"@tsparticles/engine\";\nimport { Remove } from \"./Options/Classes/Remove.js\";\nconst removeMode = \"remove\";\nexport class Remover extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this.handleClickMode = (mode) => {\n            const container = this.container, options = container.actualOptions;\n            if (!options.interactivity.modes.remove || mode !== removeMode) {\n                return;\n            }\n            const removeNb = getRangeValue(options.interactivity.modes.remove.quantity);\n            container.particles.removeQuantity(removeNb);\n        };\n    }\n    clear() {\n    }\n    init() {\n    }\n    interact() {\n    }\n    isEnabled() {\n        return true;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.remove) {\n            options.remove = new Remove();\n        }\n        for (const source of sources) {\n            options.remove.load(source?.remove);\n        }\n    }\n    reset() {\n    }\n}\n", "import { Remover } from \"./Remover.js\";\nexport async function loadExternalRemoveInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalRemove\", container => {\n        return Promise.resolve(new Remover(container));\n    }, refresh);\n}\nexport * from \"./Options/Classes/Remove.js\";\nexport * from \"./Options/Interfaces/IRemove.js\";\n", "import { EasingType, isNull } from \"@tsparticles/engine\";\nexport class RepulseBase {\n    constructor() {\n        this.distance = 200;\n        this.duration = 0.4;\n        this.factor = 100;\n        this.speed = 1;\n        this.maxSpeed = 50;\n        this.easing = EasingType.easeOutQuad;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        if (data.duration !== undefined) {\n            this.duration = data.duration;\n        }\n        if (data.easing !== undefined) {\n            this.easing = data.easing;\n        }\n        if (data.factor !== undefined) {\n            this.factor = data.factor;\n        }\n        if (data.speed !== undefined) {\n            this.speed = data.speed;\n        }\n        if (data.maxSpeed !== undefined) {\n            this.maxSpeed = data.maxSpeed;\n        }\n    }\n}\n", "import { isNull } from \"@tsparticles/engine\";\nimport { RepulseBase } from \"./RepulseBase.js\";\nexport class RepulseDiv extends RepulseBase {\n    constructor() {\n        super();\n        this.selectors = [];\n    }\n    load(data) {\n        super.load(data);\n        if (isNull(data)) {\n            return;\n        }\n        if (data.selectors !== undefined) {\n            this.selectors = data.selectors;\n        }\n    }\n}\n", "import { executeOnSingleOrMultiple, isNull, } from \"@tsparticles/engine\";\nimport { RepulseBase } from \"./RepulseBase.js\";\nimport { RepulseDiv } from \"./RepulseDiv.js\";\nexport class Repulse extends RepulseBase {\n    load(data) {\n        super.load(data);\n        if (isNull(data)) {\n            return;\n        }\n        this.divs = executeOnSingleOrMultiple(data.divs, div => {\n            const tmp = new RepulseDiv();\n            tmp.load(div);\n            return tmp;\n        });\n    }\n}\n", "import { Circle, DivType, ExternalInteractorBase, Rectangle, Vector, clamp, divMode, divModeExecute, getDistances, isDivModeEnabled, isInArray, millisecondsToSeconds, mouseMoveEvent, } from \"@tsparticles/engine\";\nimport { Repulse } from \"./Options/Classes/Repulse.js\";\nconst repulseMode = \"repulse\", minDistance = 0, repulseRadiusFactor = 6, repulseRadiusPower = 3, squarePower = 2, minRadius = 0, minSpeed = 0, easingOffset = 1, half = 0.5;\nexport class Repulser extends ExternalInteractorBase {\n    constructor(engine, container) {\n        super(container);\n        this._clickRepulse = () => {\n            const container = this.container, repulseOptions = container.actualOptions.interactivity.modes.repulse;\n            if (!repulseOptions) {\n                return;\n            }\n            const repulse = container.repulse ?? { particles: [] };\n            if (!repulse.finish) {\n                if (!repulse.count) {\n                    repulse.count = 0;\n                }\n                repulse.count++;\n                if (repulse.count === container.particles.count) {\n                    repulse.finish = true;\n                }\n            }\n            if (repulse.clicking) {\n                const repulseDistance = container.retina.repulseModeDistance;\n                if (!repulseDistance || repulseDistance < minDistance) {\n                    return;\n                }\n                const repulseRadius = Math.pow(repulseDistance / repulseRadiusFactor, repulseRadiusPower), mouseClickPos = container.interactivity.mouse.clickPosition;\n                if (mouseClickPos === undefined) {\n                    return;\n                }\n                const range = new Circle(mouseClickPos.x, mouseClickPos.y, repulseRadius), query = container.particles.quadTree.query(range, p => this.isEnabled(p));\n                for (const particle of query) {\n                    const { dx, dy, distance } = getDistances(mouseClickPos, particle.position), d = distance ** squarePower, velocity = repulseOptions.speed, force = (-repulseRadius * velocity) / d;\n                    if (d <= repulseRadius) {\n                        repulse.particles.push(particle);\n                        const vect = Vector.create(dx, dy);\n                        vect.length = force;\n                        particle.velocity.setTo(vect);\n                    }\n                }\n            }\n            else if (repulse.clicking === false) {\n                for (const particle of repulse.particles) {\n                    particle.velocity.setTo(particle.initialVelocity);\n                }\n                repulse.particles = [];\n            }\n        };\n        this._hoverRepulse = () => {\n            const container = this.container, mousePos = container.interactivity.mouse.position, repulseRadius = container.retina.repulseModeDistance;\n            if (!repulseRadius || repulseRadius < minRadius || !mousePos) {\n                return;\n            }\n            this._processRepulse(mousePos, repulseRadius, new Circle(mousePos.x, mousePos.y, repulseRadius));\n        };\n        this._processRepulse = (position, repulseRadius, area, divRepulse) => {\n            const container = this.container, query = container.particles.quadTree.query(area, p => this.isEnabled(p)), repulseOptions = container.actualOptions.interactivity.modes.repulse;\n            if (!repulseOptions) {\n                return;\n            }\n            const { easing, speed, factor, maxSpeed } = repulseOptions, easingFunc = this._engine.getEasing(easing), velocity = (divRepulse?.speed ?? speed) * factor;\n            for (const particle of query) {\n                const { dx, dy, distance } = getDistances(particle.position, position), repulseFactor = clamp(easingFunc(easingOffset - distance / repulseRadius) * velocity, minSpeed, maxSpeed), normVec = Vector.create(!distance ? velocity : (dx / distance) * repulseFactor, !distance ? velocity : (dy / distance) * repulseFactor);\n                particle.position.addTo(normVec);\n            }\n        };\n        this._singleSelectorRepulse = (selector, div) => {\n            const container = this.container, repulse = container.actualOptions.interactivity.modes.repulse;\n            if (!repulse) {\n                return;\n            }\n            const query = document.querySelectorAll(selector);\n            if (!query.length) {\n                return;\n            }\n            query.forEach(item => {\n                const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                    x: (elem.offsetLeft + elem.offsetWidth * half) * pxRatio,\n                    y: (elem.offsetTop + elem.offsetHeight * half) * pxRatio,\n                }, repulseRadius = elem.offsetWidth * half * pxRatio, area = div.type === DivType.circle\n                    ? new Circle(pos.x, pos.y, repulseRadius)\n                    : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), divs = repulse.divs, divRepulse = divMode(divs, elem);\n                this._processRepulse(pos, repulseRadius, area, divRepulse);\n            });\n        };\n        this._engine = engine;\n        if (!container.repulse) {\n            container.repulse = { particles: [] };\n        }\n        this.handleClickMode = (mode) => {\n            const options = this.container.actualOptions, repulseOpts = options.interactivity.modes.repulse;\n            if (!repulseOpts || mode !== repulseMode) {\n                return;\n            }\n            if (!container.repulse) {\n                container.repulse = { particles: [] };\n            }\n            const repulse = container.repulse;\n            repulse.clicking = true;\n            repulse.count = 0;\n            for (const particle of container.repulse.particles) {\n                if (!this.isEnabled(particle)) {\n                    continue;\n                }\n                particle.velocity.setTo(particle.initialVelocity);\n            }\n            repulse.particles = [];\n            repulse.finish = false;\n            setTimeout(() => {\n                if (container.destroyed) {\n                    return;\n                }\n                repulse.clicking = false;\n            }, repulseOpts.duration * millisecondsToSeconds);\n        };\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, repulse = container.actualOptions.interactivity.modes.repulse;\n        if (!repulse) {\n            return;\n        }\n        container.retina.repulseModeDistance = repulse.distance * container.retina.pixelRatio;\n    }\n    interact() {\n        const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, events = options.interactivity.events, hover = events.onHover, hoverEnabled = hover.enable, hoverMode = hover.mode, click = events.onClick, clickEnabled = click.enable, clickMode = click.mode, divs = events.onDiv;\n        if (mouseMoveStatus && hoverEnabled && isInArray(repulseMode, hoverMode)) {\n            this._hoverRepulse();\n        }\n        else if (clickEnabled && isInArray(repulseMode, clickMode)) {\n            this._clickRepulse();\n        }\n        else {\n            divModeExecute(repulseMode, divs, (selector, div) => this._singleSelectorRepulse(selector, div));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, divs = events.onDiv, hover = events.onHover, click = events.onClick, divRepulse = isDivModeEnabled(repulseMode, divs);\n        if (!(divRepulse || (hover.enable && !!mouse.position) || (click.enable && mouse.clickPosition))) {\n            return false;\n        }\n        const hoverMode = hover.mode, clickMode = click.mode;\n        return isInArray(repulseMode, hoverMode) || isInArray(repulseMode, clickMode) || divRepulse;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.repulse) {\n            options.repulse = new Repulse();\n        }\n        for (const source of sources) {\n            options.repulse.load(source?.repulse);\n        }\n    }\n    reset() {\n    }\n}\n", "import { Repulser } from \"./Repulser.js\";\nexport async function loadExternalRepulseInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalRepulse\", container => {\n        return Promise.resolve(new Repulser(engine, container));\n    }, refresh);\n}\nexport * from \"./Options/Classes/RepulseBase.js\";\nexport * from \"./Options/Classes/RepulseDiv.js\";\nexport * from \"./Options/Classes/Repulse.js\";\nexport * from \"./Options/Interfaces/IRepulseBase.js\";\nexport * from \"./Options/Interfaces/IRepulseDiv.js\";\nexport * from \"./Options/Interfaces/IRepulse.js\";\n", "import { isNull } from \"@tsparticles/engine\";\nexport class Slow {\n    constructor() {\n        this.factor = 3;\n        this.radius = 200;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.factor !== undefined) {\n            this.factor = data.factor;\n        }\n        if (data.radius !== undefined) {\n            this.radius = data.radius;\n        }\n    }\n}\n", "import { ExternalInteractorBase, getDistance, isInArray, } from \"@tsparticles/engine\";\nimport { Slow } from \"./Options/Classes/Slow.js\";\nconst slowMode = \"slow\", minRadius = 0;\nexport class Slower extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear(particle, delta, force) {\n        if (particle.slow.inRange && !force) {\n            return;\n        }\n        particle.slow.factor = 1;\n    }\n    init() {\n        const container = this.container, slow = container.actualOptions.interactivity.modes.slow;\n        if (!slow) {\n            return;\n        }\n        container.retina.slowModeRadius = slow.radius * container.retina.pixelRatio;\n    }\n    interact() {\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        return events.onHover.enable && !!mouse.position && isInArray(slowMode, events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.slow) {\n            options.slow = new Slow();\n        }\n        for (const source of sources) {\n            options.slow.load(source?.slow);\n        }\n    }\n    reset(particle) {\n        particle.slow.inRange = false;\n        const container = this.container, options = container.actualOptions, mousePos = container.interactivity.mouse.position, radius = container.retina.slowModeRadius, slowOptions = options.interactivity.modes.slow;\n        if (!slowOptions || !radius || radius < minRadius || !mousePos) {\n            return;\n        }\n        const particlePos = particle.getPosition(), dist = getDistance(mousePos, particlePos), proximityFactor = dist / radius, slowFactor = slowOptions.factor, { slow } = particle;\n        if (dist > radius) {\n            return;\n        }\n        slow.inRange = true;\n        slow.factor = proximityFactor / slowFactor;\n    }\n}\n", "import { Slower } from \"./Slower.js\";\nexport async function loadExternalSlowInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalSlow\", container => {\n        return Promise.resolve(new Slower(container));\n    }, refresh);\n}\nexport * from \"./Options/Classes/Slow.js\";\nexport * from \"./Options/Interfaces/ISlow.js\";\n", "import { errorPrefix, getLogger, getStyleFromHsl } from \"@tsparticles/engine\";\nconst stringStart = 0, defaultOpacity = 1;\nconst currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\nfunction replaceColorSvg(imageShape, color, opacity) {\n    const { svgData } = imageShape;\n    if (!svgData) {\n        return \"\";\n    }\n    const colorStyle = getStyleFromHsl(color, opacity);\n    if (svgData.includes(\"fill\")) {\n        return svgData.replace(currentColorRegex, () => colorStyle);\n    }\n    const preFillIndex = svgData.indexOf(\">\");\n    return `${svgData.substring(stringStart, preFillIndex)} fill=\"${colorStyle}\"${svgData.substring(preFillIndex)}`;\n}\nexport async function loadImage(image) {\n    return new Promise((resolve) => {\n        image.loading = true;\n        const img = new Image();\n        image.element = img;\n        img.addEventListener(\"load\", () => {\n            image.loading = false;\n            resolve();\n        });\n        img.addEventListener(\"error\", () => {\n            image.element = undefined;\n            image.error = true;\n            image.loading = false;\n            getLogger().error(`${errorPrefix} loading image: ${image.source}`);\n            resolve();\n        });\n        img.src = image.source;\n    });\n}\nexport async function downloadSvgImage(image) {\n    if (image.type !== \"svg\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    const response = await fetch(image.source);\n    if (!response.ok) {\n        getLogger().error(`${errorPrefix} Image not found`);\n        image.error = true;\n    }\n    else {\n        image.svgData = await response.text();\n    }\n    image.loading = false;\n}\nexport function replaceImageColor(image, imageData, color, particle) {\n    const svgColoredData = replaceColorSvg(image, color, particle.opacity?.value ?? defaultOpacity), imageRes = {\n        color,\n        gif: imageData.gif,\n        data: {\n            ...image,\n            svgData: svgColoredData,\n        },\n        loaded: false,\n        ratio: imageData.width / imageData.height,\n        replaceColor: imageData.replaceColor,\n        source: imageData.src,\n    };\n    return new Promise(resolve => {\n        const svg = new Blob([svgColoredData], { type: \"image/svg+xml\" }), domUrl = URL || window.URL || window.webkitURL || window, url = domUrl.createObjectURL(svg), img = new Image();\n        img.addEventListener(\"load\", () => {\n            imageRes.loaded = true;\n            imageRes.element = img;\n            resolve(imageRes);\n            domUrl.revokeObjectURL(url);\n        });\n        const errorHandler = async () => {\n            domUrl.revokeObjectURL(url);\n            const img2 = {\n                ...image,\n                error: false,\n                loading: true,\n            };\n            await loadImage(img2);\n            imageRes.loaded = true;\n            imageRes.element = img2.element;\n            resolve(imageRes);\n        };\n        img.addEventListener(\"error\", () => void errorHandler());\n        img.src = url;\n    });\n}\n", "export const InterlaceOffsets = [0, 4, 2, 1];\nexport const InterlaceSteps = [8, 8, 4, 2];\n", "export class ByteStream {\n    constructor(bytes) {\n        this.pos = 0;\n        this.data = new Uint8ClampedArray(bytes);\n    }\n    getString(count) {\n        const slice = this.data.slice(this.pos, this.pos + count);\n        this.pos += slice.length;\n        return slice.reduce((acc, curr) => acc + String.fromCharCode(curr), \"\");\n    }\n    nextByte() {\n        return this.data[this.pos++];\n    }\n    nextTwoBytes() {\n        const increment = 2, previous = 1, shift = 8;\n        this.pos += increment;\n        return this.data[this.pos - increment] + (this.data[this.pos - previous] << shift);\n    }\n    readSubBlocks() {\n        let blockString = \"\", size = 0;\n        const minCount = 0, emptySize = 0;\n        do {\n            size = this.data[this.pos++];\n            for (let count = size; --count >= minCount; blockString += String.fromCharCode(this.data[this.pos++])) {\n            }\n        } while (size !== emptySize);\n        return blockString;\n    }\n    readSubBlocksBin() {\n        let size = this.data[this.pos], len = 0;\n        const emptySize = 0, increment = 1;\n        for (let offset = 0; size !== emptySize; offset += size + increment, size = this.data[this.pos + offset]) {\n            len += size;\n        }\n        const blockData = new Uint8Array(len);\n        size = this.data[this.pos++];\n        for (let i = 0; size !== emptySize; size = this.data[this.pos++]) {\n            for (let count = size; --count >= emptySize; blockData[i++] = this.data[this.pos++]) {\n            }\n        }\n        return blockData;\n    }\n    skipSubBlocks() {\n        for (const increment = 1, noData = 0; this.data[this.pos] !== noData; this.pos += this.data[this.pos] + increment) {\n        }\n        this.pos++;\n    }\n}\n", "export var DisposalMethod;\n(function (DisposalMethod) {\n    DisposalMethod[DisposalMethod[\"Replace\"] = 0] = \"Replace\";\n    DisposalMethod[DisposalMethod[\"Combine\"] = 1] = \"Combine\";\n    DisposalMethod[DisposalMethod[\"RestoreBackground\"] = 2] = \"RestoreBackground\";\n    DisposalMethod[DisposalMethod[\"RestorePrevious\"] = 3] = \"RestorePrevious\";\n    DisposalMethod[DisposalMethod[\"UndefinedA\"] = 4] = \"UndefinedA\";\n    DisposalMethod[DisposalMethod[\"UndefinedB\"] = 5] = \"UndefinedB\";\n    DisposalMethod[DisposalMethod[\"UndefinedC\"] = 6] = \"UndefinedC\";\n    DisposalMethod[DisposalMethod[\"UndefinedD\"] = 7] = \"UndefinedD\";\n})(DisposalMethod || (DisposalMethod = {}));\n", "export var GIFDataHeaders;\n(function (GIFDataHeaders) {\n    GIFDataHeaders[GIFDataHeaders[\"Extension\"] = 33] = \"Extension\";\n    GIFDataHeaders[GIFDataHeaders[\"ApplicationExtension\"] = 255] = \"ApplicationExtension\";\n    GIFDataHeaders[GIFDataHeaders[\"GraphicsControlExtension\"] = 249] = \"GraphicsControlExtension\";\n    GIFDataHeaders[GIFDataHeaders[\"PlainTextExtension\"] = 1] = \"PlainTextExtension\";\n    GIFDataHeaders[GIFDataHeaders[\"CommentExtension\"] = 254] = \"CommentExtension\";\n    GIFDataHeaders[GIFDataHeaders[\"Image\"] = 44] = \"Image\";\n    GIFDataHeaders[GIFDataHeaders[\"EndOfFile\"] = 59] = \"EndOfFile\";\n})(GIFDataHeaders || (GIFDataHeaders = {}));\n", "import { loadImage } from \"../Utils.js\";\nimport { InterlaceOffsets, InterlaceSteps } from \"./Constants.js\";\nimport { ByteStream } from \"./ByteStream.js\";\nimport { DisposalMethod } from \"./Enums/DisposalMethod.js\";\nimport { GIFDataHeaders } from \"./Types/GIFDataHeaders.js\";\nconst origin = {\n    x: 0,\n    y: 0,\n}, defaultFrame = 0, half = 0.5, initialTime = 0, firstIndex = 0, defaultLoopCount = 0;\nfunction parseColorTable(byteStream, count) {\n    const colors = [];\n    for (let i = 0; i < count; i++) {\n        colors.push({\n            r: byteStream.data[byteStream.pos],\n            g: byteStream.data[byteStream.pos + 1],\n            b: byteStream.data[byteStream.pos + 2],\n        });\n        byteStream.pos += 3;\n    }\n    return colors;\n}\nfunction parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex) {\n    switch (byteStream.nextByte()) {\n        case GIFDataHeaders.GraphicsControlExtension: {\n            const frame = gif.frames[getFrameIndex(false)];\n            byteStream.pos++;\n            const packedByte = byteStream.nextByte();\n            frame.GCreserved = (packedByte & 0xe0) >>> 5;\n            frame.disposalMethod = (packedByte & 0x1c) >>> 2;\n            frame.userInputDelayFlag = (packedByte & 2) === 2;\n            const transparencyFlag = (packedByte & 1) === 1;\n            frame.delayTime = byteStream.nextTwoBytes() * 0xa;\n            const transparencyIndex = byteStream.nextByte();\n            if (transparencyFlag) {\n                getTransparencyIndex(transparencyIndex);\n            }\n            byteStream.pos++;\n            break;\n        }\n        case GIFDataHeaders.ApplicationExtension: {\n            byteStream.pos++;\n            const applicationExtension = {\n                identifier: byteStream.getString(8),\n                authenticationCode: byteStream.getString(3),\n                data: byteStream.readSubBlocksBin(),\n            };\n            gif.applicationExtensions.push(applicationExtension);\n            break;\n        }\n        case GIFDataHeaders.CommentExtension: {\n            gif.comments.push([getFrameIndex(false), byteStream.readSubBlocks()]);\n            break;\n        }\n        case GIFDataHeaders.PlainTextExtension: {\n            if (gif.globalColorTable.length === 0) {\n                throw new EvalError(\"plain text extension without global color table\");\n            }\n            byteStream.pos++;\n            gif.frames[getFrameIndex(false)].plainTextData = {\n                left: byteStream.nextTwoBytes(),\n                top: byteStream.nextTwoBytes(),\n                width: byteStream.nextTwoBytes(),\n                height: byteStream.nextTwoBytes(),\n                charSize: {\n                    width: byteStream.nextTwoBytes(),\n                    height: byteStream.nextTwoBytes(),\n                },\n                foregroundColor: byteStream.nextByte(),\n                backgroundColor: byteStream.nextByte(),\n                text: byteStream.readSubBlocks(),\n            };\n            break;\n        }\n        default:\n            byteStream.skipSubBlocks();\n            break;\n    }\n}\nasync function parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    const frame = gif.frames[getFrameIndex(true)];\n    frame.left = byteStream.nextTwoBytes();\n    frame.top = byteStream.nextTwoBytes();\n    frame.width = byteStream.nextTwoBytes();\n    frame.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), localColorTableFlag = (packedByte & 0x80) === 0x80, interlacedFlag = (packedByte & 0x40) === 0x40;\n    frame.sortFlag = (packedByte & 0x20) === 0x20;\n    frame.reserved = (packedByte & 0x18) >>> 3;\n    const localColorCount = 1 << ((packedByte & 7) + 1);\n    if (localColorTableFlag) {\n        frame.localColorTable = parseColorTable(byteStream, localColorCount);\n    }\n    const getColor = (index) => {\n        const { r, g, b } = (localColorTableFlag ? frame.localColorTable : gif.globalColorTable)[index];\n        if (index !== getTransparencyIndex(null)) {\n            return { r, g, b, a: 255 };\n        }\n        return { r, g, b, a: avgAlpha ? ~~((r + g + b) / 3) : 0 };\n    };\n    const image = (() => {\n        try {\n            return new ImageData(frame.width, frame.height, { colorSpace: \"srgb\" });\n        }\n        catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (image == null) {\n        throw new EvalError(\"GIF frame size is to large\");\n    }\n    const minCodeSize = byteStream.nextByte(), imageData = byteStream.readSubBlocksBin(), clearCode = 1 << minCodeSize;\n    const readBits = (pos, len) => {\n        const bytePos = pos >>> 3, bitPos = pos & 7;\n        return (((imageData[bytePos] + (imageData[bytePos + 1] << 8) + (imageData[bytePos + 2] << 16)) &\n            (((1 << len) - 1) << bitPos)) >>>\n            bitPos);\n    };\n    if (interlacedFlag) {\n        for (let code = 0, size = minCodeSize + 1, pos = 0, dic = [[0]], pass = 0; pass < 4; pass++) {\n            if (InterlaceOffsets[pass] < frame.height) {\n                let pixelPos = 0, lineIndex = 0, exit = false;\n                while (!exit) {\n                    const last = code;\n                    code = readBits(pos, size);\n                    pos += size + 1;\n                    if (code === clearCode) {\n                        size = minCodeSize + 1;\n                        dic.length = clearCode + 2;\n                        for (let i = 0; i < dic.length; i++) {\n                            dic[i] = i < clearCode ? [i] : [];\n                        }\n                    }\n                    else {\n                        if (code >= dic.length) {\n                            dic.push(dic[last].concat(dic[last][0]));\n                        }\n                        else if (last !== clearCode) {\n                            dic.push(dic[last].concat(dic[code][0]));\n                        }\n                        for (const item of dic[code]) {\n                            const { r, g, b, a } = getColor(item);\n                            image.data.set([r, g, b, a], InterlaceOffsets[pass] * frame.width +\n                                InterlaceSteps[pass] * lineIndex +\n                                (pixelPos % (frame.width * 4)));\n                            pixelPos += 4;\n                        }\n                        if (dic.length === 1 << size && size < 0xc) {\n                            size++;\n                        }\n                    }\n                    if (pixelPos === frame.width * 4 * (lineIndex + 1)) {\n                        lineIndex++;\n                        if (InterlaceOffsets[pass] + InterlaceSteps[pass] * lineIndex >= frame.height) {\n                            exit = true;\n                        }\n                    }\n                }\n            }\n            progressCallback?.(byteStream.pos / (byteStream.data.length - 1), getFrameIndex(false) + 1, image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n    }\n    else {\n        let code = 0, size = minCodeSize + 1, pos = 0, pixelPos = -4, exit = false;\n        const dic = [[0]];\n        while (!exit) {\n            const last = code;\n            code = readBits(pos, size);\n            pos += size;\n            if (code === clearCode) {\n                size = minCodeSize + 1;\n                dic.length = clearCode + 2;\n                for (let i = 0; i < dic.length; i++) {\n                    dic[i] = i < clearCode ? [i] : [];\n                }\n            }\n            else {\n                if (code === clearCode + 1) {\n                    exit = true;\n                    break;\n                }\n                if (code >= dic.length) {\n                    dic.push(dic[last].concat(dic[last][0]));\n                }\n                else if (last !== clearCode) {\n                    dic.push(dic[last].concat(dic[code][0]));\n                }\n                for (const item of dic[code]) {\n                    const { r, g, b, a } = getColor(item);\n                    image.data.set([r, g, b, a], (pixelPos += 4));\n                }\n                if (dic.length >= 1 << size && size < 0xc) {\n                    size++;\n                }\n            }\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n        progressCallback?.((byteStream.pos + 1) / byteStream.data.length, getFrameIndex(false) + 1, frame.image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });\n    }\n}\nasync function parseBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    switch (byteStream.nextByte()) {\n        case GIFDataHeaders.EndOfFile:\n            return true;\n        case GIFDataHeaders.Image:\n            await parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback);\n            break;\n        case GIFDataHeaders.Extension:\n            parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex);\n            break;\n        default:\n            throw new EvalError(\"undefined block found\");\n    }\n    return false;\n}\nexport function getGIFLoopAmount(gif) {\n    for (const extension of gif.applicationExtensions) {\n        if (extension.identifier + extension.authenticationCode !== \"NETSCAPE2.0\") {\n            continue;\n        }\n        return extension.data[1] + (extension.data[2] << 8);\n    }\n    return NaN;\n}\nexport async function decodeGIF(gifURL, progressCallback, avgAlpha) {\n    if (!avgAlpha)\n        avgAlpha = false;\n    const res = await fetch(gifURL);\n    if (!res.ok && res.status === 404) {\n        throw new EvalError(\"file not found\");\n    }\n    const buffer = await res.arrayBuffer();\n    const gif = {\n        width: 0,\n        height: 0,\n        totalTime: 0,\n        colorRes: 0,\n        pixelAspectRatio: 0,\n        frames: [],\n        sortFlag: false,\n        globalColorTable: [],\n        backgroundImage: new ImageData(1, 1, { colorSpace: \"srgb\" }),\n        comments: [],\n        applicationExtensions: [],\n    }, byteStream = new ByteStream(new Uint8ClampedArray(buffer));\n    if (byteStream.getString(6) !== \"GIF89a\") {\n        throw new Error(\"not a supported GIF file\");\n    }\n    gif.width = byteStream.nextTwoBytes();\n    gif.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), globalColorTableFlag = (packedByte & 0x80) === 0x80;\n    gif.colorRes = (packedByte & 0x70) >>> 4;\n    gif.sortFlag = (packedByte & 8) === 8;\n    const globalColorCount = 1 << ((packedByte & 7) + 1), backgroundColorIndex = byteStream.nextByte();\n    gif.pixelAspectRatio = byteStream.nextByte();\n    if (gif.pixelAspectRatio !== 0) {\n        gif.pixelAspectRatio = (gif.pixelAspectRatio + 0xf) / 0x40;\n    }\n    if (globalColorTableFlag) {\n        gif.globalColorTable = parseColorTable(byteStream, globalColorCount);\n    }\n    const backgroundImage = (() => {\n        try {\n            return new ImageData(gif.width, gif.height, { colorSpace: \"srgb\" });\n        }\n        catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (backgroundImage == null) {\n        throw new Error(\"GIF frame size is to large\");\n    }\n    const { r, g, b } = gif.globalColorTable[backgroundColorIndex];\n    backgroundImage.data.set(globalColorTableFlag ? [r, g, b, 255] : [0, 0, 0, 0]);\n    for (let i = 4; i < backgroundImage.data.length; i *= 2) {\n        backgroundImage.data.copyWithin(i, 0, i);\n    }\n    gif.backgroundImage = backgroundImage;\n    let frameIndex = -1, incrementFrameIndex = true, transparencyIndex = -1;\n    const getframeIndex = (increment) => {\n        if (increment) {\n            incrementFrameIndex = true;\n        }\n        return frameIndex;\n    };\n    const getTransparencyIndex = (newValue) => {\n        if (newValue != null) {\n            transparencyIndex = newValue;\n        }\n        return transparencyIndex;\n    };\n    try {\n        do {\n            if (incrementFrameIndex) {\n                gif.frames.push({\n                    left: 0,\n                    top: 0,\n                    width: 0,\n                    height: 0,\n                    disposalMethod: DisposalMethod.Replace,\n                    image: new ImageData(1, 1, { colorSpace: \"srgb\" }),\n                    plainTextData: null,\n                    userInputDelayFlag: false,\n                    delayTime: 0,\n                    sortFlag: false,\n                    localColorTable: [],\n                    reserved: 0,\n                    GCreserved: 0,\n                });\n                frameIndex++;\n                transparencyIndex = -1;\n                incrementFrameIndex = false;\n            }\n        } while (!(await parseBlock(byteStream, gif, avgAlpha, getframeIndex, getTransparencyIndex, progressCallback)));\n        gif.frames.length--;\n        for (const frame of gif.frames) {\n            if (frame.userInputDelayFlag && frame.delayTime === 0) {\n                gif.totalTime = Infinity;\n                break;\n            }\n            gif.totalTime += frame.delayTime;\n        }\n        return gif;\n    }\n    catch (error) {\n        if (error instanceof EvalError) {\n            throw new Error(`error while parsing frame ${frameIndex} \"${error.message}\"`);\n        }\n        throw error;\n    }\n}\nexport function drawGif(data) {\n    const { context, radius, particle, delta } = data, image = particle.image;\n    if (!image?.gifData || !image.gif) {\n        return;\n    }\n    const offscreenCanvas = new OffscreenCanvas(image.gifData.width, image.gifData.height), offscreenContext = offscreenCanvas.getContext(\"2d\");\n    if (!offscreenContext) {\n        throw new Error(\"could not create offscreen canvas context\");\n    }\n    offscreenContext.imageSmoothingQuality = \"low\";\n    offscreenContext.imageSmoothingEnabled = false;\n    offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n    if (particle.gifLoopCount === undefined) {\n        particle.gifLoopCount = image.gifLoopCount ?? defaultLoopCount;\n    }\n    let frameIndex = particle.gifFrame ?? defaultFrame;\n    const pos = { x: -image.gifData.width * half, y: -image.gifData.height * half }, frame = image.gifData.frames[frameIndex];\n    if (particle.gifTime === undefined) {\n        particle.gifTime = initialTime;\n    }\n    if (!frame.bitmap) {\n        return;\n    }\n    context.scale(radius / image.gifData.width, radius / image.gifData.height);\n    switch (frame.disposalMethod) {\n        case DisposalMethod.UndefinedA:\n        case DisposalMethod.UndefinedB:\n        case DisposalMethod.UndefinedC:\n        case DisposalMethod.UndefinedD:\n        case DisposalMethod.Replace:\n            offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n            context.drawImage(offscreenCanvas, pos.x, pos.y);\n            offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n            break;\n        case DisposalMethod.Combine:\n            offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n            context.drawImage(offscreenCanvas, pos.x, pos.y);\n            break;\n        case DisposalMethod.RestoreBackground:\n            offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n            context.drawImage(offscreenCanvas, pos.x, pos.y);\n            offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n            if (!image.gifData.globalColorTable.length) {\n                offscreenContext.putImageData(image.gifData.frames[firstIndex].image, pos.x + frame.left, pos.y + frame.top);\n            }\n            else {\n                offscreenContext.putImageData(image.gifData.backgroundImage, pos.x, pos.y);\n            }\n            break;\n        case DisposalMethod.RestorePrevious:\n            {\n                const previousImageData = offscreenContext.getImageData(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n                offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                context.drawImage(offscreenCanvas, pos.x, pos.y);\n                offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n                offscreenContext.putImageData(previousImageData, origin.x, origin.y);\n            }\n            break;\n    }\n    particle.gifTime += delta.value;\n    if (particle.gifTime > frame.delayTime) {\n        particle.gifTime -= frame.delayTime;\n        if (++frameIndex >= image.gifData.frames.length) {\n            if (--particle.gifLoopCount <= defaultLoopCount) {\n                return;\n            }\n            frameIndex = firstIndex;\n            offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n        }\n        particle.gifFrame = frameIndex;\n    }\n    context.scale(image.gifData.width / radius, image.gifData.height / radius);\n}\nexport async function loadGifImage(image) {\n    if (image.type !== \"gif\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    try {\n        image.gifData = await decodeGIF(image.source);\n        image.gifLoopCount = getGIFLoopAmount(image.gifData) ?? defaultLoopCount;\n        if (!image.gifLoopCount) {\n            image.gifLoopCount = Infinity;\n        }\n    }\n    catch {\n        image.error = true;\n    }\n    image.loading = false;\n}\n", "import { errorPrefix } from \"@tsparticles/engine\";\nimport { replaceImageColor } from \"./Utils.js\";\nimport { drawGif } from \"./GifUtils/Utils.js\";\nconst double = 2, defaultAlpha = 1, sides = 12, defaultRatio = 1;\nexport class ImageDrawer {\n    constructor(engine) {\n        this.validTypes = [\"image\", \"images\"];\n        this.loadImageShape = async (imageShape) => {\n            if (!this._engine.loadImage) {\n                throw new Error(`${errorPrefix} image shape not initialized`);\n            }\n            await this._engine.loadImage({\n                gif: imageShape.gif,\n                name: imageShape.name,\n                replaceColor: imageShape.replaceColor ?? false,\n                src: imageShape.src,\n            });\n        };\n        this._engine = engine;\n    }\n    addImage(image) {\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        this._engine.images.push(image);\n    }\n    draw(data) {\n        const { context, radius, particle, opacity } = data, image = particle.image, element = image?.element;\n        if (!image) {\n            return;\n        }\n        context.globalAlpha = opacity;\n        if (image.gif && image.gifData) {\n            drawGif(data);\n        }\n        else if (element) {\n            const ratio = image.ratio, pos = {\n                x: -radius,\n                y: -radius,\n            }, diameter = radius * double;\n            context.drawImage(element, pos.x, pos.y, diameter, diameter / ratio);\n        }\n        context.globalAlpha = defaultAlpha;\n    }\n    getSidesCount() {\n        return sides;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (!options.preload || !this._engine.loadImage) {\n            return;\n        }\n        for (const imageData of options.preload) {\n            await this._engine.loadImage(imageData);\n        }\n    }\n    loadShape(particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const imageData = particle.shapeData;\n        if (!imageData) {\n            return;\n        }\n        const image = this._engine.images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            void this.loadImageShape(imageData).then(() => {\n                this.loadShape(particle);\n            });\n        }\n    }\n    particleInit(container, particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const images = this._engine.images, imageData = particle.shapeData;\n        if (!imageData) {\n            return;\n        }\n        const color = particle.getFillColor(), image = images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            return;\n        }\n        const replaceColor = imageData.replaceColor ?? image.replaceColor;\n        if (image.loading) {\n            setTimeout(() => {\n                this.particleInit(container, particle);\n            });\n            return;\n        }\n        void (async () => {\n            let imageRes;\n            if (image.svgData && color) {\n                imageRes = await replaceImageColor(image, imageData, color, particle);\n            }\n            else {\n                imageRes = {\n                    color,\n                    data: image,\n                    element: image.element,\n                    gif: image.gif,\n                    gifData: image.gifData,\n                    gifLoopCount: image.gifLoopCount,\n                    loaded: true,\n                    ratio: imageData.width && imageData.height\n                        ? imageData.width / imageData.height\n                        : (image.ratio ?? defaultRatio),\n                    replaceColor: replaceColor,\n                    source: imageData.src,\n                };\n            }\n            if (!imageRes.ratio) {\n                imageRes.ratio = 1;\n            }\n            const fill = imageData.fill ?? particle.shapeFill, close = imageData.close ?? particle.shapeClose, imageShape = {\n                image: imageRes,\n                fill,\n                close,\n            };\n            particle.image = imageShape.image;\n            particle.shapeFill = imageShape.fill;\n            particle.shapeClose = imageShape.close;\n        })();\n    }\n}\n", "import { isNull } from \"@tsparticles/engine\";\nexport class Preload {\n    constructor() {\n        this.src = \"\";\n        this.gif = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.gif !== undefined) {\n            this.gif = data.gif;\n        }\n        if (data.height !== undefined) {\n            this.height = data.height;\n        }\n        if (data.name !== undefined) {\n            this.name = data.name;\n        }\n        if (data.replaceColor !== undefined) {\n            this.replaceColor = data.replaceColor;\n        }\n        if (data.src !== undefined) {\n            this.src = data.src;\n        }\n        if (data.width !== undefined) {\n            this.width = data.width;\n        }\n    }\n}\n", "import { Preload } from \"./Options/Classes/Preload.js\";\nexport class ImagePreloaderPlugin {\n    constructor(engine) {\n        this.id = \"imagePreloader\";\n        this._engine = engine;\n    }\n    async getPlugin() {\n        await Promise.resolve();\n        return {};\n    }\n    loadOptions(options, source) {\n        if (!source?.preload) {\n            return;\n        }\n        if (!options.preload) {\n            options.preload = [];\n        }\n        const preloadOptions = options.preload;\n        for (const item of source.preload) {\n            const existing = preloadOptions.find(t => t.name === item.name || t.src === item.src);\n            if (existing) {\n                existing.load(item);\n            }\n            else {\n                const preload = new Preload();\n                preload.load(item);\n                preloadOptions.push(preload);\n            }\n        }\n    }\n    needsPlugin() {\n        return true;\n    }\n}\n", "import { downloadSvgImage, loadImage } from \"./Utils.js\";\nimport { ImageDrawer } from \"./ImageDrawer.js\";\nimport { ImagePreloaderPlugin } from \"./ImagePreloader.js\";\nimport { errorPrefix } from \"@tsparticles/engine\";\nimport { loadGifImage } from \"./GifUtils/Utils.js\";\nconst extLength = 3;\nfunction addLoadImageToEngine(engine) {\n    if (engine.loadImage) {\n        return;\n    }\n    engine.loadImage = async (data) => {\n        if (!data.name && !data.src) {\n            throw new Error(`${errorPrefix} no image source provided`);\n        }\n        if (!engine.images) {\n            engine.images = [];\n        }\n        if (engine.images.find((t) => t.name === data.name || t.source === data.src)) {\n            return;\n        }\n        try {\n            const image = {\n                gif: data.gif ?? false,\n                name: data.name ?? data.src,\n                source: data.src,\n                type: data.src.substring(data.src.length - extLength),\n                error: false,\n                loading: true,\n                replaceColor: data.replaceColor,\n                ratio: data.width && data.height ? data.width / data.height : undefined,\n            };\n            engine.images.push(image);\n            let imageFunc;\n            if (data.gif) {\n                imageFunc = loadGifImage;\n            }\n            else {\n                imageFunc = data.replaceColor ? downloadSvgImage : loadImage;\n            }\n            await imageFunc(image);\n        }\n        catch {\n            throw new Error(`${errorPrefix} ${data.name ?? data.src} not found`);\n        }\n    };\n}\nexport async function loadImageShape(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    addLoadImageToEngine(engine);\n    const preloader = new ImagePreloaderPlugin(engine);\n    await engine.addPlugin(preloader, refresh);\n    await engine.addShape(new ImageDrawer(engine), refresh);\n}\n", "import { ValueWithRandom, isNull } from \"@tsparticles/engine\";\nexport class LifeDelay extends ValueWithRandom {\n    constructor() {\n        super();\n        this.sync = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        super.load(data);\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n", "import { ValueWithRandom, isNull } from \"@tsparticles/engine\";\nexport class LifeDuration extends ValueWithRandom {\n    constructor() {\n        super();\n        this.sync = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        super.load(data);\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n", "import { isNull } from \"@tsparticles/engine\";\nimport { LifeDelay } from \"./LifeDelay.js\";\nimport { LifeDuration } from \"./LifeDuration.js\";\nexport class Life {\n    constructor() {\n        this.count = 0;\n        this.delay = new LifeDelay();\n        this.duration = new LifeDuration();\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        this.delay.load(data.delay);\n        this.duration.load(data.duration);\n    }\n}\n", "import { getRangeValue, millisecondsToSeconds, randomInRange, setRangeValue, } from \"@tsparticles/engine\";\nconst noTime = 0, infiniteValue = -1, noLife = 0, minCanvasSize = 0;\nexport function updateLife(particle, delta, canvasSize) {\n    if (!particle.life) {\n        return;\n    }\n    const life = particle.life;\n    let justSpawned = false;\n    if (particle.spawning) {\n        life.delayTime += delta.value;\n        if (life.delayTime >= particle.life.delay) {\n            justSpawned = true;\n            particle.spawning = false;\n            life.delayTime = noTime;\n            life.time = noTime;\n        }\n        else {\n            return;\n        }\n    }\n    if (life.duration === infiniteValue) {\n        return;\n    }\n    if (particle.spawning) {\n        return;\n    }\n    if (justSpawned) {\n        life.time = noTime;\n    }\n    else {\n        life.time += delta.value;\n    }\n    if (life.time < life.duration) {\n        return;\n    }\n    life.time = noTime;\n    if (particle.life.count > noLife) {\n        particle.life.count--;\n    }\n    if (particle.life.count === noLife) {\n        particle.destroy();\n        return;\n    }\n    const widthRange = setRangeValue(minCanvasSize, canvasSize.width), heightRange = setRangeValue(minCanvasSize, canvasSize.width);\n    particle.position.x = randomInRange(widthRange);\n    particle.position.y = randomInRange(heightRange);\n    particle.spawning = true;\n    life.delayTime = noTime;\n    life.time = noTime;\n    particle.reset();\n    const lifeOptions = particle.options.life;\n    if (lifeOptions) {\n        life.delay = getRangeValue(lifeOptions.delay.value) * millisecondsToSeconds;\n        life.duration = getRangeValue(lifeOptions.duration.value) * millisecondsToSeconds;\n    }\n}\n", "import { getRandom, getRangeValue, millisecondsToSeconds, } from \"@tsparticles/engine\";\nimport { Life } from \"./Options/Classes/Life.js\";\nimport { updateLife } from \"./Utils.js\";\nconst noTime = 0, identity = 1, infiniteValue = -1;\nexport class LifeUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const container = this.container, particlesOptions = particle.options, lifeOptions = particlesOptions.life;\n        if (!lifeOptions) {\n            return;\n        }\n        particle.life = {\n            delay: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? identity : getRandom())) /\n                    container.retina.reduceFactor) *\n                    millisecondsToSeconds\n                : noTime,\n            delayTime: noTime,\n            duration: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? identity : getRandom())) /\n                    container.retina.reduceFactor) *\n                    millisecondsToSeconds\n                : noTime,\n            time: noTime,\n            count: lifeOptions.count,\n        };\n        if (particle.life.duration <= noTime) {\n            particle.life.duration = infiniteValue;\n        }\n        if (particle.life.count <= noTime) {\n            particle.life.count = infiniteValue;\n        }\n        if (particle.life) {\n            particle.spawning = particle.life.delay > noTime;\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.life) {\n            options.life = new Life();\n        }\n        for (const source of sources) {\n            options.life.load(source?.life);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle) || !particle.life) {\n            return;\n        }\n        updateLife(particle, delta, this.container.canvas.size);\n    }\n}\n", "import { LifeUpdater } from \"./LifeUpdater.js\";\nexport async function loadLifeUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"life\", async (container) => {\n        return Promise.resolve(new LifeUpdater(container));\n    }, refresh);\n}\n", "export function drawLine(data) {\n    const { context, particle, radius } = data, shapeData = particle.shapeData, centerY = 0;\n    context.moveTo(-radius, centerY);\n    context.lineTo(radius, centerY);\n    context.lineCap = shapeData?.cap ?? \"butt\";\n}\n", "import { drawLine } from \"./Utils.js\";\nconst sides = 1;\nexport class LineDrawer {\n    constructor() {\n        this.validTypes = [\"line\"];\n    }\n    draw(data) {\n        drawLine(data);\n    }\n    getSidesCount() {\n        return sides;\n    }\n}\n", "import { LineDrawer } from \"./LineDrawer.js\";\nexport async function loadLineShape(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addShape(new LineDrawer(), refresh);\n}\n", "import { isSsr } from \"@tsparticles/engine\";\nconst half = 0.5;\nexport class ParallaxMover {\n    init() {\n    }\n    isEnabled(particle) {\n        return (!isSsr() &&\n            !particle.destroyed &&\n            particle.container.actualOptions.interactivity.events.onHover.parallax.enable);\n    }\n    move(particle) {\n        const container = particle.container, options = container.actualOptions, parallaxOptions = options.interactivity.events.onHover.parallax;\n        if (isSsr() || !parallaxOptions.enable) {\n            return;\n        }\n        const parallaxForce = parallaxOptions.force, mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const canvasSize = container.canvas.size, canvasCenter = {\n            x: canvasSize.width * half,\n            y: canvasSize.height * half,\n        }, parallaxSmooth = parallaxOptions.smooth, factor = particle.getRadius() / parallaxForce, centerDistance = {\n            x: (mousePos.x - canvasCenter.x) * factor,\n            y: (mousePos.y - canvasCenter.y) * factor,\n        }, { offset } = particle;\n        offset.x += (centerDistance.x - offset.x) / parallaxSmooth;\n        offset.y += (centerDistance.y - offset.y) / parallaxSmooth;\n    }\n}\n", "import { ParallaxMover } from \"./ParallaxMover.js\";\nexport async function loadParallaxMover(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addMover(\"parallax\", () => {\n        return Promise.resolve(new ParallaxMover());\n    }, refresh);\n}\n", "import { ParticlesInteractorBase, getDistances, getRangeValue, } from \"@tsparticles/engine\";\nconst attractFactor = 1000, identity = 1;\nexport class Attractor extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n    }\n    interact(p1) {\n        const container = this.container;\n        if (p1.attractDistance === undefined) {\n            p1.attractDistance = getRangeValue(p1.options.move.attract.distance) * container.retina.pixelRatio;\n        }\n        const distance = p1.attractDistance, pos1 = p1.getPosition(), query = container.particles.quadTree.queryCircle(pos1, distance);\n        for (const p2 of query) {\n            if (p1 === p2 || !p2.options.move.attract.enable || p2.destroyed || p2.spawning) {\n                continue;\n            }\n            const pos2 = p2.getPosition(), { dx, dy } = getDistances(pos1, pos2), rotate = p1.options.move.attract.rotate, ax = dx / (rotate.x * attractFactor), ay = dy / (rotate.y * attractFactor), p1Factor = p2.size.value / p1.size.value, p2Factor = identity / p1Factor;\n            p1.velocity.x -= ax * p1Factor;\n            p1.velocity.y -= ay * p1Factor;\n            p2.velocity.x += ax * p2Factor;\n            p2.velocity.y += ay * p2Factor;\n        }\n    }\n    isEnabled(particle) {\n        return particle.options.move.attract.enable;\n    }\n    reset() {\n    }\n}\n", "import { Attractor } from \"./Attractor.js\";\nexport async function loadParticlesAttractInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"particlesAttract\", container => {\n        return Promise.resolve(new Attractor(container));\n    }, refresh);\n}\n", "import { clamp } from \"@tsparticles/engine\";\nconst half = 0.5, absorbFactor = 10, minAbsorbFactor = 0;\nfunction updateAbsorb(p1, r1, p2, r2, delta, pixelRatio) {\n    const factor = clamp((p1.options.collisions.absorb.speed * delta.factor) / absorbFactor, minAbsorbFactor, r2);\n    p1.size.value += factor * half;\n    p2.size.value -= factor;\n    if (r2 <= pixelRatio) {\n        p2.size.value = 0;\n        p2.destroy();\n    }\n}\nexport function absorb(p1, p2, delta, pixelRatio) {\n    const r1 = p1.getRadius(), r2 = p2.getRadius();\n    if (r1 === undefined && r2 !== undefined) {\n        p1.destroy();\n    }\n    else if (r1 !== undefined && r2 === undefined) {\n        p2.destroy();\n    }\n    else if (r1 !== undefined && r2 !== undefined) {\n        if (r1 >= r2) {\n            updateAbsorb(p1, r1, p2, r2, delta, pixelRatio);\n        }\n        else {\n            updateAbsorb(p2, r2, p1, r1, delta, pixelRatio);\n        }\n    }\n}\n", "import { circleBounce, circleBounceDataFromParticle, getRangeValue } from \"@tsparticles/engine\";\nconst fixBounceSpeed = (p) => {\n    if (p.collisionMaxSpeed === undefined) {\n        p.collisionMaxSpeed = getRangeValue(p.options.collisions.maxSpeed);\n    }\n    if (p.velocity.length > p.collisionMaxSpeed) {\n        p.velocity.length = p.collisionMaxSpeed;\n    }\n};\nexport function bounce(p1, p2) {\n    circleBounce(circleBounceDataFromParticle(p1), circleBounceDataFromParticle(p2));\n    fixBounceSpeed(p1);\n    fixBounceSpeed(p2);\n}\n", "import { bounce } from \"./Bounce.js\";\nexport function destroy(p1, p2) {\n    if (!p1.unbreakable && !p2.unbreakable) {\n        bounce(p1, p2);\n    }\n    if (p1.getRadius() === undefined && p2.getRadius() !== undefined) {\n        p1.destroy();\n    }\n    else if (p1.getRadius() !== undefined && p2.getRadius() === undefined) {\n        p2.destroy();\n    }\n    else if (p1.getRadius() !== undefined && p2.getRadius() !== undefined) {\n        const deleteP = p1.getRadius() >= p2.getRadius() ? p2 : p1;\n        deleteP.destroy();\n    }\n}\n", "import { CollisionMode } from \"@tsparticles/engine\";\nimport { absorb } from \"./Absorb.js\";\nimport { bounce } from \"./Bounce.js\";\nimport { destroy } from \"./Destroy.js\";\nexport function resolveCollision(p1, p2, delta, pixelRatio) {\n    switch (p1.options.collisions.mode) {\n        case CollisionMode.absorb: {\n            absorb(p1, p2, delta, pixelRatio);\n            break;\n        }\n        case CollisionMode.bounce: {\n            bounce(p1, p2);\n            break;\n        }\n        case CollisionMode.destroy: {\n            destroy(p1, p2);\n            break;\n        }\n    }\n}\n", "import { ParticlesInteractorBase, getDistance } from \"@tsparticles/engine\";\nimport { resolveCollision } from \"./ResolveCollision.js\";\nconst double = 2;\nexport class Collider extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n    }\n    interact(p1, delta) {\n        if (p1.destroyed || p1.spawning) {\n            return;\n        }\n        const container = this.container, pos1 = p1.getPosition(), radius1 = p1.getRadius(), query = container.particles.quadTree.queryCircle(pos1, radius1 * double);\n        for (const p2 of query) {\n            if (p1 === p2 ||\n                !p2.options.collisions.enable ||\n                p1.options.collisions.mode !== p2.options.collisions.mode ||\n                p2.destroyed ||\n                p2.spawning) {\n                continue;\n            }\n            const pos2 = p2.getPosition(), radius2 = p2.getRadius();\n            if (Math.abs(Math.round(pos1.z) - Math.round(pos2.z)) > radius1 + radius2) {\n                continue;\n            }\n            const dist = getDistance(pos1, pos2), distP = radius1 + radius2;\n            if (dist > distP) {\n                continue;\n            }\n            resolveCollision(p1, p2, delta, container.retina.pixelRatio);\n        }\n    }\n    isEnabled(particle) {\n        return particle.options.collisions.enable;\n    }\n    reset() {\n    }\n}\n", "import { Collider } from \"./Collider.js\";\nexport async function loadParticlesCollisionsInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"particlesCollisions\", container => {\n        return Promise.resolve(new Collider(container));\n    }, refresh);\n}\n", "import { Circle, Rectangle } from \"@tsparticles/engine\";\nconst double = 2;\nexport class CircleWarp extends Circle {\n    constructor(x, y, radius, canvasSize) {\n        super(x, y, radius);\n        this.canvasSize = canvasSize;\n        this.canvasSize = { ...canvasSize };\n    }\n    contains(point) {\n        const { width, height } = this.canvasSize, { x, y } = point;\n        return (super.contains(point) ||\n            super.contains({ x: x - width, y }) ||\n            super.contains({ x: x - width, y: y - height }) ||\n            super.contains({ x, y: y - height }));\n    }\n    intersects(range) {\n        if (super.intersects(range)) {\n            return true;\n        }\n        const rect = range, circle = range, newPos = {\n            x: range.position.x - this.canvasSize.width,\n            y: range.position.y - this.canvasSize.height,\n        };\n        if (circle.radius !== undefined) {\n            const biggerCircle = new Circle(newPos.x, newPos.y, circle.radius * double);\n            return super.intersects(biggerCircle);\n        }\n        else if (rect.size !== undefined) {\n            const rectSW = new Rectangle(newPos.x, newPos.y, rect.size.width * double, rect.size.height * double);\n            return super.intersects(rectSW);\n        }\n        return false;\n    }\n}\n", "import { OptionsColor, isNull } from \"@tsparticles/engine\";\nexport class LinksShadow {\n    constructor() {\n        this.blur = 5;\n        this.color = new OptionsColor();\n        this.color.value = \"#000\";\n        this.enable = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.blur !== undefined) {\n            this.blur = data.blur;\n        }\n        this.color = OptionsColor.create(this.color, data.color);\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n    }\n}\n", "import { OptionsColor, isNull } from \"@tsparticles/engine\";\nexport class LinksTriangle {\n    constructor() {\n        this.enable = false;\n        this.frequency = 1;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.frequency !== undefined) {\n            this.frequency = data.frequency;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n", "import { OptionsColor, isNull } from \"@tsparticles/engine\";\nimport { LinksShadow } from \"./LinksShadow.js\";\nimport { LinksTriangle } from \"./LinksTriangle.js\";\nexport class Links {\n    constructor() {\n        this.blink = false;\n        this.color = new OptionsColor();\n        this.color.value = \"#fff\";\n        this.consent = false;\n        this.distance = 100;\n        this.enable = false;\n        this.frequency = 1;\n        this.opacity = 1;\n        this.shadow = new LinksShadow();\n        this.triangles = new LinksTriangle();\n        this.width = 1;\n        this.warp = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.id !== undefined) {\n            this.id = data.id;\n        }\n        if (data.blink !== undefined) {\n            this.blink = data.blink;\n        }\n        this.color = OptionsColor.create(this.color, data.color);\n        if (data.consent !== undefined) {\n            this.consent = data.consent;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.frequency !== undefined) {\n            this.frequency = data.frequency;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n        this.shadow.load(data.shadow);\n        this.triangles.load(data.triangles);\n        if (data.width !== undefined) {\n            this.width = data.width;\n        }\n        if (data.warp !== undefined) {\n            this.warp = data.warp;\n        }\n    }\n}\n", "import { Circle, ParticlesInteractorBase, getDistances, getLinkRandomColor, } from \"@tsparticles/engine\";\nimport { CircleWarp } from \"./CircleWarp.js\";\nimport { Links } from \"./Options/Classes/Links.js\";\nconst squarePower = 2, opacityOffset = 1, origin = {\n    x: 0,\n    y: 0,\n}, minDistance = 0;\nfunction getLinkDistance(pos1, pos2, optDistance, canvasSize, warp) {\n    const { dx, dy, distance } = getDistances(pos1, pos2);\n    if (!warp || distance <= optDistance) {\n        return distance;\n    }\n    const absDiffs = {\n        x: Math.abs(dx),\n        y: Math.abs(dy),\n    }, warpDistances = {\n        x: Math.min(absDiffs.x, canvasSize.width - absDiffs.x),\n        y: Math.min(absDiffs.y, canvasSize.height - absDiffs.y),\n    };\n    return Math.sqrt(warpDistances.x ** squarePower + warpDistances.y ** squarePower);\n}\nexport class Linker extends ParticlesInteractorBase {\n    constructor(container, engine) {\n        super(container);\n        this._setColor = p1 => {\n            if (!p1.options.links) {\n                return;\n            }\n            const container = this._linkContainer, linksOptions = p1.options.links;\n            let linkColor = linksOptions.id === undefined\n                ? container.particles.linksColor\n                : container.particles.linksColors.get(linksOptions.id);\n            if (linkColor) {\n                return;\n            }\n            const optColor = linksOptions.color;\n            linkColor = getLinkRandomColor(this._engine, optColor, linksOptions.blink, linksOptions.consent);\n            if (linksOptions.id === undefined) {\n                container.particles.linksColor = linkColor;\n            }\n            else {\n                container.particles.linksColors.set(linksOptions.id, linkColor);\n            }\n        };\n        this._linkContainer = container;\n        this._engine = engine;\n    }\n    clear() {\n    }\n    init() {\n        this._linkContainer.particles.linksColor = undefined;\n        this._linkContainer.particles.linksColors = new Map();\n    }\n    interact(p1) {\n        if (!p1.options.links) {\n            return;\n        }\n        p1.links = [];\n        const pos1 = p1.getPosition(), container = this.container, canvasSize = container.canvas.size;\n        if (pos1.x < origin.x || pos1.y < origin.y || pos1.x > canvasSize.width || pos1.y > canvasSize.height) {\n            return;\n        }\n        const linkOpt1 = p1.options.links, optOpacity = linkOpt1.opacity, optDistance = p1.retina.linksDistance ?? minDistance, warp = linkOpt1.warp;\n        let range;\n        if (warp) {\n            range = new CircleWarp(pos1.x, pos1.y, optDistance, canvasSize);\n        }\n        else {\n            range = new Circle(pos1.x, pos1.y, optDistance);\n        }\n        const query = container.particles.quadTree.query(range);\n        for (const p2 of query) {\n            const linkOpt2 = p2.options.links;\n            if (p1 === p2 ||\n                !linkOpt2?.enable ||\n                linkOpt1.id !== linkOpt2.id ||\n                p2.spawning ||\n                p2.destroyed ||\n                !p2.links ||\n                p1.links.some(t => t.destination === p2) ||\n                p2.links.some(t => t.destination === p1)) {\n                continue;\n            }\n            const pos2 = p2.getPosition();\n            if (pos2.x < origin.x || pos2.y < origin.y || pos2.x > canvasSize.width || pos2.y > canvasSize.height) {\n                continue;\n            }\n            const distance = getLinkDistance(pos1, pos2, optDistance, canvasSize, warp && linkOpt2.warp);\n            if (distance > optDistance) {\n                continue;\n            }\n            const opacityLine = (opacityOffset - distance / optDistance) * optOpacity;\n            this._setColor(p1);\n            p1.links.push({\n                destination: p2,\n                opacity: opacityLine,\n            });\n        }\n    }\n    isEnabled(particle) {\n        return !!particle.options.links?.enable;\n    }\n    loadParticlesOptions(options, ...sources) {\n        if (!options.links) {\n            options.links = new Links();\n        }\n        for (const source of sources) {\n            options.links.load(source?.links);\n        }\n    }\n    reset() {\n    }\n}\n", "import { Linker } from \"./Linker.js\";\nexport async function loadLinksInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"particlesLinks\", async (container) => {\n        return Promise.resolve(new Linker(container, engine));\n    }, refresh);\n}\n", "import { drawLine, getDistance, getDistances, getRandom, getStyleFromRgb, rangeColorToRgb, } from \"@tsparticles/engine\";\nexport function drawTriangle(context, p1, p2, p3) {\n    context.beginPath();\n    context.moveTo(p1.x, p1.y);\n    context.lineTo(p2.x, p2.y);\n    context.lineTo(p3.x, p3.y);\n    context.closePath();\n}\nexport function drawLinkLine(params) {\n    let drawn = false;\n    const { begin, end, engine, maxDistance, context, canvasSize, width, backgroundMask, colorLine, opacity, links } = params;\n    if (getDistance(begin, end) <= maxDistance) {\n        drawLine(context, begin, end);\n        drawn = true;\n    }\n    else if (links.warp) {\n        let pi1;\n        let pi2;\n        const endNE = {\n            x: end.x - canvasSize.width,\n            y: end.y,\n        };\n        const d1 = getDistances(begin, endNE);\n        if (d1.distance <= maxDistance) {\n            const yi = begin.y - (d1.dy / d1.dx) * begin.x;\n            pi1 = { x: 0, y: yi };\n            pi2 = { x: canvasSize.width, y: yi };\n        }\n        else {\n            const endSW = {\n                x: end.x,\n                y: end.y - canvasSize.height,\n            };\n            const d2 = getDistances(begin, endSW);\n            if (d2.distance <= maxDistance) {\n                const yi = begin.y - (d2.dy / d2.dx) * begin.x;\n                const xi = -yi / (d2.dy / d2.dx);\n                pi1 = { x: xi, y: 0 };\n                pi2 = { x: xi, y: canvasSize.height };\n            }\n            else {\n                const endSE = {\n                    x: end.x - canvasSize.width,\n                    y: end.y - canvasSize.height,\n                };\n                const d3 = getDistances(begin, endSE);\n                if (d3.distance <= maxDistance) {\n                    const yi = begin.y - (d3.dy / d3.dx) * begin.x;\n                    const xi = -yi / (d3.dy / d3.dx);\n                    pi1 = { x: xi, y: yi };\n                    pi2 = { x: pi1.x + canvasSize.width, y: pi1.y + canvasSize.height };\n                }\n            }\n        }\n        if (pi1 && pi2) {\n            drawLine(context, begin, pi1);\n            drawLine(context, end, pi2);\n            drawn = true;\n        }\n    }\n    if (!drawn) {\n        return;\n    }\n    context.lineWidth = width;\n    if (backgroundMask.enable) {\n        context.globalCompositeOperation = backgroundMask.composite;\n    }\n    context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n    const { shadow } = links;\n    if (shadow.enable) {\n        const shadowColor = rangeColorToRgb(engine, shadow.color);\n        if (shadowColor) {\n            context.shadowBlur = shadow.blur;\n            context.shadowColor = getStyleFromRgb(shadowColor);\n        }\n    }\n    context.stroke();\n}\nexport function drawLinkTriangle(params) {\n    const { context, pos1, pos2, pos3, backgroundMask, colorTriangle, opacityTriangle } = params;\n    drawTriangle(context, pos1, pos2, pos3);\n    if (backgroundMask.enable) {\n        context.globalCompositeOperation = backgroundMask.composite;\n    }\n    context.fillStyle = getStyleFromRgb(colorTriangle, opacityTriangle);\n    context.fill();\n}\nexport function getLinkKey(ids) {\n    ids.sort((a, b) => a - b);\n    return ids.join(\"_\");\n}\nexport function setLinkFrequency(particles, dictionary) {\n    const key = getLinkKey(particles.map(t => t.id));\n    let res = dictionary.get(key);\n    if (res === undefined) {\n        res = getRandom();\n        dictionary.set(key, res);\n    }\n    return res;\n}\n", "import { getDistance, getLinkColor, getRandom, getRangeValue, rangeColorToRgb, } from \"@tsparticles/engine\";\nimport { drawLinkLine, drawLinkTriangle, setLinkFrequency } from \"./Utils.js\";\nconst minOpacity = 0, minWidth = 0, minDistance = 0, half = 0.5, maxFrequency = 1;\nexport class LinkInstance {\n    constructor(container, engine) {\n        this._drawLinkLine = (p1, link) => {\n            const p1LinksOptions = p1.options.links;\n            if (!p1LinksOptions?.enable) {\n                return;\n            }\n            const container = this._container, options = container.actualOptions, p2 = link.destination, pos1 = p1.getPosition(), pos2 = p2.getPosition();\n            let opacity = link.opacity;\n            container.canvas.draw(ctx => {\n                let colorLine;\n                const twinkle = p1.options.twinkle?.lines;\n                if (twinkle?.enable) {\n                    const twinkleFreq = twinkle.frequency, twinkleRgb = rangeColorToRgb(this._engine, twinkle.color), twinkling = getRandom() < twinkleFreq;\n                    if (twinkling && twinkleRgb) {\n                        colorLine = twinkleRgb;\n                        opacity = getRangeValue(twinkle.opacity);\n                    }\n                }\n                if (!colorLine) {\n                    const linkColor = p1LinksOptions.id !== undefined\n                        ? container.particles.linksColors.get(p1LinksOptions.id)\n                        : container.particles.linksColor;\n                    colorLine = getLinkColor(p1, p2, linkColor);\n                }\n                if (!colorLine) {\n                    return;\n                }\n                const width = p1.retina.linksWidth ?? minWidth, maxDistance = p1.retina.linksDistance ?? minDistance, { backgroundMask } = options;\n                drawLinkLine({\n                    context: ctx,\n                    width,\n                    begin: pos1,\n                    end: pos2,\n                    engine: this._engine,\n                    maxDistance,\n                    canvasSize: container.canvas.size,\n                    links: p1LinksOptions,\n                    backgroundMask: backgroundMask,\n                    colorLine,\n                    opacity,\n                });\n            });\n        };\n        this._drawLinkTriangle = (p1, link1, link2) => {\n            const linksOptions = p1.options.links;\n            if (!linksOptions?.enable) {\n                return;\n            }\n            const triangleOptions = linksOptions.triangles;\n            if (!triangleOptions.enable) {\n                return;\n            }\n            const container = this._container, options = container.actualOptions, p2 = link1.destination, p3 = link2.destination, opacityTriangle = triangleOptions.opacity ?? (link1.opacity + link2.opacity) * half;\n            if (opacityTriangle <= minOpacity) {\n                return;\n            }\n            container.canvas.draw(ctx => {\n                const pos1 = p1.getPosition(), pos2 = p2.getPosition(), pos3 = p3.getPosition(), linksDistance = p1.retina.linksDistance ?? minDistance;\n                if (getDistance(pos1, pos2) > linksDistance ||\n                    getDistance(pos3, pos2) > linksDistance ||\n                    getDistance(pos3, pos1) > linksDistance) {\n                    return;\n                }\n                let colorTriangle = rangeColorToRgb(this._engine, triangleOptions.color);\n                if (!colorTriangle) {\n                    const linkColor = linksOptions.id !== undefined\n                        ? container.particles.linksColors.get(linksOptions.id)\n                        : container.particles.linksColor;\n                    colorTriangle = getLinkColor(p1, p2, linkColor);\n                }\n                if (!colorTriangle) {\n                    return;\n                }\n                drawLinkTriangle({\n                    context: ctx,\n                    pos1,\n                    pos2,\n                    pos3,\n                    backgroundMask: options.backgroundMask,\n                    colorTriangle,\n                    opacityTriangle,\n                });\n            });\n        };\n        this._drawTriangles = (options, p1, link, p1Links) => {\n            const p2 = link.destination;\n            if (!(options.links?.triangles.enable && p2.options.links?.triangles.enable)) {\n                return;\n            }\n            const vertices = p2.links?.filter(t => {\n                const linkFreq = this._getLinkFrequency(p2, t.destination), minCount = 0;\n                return (p2.options.links &&\n                    linkFreq <= p2.options.links.frequency &&\n                    p1Links.findIndex(l => l.destination === t.destination) >= minCount);\n            });\n            if (!vertices?.length) {\n                return;\n            }\n            for (const vertex of vertices) {\n                const p3 = vertex.destination, triangleFreq = this._getTriangleFrequency(p1, p2, p3);\n                if (triangleFreq > options.links.triangles.frequency) {\n                    continue;\n                }\n                this._drawLinkTriangle(p1, link, vertex);\n            }\n        };\n        this._getLinkFrequency = (p1, p2) => {\n            return setLinkFrequency([p1, p2], this._freqs.links);\n        };\n        this._getTriangleFrequency = (p1, p2, p3) => {\n            return setLinkFrequency([p1, p2, p3], this._freqs.triangles);\n        };\n        this._container = container;\n        this._engine = engine;\n        this._freqs = {\n            links: new Map(),\n            triangles: new Map(),\n        };\n    }\n    drawParticle(context, particle) {\n        const { links, options } = particle;\n        if (!links?.length) {\n            return;\n        }\n        const p1Links = links.filter(l => options.links &&\n            (options.links.frequency >= maxFrequency ||\n                this._getLinkFrequency(particle, l.destination) <= options.links.frequency));\n        for (const link of p1Links) {\n            this._drawTriangles(options, particle, link, p1Links);\n            if (link.opacity > minOpacity && (particle.retina.linksWidth ?? minWidth) > minWidth) {\n                this._drawLinkLine(particle, link);\n            }\n        }\n    }\n    async init() {\n        this._freqs.links = new Map();\n        this._freqs.triangles = new Map();\n        await Promise.resolve();\n    }\n    particleCreated(particle) {\n        particle.links = [];\n        if (!particle.options.links) {\n            return;\n        }\n        const ratio = this._container.retina.pixelRatio, { retina } = particle, { distance, width } = particle.options.links;\n        retina.linksDistance = distance * ratio;\n        retina.linksWidth = width * ratio;\n    }\n    particleDestroyed(particle) {\n        particle.links = [];\n    }\n}\n", "import { LinkInstance } from \"./LinkInstance.js\";\nexport class LinksPlugin {\n    constructor(engine) {\n        this.id = \"links\";\n        this._engine = engine;\n    }\n    getPlugin(container) {\n        return Promise.resolve(new LinkInstance(container, this._engine));\n    }\n    loadOptions() {\n    }\n    needsPlugin() {\n        return true;\n    }\n}\n", "import { LinksPlugin } from \"./LinksPlugin.js\";\nexport async function loadLinksPlugin(engine, refresh = true) {\n    const plugin = new LinksPlugin(engine);\n    await engine.addPlugin(plugin, refresh);\n}\n", "import { loadLinksInteraction } from \"./interaction.js\";\nimport { loadLinksPlugin } from \"./plugin.js\";\nexport async function loadParticlesLinksInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await loadLinksInteraction(engine, refresh);\n    await loadLinksPlugin(engine, refresh);\n}\nexport * from \"./Options/Classes/Links.js\";\nexport * from \"./Options/Classes/LinksShadow.js\";\nexport * from \"./Options/Classes/LinksTriangle.js\";\nexport * from \"./Options/Interfaces/ILinks.js\";\nexport * from \"./Options/Interfaces/ILinksShadow.js\";\nexport * from \"./Options/Interfaces/ILinksTriangle.js\";\n", "import { degToRad } from \"@tsparticles/engine\";\nconst piDeg = 180, origin = { x: 0, y: 0 }, sidesOffset = 2;\nexport function drawPolygon(data, start, side) {\n    const { context } = data, sideCount = side.count.numerator * side.count.denominator, decimalSides = side.count.numerator / side.count.denominator, interiorAngleDegrees = (piDeg * (decimalSides - sidesOffset)) / decimalSides, interiorAngle = Math.PI - degToRad(interiorAngleDegrees);\n    if (!context) {\n        return;\n    }\n    context.beginPath();\n    context.translate(start.x, start.y);\n    context.moveTo(origin.x, origin.y);\n    for (let i = 0; i < sideCount; i++) {\n        context.lineTo(side.length, origin.y);\n        context.translate(side.length, origin.y);\n        context.rotate(interiorAngle);\n    }\n}\n", "import { getRangeValue, } from \"@tsparticles/engine\";\nimport { drawPolygon } from \"./Utils.js\";\nconst defaultSides = 5;\nexport class PolygonDrawerBase {\n    draw(data) {\n        const { particle, radius } = data, start = this.getCenter(particle, radius), side = this.getSidesData(particle, radius);\n        drawPolygon(data, start, side);\n    }\n    getSidesCount(particle) {\n        const polygon = particle.shapeData;\n        return Math.round(getRangeValue(polygon?.sides ?? defaultSides));\n    }\n}\n", "import { PolygonDrawerBase } from \"./PolygonDrawerBase.js\";\nconst sidesCenterFactor = 3.5, yFactor = 2.66, sidesFactor = 3;\nexport class PolygonDrawer extends PolygonDrawerBase {\n    constructor() {\n        super(...arguments);\n        this.validTypes = [\"polygon\"];\n    }\n    getCenter(particle, radius) {\n        return {\n            x: -radius / (particle.sides / sidesCenterFactor),\n            y: -radius / (yFactor / sidesCenterFactor),\n        };\n    }\n    getSidesData(particle, radius) {\n        const sides = particle.sides;\n        return {\n            count: {\n                denominator: 1,\n                numerator: sides,\n            },\n            length: (radius * yFactor) / (sides / sidesFactor),\n        };\n    }\n}\n", "import { PolygonDrawerBase } from \"./PolygonDrawerBase.js\";\nconst yFactor = 1.66, sides = 3, double = 2;\nexport class TriangleDrawer extends PolygonDrawerBase {\n    constructor() {\n        super(...arguments);\n        this.validTypes = [\"triangle\"];\n    }\n    getCenter(particle, radius) {\n        return {\n            x: -radius,\n            y: radius / yFactor,\n        };\n    }\n    getSidesCount() {\n        return sides;\n    }\n    getSidesData(particle, radius) {\n        const diameter = radius * double;\n        return {\n            count: {\n                denominator: 2,\n                numerator: 3,\n            },\n            length: diameter,\n        };\n    }\n}\n", "import { PolygonDrawer } from \"./PolygonDrawer.js\";\nimport { TriangleDrawer } from \"./TriangleDrawer.js\";\nexport async function loadGenericPolygonShape(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addShape(new PolygonDrawer(), refresh);\n}\nexport async function loadTriangleShape(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addShape(new TriangleDrawer(), refresh);\n}\nexport async function loadPolygonShape(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await loadGenericPolygonShape(engine, refresh);\n    await loadTriangleShape(engine, refresh);\n}\n", "import { isNull, setRangeValue } from \"@tsparticles/engine\";\nexport class RotateAnimation {\n    constructor() {\n        this.enable = false;\n        this.speed = 0;\n        this.decay = 0;\n        this.sync = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n        if (data.decay !== undefined) {\n            this.decay = setRangeValue(data.decay);\n        }\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n", "import { RotateDirection, ValueWithRandom, isNull, } from \"@tsparticles/engine\";\nimport { RotateAnimation } from \"./RotateAnimation.js\";\nexport class Rotate extends ValueWithRandom {\n    constructor() {\n        super();\n        this.animation = new RotateAnimation();\n        this.direction = RotateDirection.clockwise;\n        this.path = false;\n        this.value = 0;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        super.load(data);\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        this.animation.load(data.animation);\n        if (data.path !== undefined) {\n            this.path = data.path;\n        }\n    }\n}\n", "import { AnimationStatus, DestroyType, RotateDirection, degToRad, getRandom, getRangeValue, updateAnimation, } from \"@tsparticles/engine\";\nimport { Rotate } from \"./Options/Classes/Rotate.js\";\nconst double = 2, doublePI = Math.PI * double, identity = 1, doublePIDeg = 360;\nexport class RotateUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const rotateOptions = particle.options.rotate;\n        if (!rotateOptions) {\n            return;\n        }\n        particle.rotate = {\n            enable: rotateOptions.animation.enable,\n            value: degToRad(getRangeValue(rotateOptions.value)),\n            min: 0,\n            max: doublePI,\n        };\n        particle.pathRotation = rotateOptions.path;\n        let rotateDirection = rotateOptions.direction;\n        if (rotateDirection === RotateDirection.random) {\n            const index = Math.floor(getRandom() * double), minIndex = 0;\n            rotateDirection = index > minIndex ? RotateDirection.counterClockwise : RotateDirection.clockwise;\n        }\n        switch (rotateDirection) {\n            case RotateDirection.counterClockwise:\n            case \"counterClockwise\":\n                particle.rotate.status = AnimationStatus.decreasing;\n                break;\n            case RotateDirection.clockwise:\n                particle.rotate.status = AnimationStatus.increasing;\n                break;\n        }\n        const rotateAnimation = rotateOptions.animation;\n        if (rotateAnimation.enable) {\n            particle.rotate.decay = identity - getRangeValue(rotateAnimation.decay);\n            particle.rotate.velocity =\n                (getRangeValue(rotateAnimation.speed) / doublePIDeg) * this.container.retina.reduceFactor;\n            if (!rotateAnimation.sync) {\n                particle.rotate.velocity *= getRandom();\n            }\n        }\n        particle.rotation = particle.rotate.value;\n    }\n    isEnabled(particle) {\n        const rotate = particle.options.rotate;\n        if (!rotate) {\n            return false;\n        }\n        return !particle.destroyed && !particle.spawning && (!!rotate.value || rotate.animation.enable || rotate.path);\n    }\n    loadOptions(options, ...sources) {\n        if (!options.rotate) {\n            options.rotate = new Rotate();\n        }\n        for (const source of sources) {\n            options.rotate.load(source?.rotate);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        particle.isRotating = !!particle.rotate;\n        if (!particle.rotate) {\n            return;\n        }\n        updateAnimation(particle, particle.rotate, false, DestroyType.none, delta);\n        particle.rotation = particle.rotate.value;\n    }\n}\n", "import { RotateUpdater } from \"./RotateUpdater.js\";\nexport async function loadRotateUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"rotate\", container => {\n        return Promise.resolve(new RotateUpdater(container));\n    }, refresh);\n}\n", "const fixFactorSquared = 2, fixFactor = Math.sqrt(fixFactorSquared), double = 2;\nexport function drawSquare(data) {\n    const { context, radius } = data, fixedRadius = radius / fixFactor, fixedDiameter = fixedRadius * double;\n    context.rect(-fixedRadius, -fixedRadius, fixedDiameter, fixedDiameter);\n}\n", "import { drawSquare } from \"./Utils.js\";\nconst sides = 4;\nexport class SquareDrawer {\n    constructor() {\n        this.validTypes = [\"edge\", \"square\"];\n    }\n    draw(data) {\n        drawSquare(data);\n    }\n    getSidesCount() {\n        return sides;\n    }\n}\n", "import { SquareDrawer } from \"./SquareDrawer.js\";\nexport async function loadSquareShape(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addShape(new SquareDrawer(), refresh);\n}\n", "const defaultInset = 2, origin = { x: 0, y: 0 };\nexport function drawStar(data) {\n    const { context, particle, radius } = data, sides = particle.sides, inset = particle.starInset ?? defaultInset;\n    context.moveTo(origin.x, origin.y - radius);\n    for (let i = 0; i < sides; i++) {\n        context.rotate(Math.PI / sides);\n        context.lineTo(origin.x, origin.y - radius * inset);\n        context.rotate(Math.PI / sides);\n        context.lineTo(origin.x, origin.y - radius);\n    }\n}\n", "import { getRangeValue, } from \"@tsparticles/engine\";\nimport { drawStar } from \"./Utils.js\";\nconst defaultInset = 2, defaultSides = 5;\nexport class StarDrawer {\n    constructor() {\n        this.validTypes = [\"star\"];\n    }\n    draw(data) {\n        drawStar(data);\n    }\n    getSidesCount(particle) {\n        const star = particle.shapeData;\n        return Math.round(getRangeValue(star?.sides ?? defaultSides));\n    }\n    particleInit(container, particle) {\n        const star = particle.shapeData;\n        particle.starInset = getRangeValue(star?.inset ?? defaultInset);\n    }\n}\n", "import { StarDrawer } from \"./StarDrawer.js\";\nexport async function loadStarShape(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addShape(new StarDrawer(), refresh);\n}\n", "import { getHslAnimationFromHsl, getRangeValue, itemFromSingleOrMultiple, rangeColorToHsl, updateColor, } from \"@tsparticles/engine\";\nconst defaultOpacity = 1;\nexport class StrokeColorUpdater {\n    constructor(container, engine) {\n        this._container = container;\n        this._engine = engine;\n    }\n    init(particle) {\n        const container = this._container, options = particle.options;\n        const stroke = itemFromSingleOrMultiple(options.stroke, particle.id, options.reduceDuplicates);\n        particle.strokeWidth = getRangeValue(stroke.width) * container.retina.pixelRatio;\n        particle.strokeOpacity = getRangeValue(stroke.opacity ?? defaultOpacity);\n        particle.strokeAnimation = stroke.color?.animation;\n        const strokeHslColor = rangeColorToHsl(this._engine, stroke.color) ?? particle.getFillColor();\n        if (strokeHslColor) {\n            particle.strokeColor = getHslAnimationFromHsl(strokeHslColor, particle.strokeAnimation, container.retina.reduceFactor);\n        }\n    }\n    isEnabled(particle) {\n        const color = particle.strokeAnimation, { strokeColor } = particle;\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            !!color &&\n            ((strokeColor?.h.value !== undefined && strokeColor.h.enable) ||\n                (strokeColor?.s.value !== undefined && strokeColor.s.enable) ||\n                (strokeColor?.l.value !== undefined && strokeColor.l.enable)));\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateColor(particle.strokeColor, delta);\n    }\n}\n", "import { StrokeColorUpdater } from \"./StrokeColorUpdater.js\";\nexport async function loadStrokeColorUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"strokeColor\", container => {\n        return Promise.resolve(new StrokeColorUpdater(container, engine));\n    }, refresh);\n}\n", "import { loadBasic } from \"@tsparticles/basic\";\nimport { loadEasingQuadPlugin } from \"@tsparticles/plugin-easing-quad\";\nimport { loadEmojiShape } from \"@tsparticles/shape-emoji\";\nimport { loadExternalAttractInteraction } from \"@tsparticles/interaction-external-attract\";\nimport { loadExternalBounceInteraction } from \"@tsparticles/interaction-external-bounce\";\nimport { loadExternalBubbleInteraction } from \"@tsparticles/interaction-external-bubble\";\nimport { loadExternalConnectInteraction } from \"@tsparticles/interaction-external-connect\";\nimport { loadExternalGrabInteraction } from \"@tsparticles/interaction-external-grab\";\nimport { loadExternalPauseInteraction } from \"@tsparticles/interaction-external-pause\";\nimport { loadExternalPushInteraction } from \"@tsparticles/interaction-external-push\";\nimport { loadExternalRemoveInteraction } from \"@tsparticles/interaction-external-remove\";\nimport { loadExternalRepulseInteraction } from \"@tsparticles/interaction-external-repulse\";\nimport { loadExternalSlowInteraction } from \"@tsparticles/interaction-external-slow\";\nimport { loadImageShape } from \"@tsparticles/shape-image\";\nimport { loadLifeUpdater } from \"@tsparticles/updater-life\";\nimport { loadLineShape } from \"@tsparticles/shape-line\";\nimport { loadParallaxMover } from \"@tsparticles/move-parallax\";\nimport { loadParticlesAttractInteraction } from \"@tsparticles/interaction-particles-attract\";\nimport { loadParticlesCollisionsInteraction } from \"@tsparticles/interaction-particles-collisions\";\nimport { loadParticlesLinksInteraction } from \"@tsparticles/interaction-particles-links\";\nimport { loadPolygonShape } from \"@tsparticles/shape-polygon\";\nimport { loadRotateUpdater } from \"@tsparticles/updater-rotate\";\nimport { loadSquareShape } from \"@tsparticles/shape-square\";\nimport { loadStarShape } from \"@tsparticles/shape-star\";\nimport { loadStrokeColorUpdater } from \"@tsparticles/updater-stroke-color\";\nexport async function loadSlim(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await loadParallaxMover(engine, false);\n    await loadExternalAttractInteraction(engine, false);\n    await loadExternalBounceInteraction(engine, false);\n    await loadExternalBubbleInteraction(engine, false);\n    await loadExternalConnectInteraction(engine, false);\n    await loadExternalGrabInteraction(engine, false);\n    await loadExternalPauseInteraction(engine, false);\n    await loadExternalPushInteraction(engine, false);\n    await loadExternalRemoveInteraction(engine, false);\n    await loadExternalRepulseInteraction(engine, false);\n    await loadExternalSlowInteraction(engine, false);\n    await loadParticlesAttractInteraction(engine, false);\n    await loadParticlesCollisionsInteraction(engine, false);\n    await loadParticlesLinksInteraction(engine, false);\n    await loadEasingQuadPlugin(engine, false);\n    await loadEmojiShape(engine, false);\n    await loadImageShape(engine, false);\n    await loadLineShape(engine, false);\n    await loadPolygonShape(engine, false);\n    await loadSquareShape(engine, false);\n    await loadStarShape(engine, false);\n    await loadLifeUpdater(engine, false);\n    await loadRotateUpdater(engine, false);\n    await loadStrokeColorUpdater(engine, false);\n    await loadBasic(engine, refresh);\n}\n", "import { itemFromSingleOrMultiple } from \"@tsparticles/engine\";\nconst double = 2, half = 0.5;\nexport function drawText(data) {\n    const { context, particle, radius, opacity } = data, character = particle.shapeData;\n    if (!character) {\n        return;\n    }\n    const textData = character.value;\n    if (textData === undefined) {\n        return;\n    }\n    if (particle.text === undefined) {\n        particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n    }\n    const text = particle.text, style = character.style ?? \"\", weight = character.weight ?? \"400\", size = Math.round(radius) * double, font = character.font ?? \"Verdana\", fill = particle.shapeFill;\n    const lines = text?.split(\"\\n\");\n    if (!lines) {\n        return;\n    }\n    context.font = `${style} ${weight} ${size}px \"${font}\"`;\n    context.globalAlpha = opacity;\n    for (let i = 0; i < lines.length; i++) {\n        drawLine(context, lines[i], radius, opacity, i, fill);\n    }\n    context.globalAlpha = 1;\n}\nfunction drawLine(context, line, radius, opacity, index, fill) {\n    const offsetX = line.length * radius * half, pos = {\n        x: -offsetX,\n        y: radius * half,\n    }, diameter = radius * double;\n    if (fill) {\n        context.fillText(line, pos.x, pos.y + diameter * index);\n    }\n    else {\n        context.strokeText(line, pos.x, pos.y + diameter * index);\n    }\n}\n", "import { executeOnSingleOrMultiple, isInArray, itemFromSingleOrMultiple, loadFont, } from \"@tsparticles/engine\";\nimport { drawText } from \"./Utils.js\";\nexport class TextDrawer {\n    constructor() {\n        this.validTypes = [\"text\", \"character\", \"char\", \"multiline-text\"];\n    }\n    draw(data) {\n        drawText(data);\n    }\n    async init(container) {\n        const options = container.actualOptions, { validTypes } = this;\n        if (validTypes.find(t => isInArray(t, options.particles.shape.type))) {\n            const shapeOptions = validTypes\n                .map(t => options.particles.shape.options[t])\n                .find(t => !!t), promises = [];\n            executeOnSingleOrMultiple(shapeOptions, shape => {\n                promises.push(loadFont(shape.font, shape.weight));\n            });\n            await Promise.all(promises);\n        }\n    }\n    particleInit(container, particle) {\n        if (!particle.shape || !this.validTypes.includes(particle.shape)) {\n            return;\n        }\n        const character = particle.shapeData;\n        if (character === undefined) {\n            return;\n        }\n        const textData = character.value;\n        if (textData === undefined) {\n            return;\n        }\n        particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n    }\n}\n", "import { TextDrawer } from \"./TextDrawer.js\";\nexport async function loadTextShape(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addShape(new TextDrawer(), refresh);\n}\n", "export var TiltDirection;\n(function (TiltDirection) {\n    TiltDirection[\"clockwise\"] = \"clockwise\";\n    TiltDirection[\"counterClockwise\"] = \"counter-clockwise\";\n    TiltDirection[\"random\"] = \"random\";\n})(TiltDirection || (TiltDirection = {}));\n", "import { isNull, setRangeValue } from \"@tsparticles/engine\";\nexport class TiltAnimation {\n    constructor() {\n        this.enable = false;\n        this.speed = 0;\n        this.decay = 0;\n        this.sync = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n        if (data.decay !== undefined) {\n            this.decay = setRangeValue(data.decay);\n        }\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n", "import { ValueWithRandom, isNull } from \"@tsparticles/engine\";\nimport { TiltDirection } from \"../../TiltDirection.js\";\nimport { TiltAnimation } from \"./TiltAnimation.js\";\nexport class Tilt extends ValueWithRandom {\n    constructor() {\n        super();\n        this.animation = new TiltAnimation();\n        this.direction = TiltDirection.clockwise;\n        this.enable = false;\n        this.value = 0;\n    }\n    load(data) {\n        super.load(data);\n        if (isNull(data)) {\n            return;\n        }\n        this.animation.load(data.animation);\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n    }\n}\n", "import { AnimationStatus, DestroyType, degToRad, getRandom, getRangeValue, half, updateAnimation, } from \"@tsparticles/engine\";\nimport { Tilt } from \"./Options/Classes/Tilt.js\";\nimport { TiltDirection } from \"./TiltDirection.js\";\nconst identity = 1, double = 2, doublePI = Math.PI * double, maxAngle = 360;\nexport class TiltUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    getTransformValues(particle) {\n        const tilt = particle.tilt?.enable && particle.tilt;\n        return {\n            b: tilt ? Math.cos(tilt.value) * tilt.cosDirection : undefined,\n            c: tilt ? Math.sin(tilt.value) * tilt.sinDirection : undefined,\n        };\n    }\n    init(particle) {\n        const tiltOptions = particle.options.tilt;\n        if (!tiltOptions) {\n            return;\n        }\n        particle.tilt = {\n            enable: tiltOptions.enable,\n            value: degToRad(getRangeValue(tiltOptions.value)),\n            sinDirection: getRandom() >= half ? identity : -identity,\n            cosDirection: getRandom() >= half ? identity : -identity,\n            min: 0,\n            max: doublePI,\n        };\n        let tiltDirection = tiltOptions.direction;\n        if (tiltDirection === TiltDirection.random) {\n            const index = Math.floor(getRandom() * double), minIndex = 0;\n            tiltDirection = index > minIndex ? TiltDirection.counterClockwise : TiltDirection.clockwise;\n        }\n        switch (tiltDirection) {\n            case TiltDirection.counterClockwise:\n            case \"counterClockwise\":\n                particle.tilt.status = AnimationStatus.decreasing;\n                break;\n            case TiltDirection.clockwise:\n                particle.tilt.status = AnimationStatus.increasing;\n                break;\n        }\n        const tiltAnimation = particle.options.tilt?.animation;\n        if (tiltAnimation?.enable) {\n            particle.tilt.decay = identity - getRangeValue(tiltAnimation.decay);\n            particle.tilt.velocity =\n                (getRangeValue(tiltAnimation.speed) / maxAngle) * this.container.retina.reduceFactor;\n            if (!tiltAnimation.sync) {\n                particle.tilt.velocity *= getRandom();\n            }\n        }\n    }\n    isEnabled(particle) {\n        const tiltAnimation = particle.options.tilt?.animation;\n        return !particle.destroyed && !particle.spawning && !!tiltAnimation?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.tilt) {\n            options.tilt = new Tilt();\n        }\n        for (const source of sources) {\n            options.tilt.load(source?.tilt);\n        }\n    }\n    async update(particle, delta) {\n        if (!this.isEnabled(particle) || !particle.tilt) {\n            return;\n        }\n        updateAnimation(particle, particle.tilt, false, DestroyType.none, delta);\n        await Promise.resolve();\n    }\n}\n", "import { TiltUpdater } from \"./TiltUpdater.js\";\nexport async function loadTiltUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"tilt\", container => {\n        return Promise.resolve(new TiltUpdater(container));\n    }, refresh);\n}\n", "import { OptionsColor, isNull, setRangeValue, } from \"@tsparticles/engine\";\nexport class TwinkleValues {\n    constructor() {\n        this.enable = false;\n        this.frequency = 0.05;\n        this.opacity = 1;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.frequency !== undefined) {\n            this.frequency = data.frequency;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = setRangeValue(data.opacity);\n        }\n    }\n}\n", "import { isNull } from \"@tsparticles/engine\";\nimport { TwinkleValues } from \"./TwinkleValues.js\";\nexport class Twinkle {\n    constructor() {\n        this.lines = new TwinkleValues();\n        this.particles = new TwinkleValues();\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        this.lines.load(data.lines);\n        this.particles.load(data.particles);\n    }\n}\n", "import { getRandom, getRangeValue, getStyleFromHsl, rangeColorToHsl, } from \"@tsparticles/engine\";\nimport { Twinkle } from \"./Options/Classes/Twinkle.js\";\nexport class TwinkleUpdater {\n    constructor(engine) {\n        this._engine = engine;\n    }\n    getColorStyles(particle, context, radius, opacity) {\n        const pOptions = particle.options, twinkleOptions = pOptions.twinkle;\n        if (!twinkleOptions) {\n            return {};\n        }\n        const twinkle = twinkleOptions.particles, twinkling = twinkle.enable && getRandom() < twinkle.frequency, zIndexOptions = particle.options.zIndex, zOffset = 1, zOpacityFactor = (zOffset - particle.zIndexFactor) ** zIndexOptions.opacityRate, twinklingOpacity = twinkling ? getRangeValue(twinkle.opacity) * zOpacityFactor : opacity, twinkleRgb = rangeColorToHsl(this._engine, twinkle.color), twinkleStyle = twinkleRgb ? getStyleFromHsl(twinkleRgb, twinklingOpacity) : undefined, res = {}, needsTwinkle = twinkling && twinkleStyle;\n        res.fill = needsTwinkle ? twinkleStyle : undefined;\n        res.stroke = needsTwinkle ? twinkleStyle : undefined;\n        return res;\n    }\n    async init() {\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        const pOptions = particle.options, twinkleOptions = pOptions.twinkle;\n        if (!twinkleOptions) {\n            return false;\n        }\n        return twinkleOptions.particles.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.twinkle) {\n            options.twinkle = new Twinkle();\n        }\n        for (const source of sources) {\n            options.twinkle.load(source?.twinkle);\n        }\n    }\n    async update() {\n        await Promise.resolve();\n    }\n}\n", "import { TwinkleUpdater } from \"./TwinkleUpdater.js\";\nexport async function loadTwinkleUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"twinkle\", () => {\n        return Promise.resolve(new TwinkleUpdater(engine));\n    }, refresh);\n}\n", "import { isNull, setRangeValue } from \"@tsparticles/engine\";\nexport class WobbleSpeed {\n    constructor() {\n        this.angle = 50;\n        this.move = 10;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.angle !== undefined) {\n            this.angle = setRangeValue(data.angle);\n        }\n        if (data.move !== undefined) {\n            this.move = setRangeValue(data.move);\n        }\n    }\n}\n", "import { isNull, isNumber, setRangeValue, } from \"@tsparticles/engine\";\nimport { WobbleSpeed } from \"./WobbleSpeed.js\";\nexport class Wobble {\n    constructor() {\n        this.distance = 5;\n        this.enable = false;\n        this.speed = new WobbleSpeed();\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = setRangeValue(data.distance);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            if (isNumber(data.speed)) {\n                this.speed.load({ angle: data.speed });\n            }\n            else {\n                const rangeSpeed = data.speed;\n                if (rangeSpeed.min !== undefined) {\n                    this.speed.load({ angle: rangeSpeed });\n                }\n                else {\n                    this.speed.load(data.speed);\n                }\n            }\n        }\n    }\n}\n", "import { millisecondsToSeconds } from \"@tsparticles/engine\";\nconst defaultDistance = 0, double = 2, doublePI = Math.PI * double, distanceFactor = 60;\nexport function updateWobble(particle, delta) {\n    const { wobble: wobbleOptions } = particle.options, { wobble } = particle;\n    if (!wobbleOptions?.enable || !wobble) {\n        return;\n    }\n    const angleSpeed = wobble.angleSpeed * delta.factor, moveSpeed = wobble.moveSpeed * delta.factor, distance = (moveSpeed * ((particle.retina.wobbleDistance ?? defaultDistance) * delta.factor)) /\n        (millisecondsToSeconds / distanceFactor), max = doublePI, { position } = particle;\n    wobble.angle += angleSpeed;\n    if (wobble.angle > max) {\n        wobble.angle -= max;\n    }\n    position.x += distance * Math.cos(wobble.angle);\n    position.y += distance * Math.abs(Math.sin(wobble.angle));\n}\n", "import { getRandom, getRangeValue, } from \"@tsparticles/engine\";\nimport { Wobble } from \"./Options/Classes/Wobble.js\";\nimport { updateWobble } from \"./Utils.js\";\nconst double = 2, doublePI = Math.PI * double, maxAngle = 360, moveSpeedFactor = 10, defaultDistance = 0;\nexport class WobbleUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const wobbleOpt = particle.options.wobble;\n        if (wobbleOpt?.enable) {\n            particle.wobble = {\n                angle: getRandom() * doublePI,\n                angleSpeed: getRangeValue(wobbleOpt.speed.angle) / maxAngle,\n                moveSpeed: getRangeValue(wobbleOpt.speed.move) / moveSpeedFactor,\n            };\n        }\n        else {\n            particle.wobble = {\n                angle: 0,\n                angleSpeed: 0,\n                moveSpeed: 0,\n            };\n        }\n        particle.retina.wobbleDistance =\n            getRangeValue(wobbleOpt?.distance ?? defaultDistance) * this.container.retina.pixelRatio;\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && !particle.spawning && !!particle.options.wobble?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.wobble) {\n            options.wobble = new Wobble();\n        }\n        for (const source of sources) {\n            options.wobble.load(source?.wobble);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateWobble(particle, delta);\n    }\n}\n", "import { WobbleUpdater } from \"./WobbleUpdater.js\";\nexport async function loadWobbleUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"wobble\", container => {\n        return Promise.resolve(new WobbleUpdater(container));\n    }, refresh);\n}\n", "import { loadAbsorbersPlugin } from \"@tsparticles/plugin-absorbers\";\nimport { loadDestroyUpdater } from \"@tsparticles/updater-destroy\";\nimport { loadEmittersPlugin } from \"@tsparticles/plugin-emitters\";\nimport { loadEmittersShapeCircle } from \"@tsparticles/plugin-emitters-shape-circle\";\nimport { loadEmittersShapeSquare } from \"@tsparticles/plugin-emitters-shape-square\";\nimport { loadExternalTrailInteraction } from \"@tsparticles/interaction-external-trail\";\nimport { loadRollUpdater } from \"@tsparticles/updater-roll\";\nimport { loadSlim } from \"@tsparticles/slim\";\nimport { loadTextShape } from \"@tsparticles/shape-text\";\nimport { loadTiltUpdater } from \"@tsparticles/updater-tilt\";\nimport { loadTwinkleUpdater } from \"@tsparticles/updater-twinkle\";\nimport { loadWobbleUpdater } from \"@tsparticles/updater-wobble\";\nexport async function loadFull(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await loadDestroyUpdater(engine, false);\n    await loadRollUpdater(engine, false);\n    await loadTiltUpdater(engine, false);\n    await loadTwinkleUpdater(engine, false);\n    await loadWobbleUpdater(engine, false);\n    await loadTextShape(engine, false);\n    await loadExternalTrailInteraction(engine, false);\n    await loadAbsorbersPlugin(engine, false);\n    await loadEmittersPlugin(engine, false);\n    await loadEmittersShapeCircle(engine, false);\n    await loadEmittersShapeSquare(engine, false);\n    await loadSlim(engine, refresh);\n}\n"],
  "mappings": "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",
  "names": []
}
