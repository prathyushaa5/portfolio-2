{
  "version": 3,
  "sources": ["../react-tsparticles/esm/Particles.js", "../tsparticles-engine/esm/Core/Utils/Constants.js", "../tsparticles-engine/esm/Core/Utils/Vector3d.js", "../tsparticles-engine/esm/Core/Utils/Vector.js", "../tsparticles-engine/esm/Utils/NumberUtils.js", "../tsparticles-engine/esm/Utils/Utils.js", "../tsparticles-engine/esm/Utils/ColorUtils.js", "../tsparticles-engine/esm/Utils/CanvasUtils.js", "../tsparticles-engine/esm/Core/Canvas.js", "../tsparticles-engine/esm/Core/Utils/EventListeners.js", "../tsparticles-engine/esm/Options/Classes/OptionsColor.js", "../tsparticles-engine/esm/Options/Classes/Background/Background.js", "../tsparticles-engine/esm/Options/Classes/BackgroundMask/BackgroundMaskCover.js", "../tsparticles-engine/esm/Options/Classes/BackgroundMask/BackgroundMask.js", "../tsparticles-engine/esm/Options/Classes/FullScreen/FullScreen.js", "../tsparticles-engine/esm/Options/Classes/Interactivity/Events/ClickEvent.js", "../tsparticles-engine/esm/Options/Classes/Interactivity/Events/DivEvent.js", "../tsparticles-engine/esm/Options/Classes/Interactivity/Events/Parallax.js", "../tsparticles-engine/esm/Options/Classes/Interactivity/Events/HoverEvent.js", "../tsparticles-engine/esm/Options/Classes/Interactivity/Events/ResizeEvent.js", "../tsparticles-engine/esm/Options/Classes/Interactivity/Events/Events.js", "../tsparticles-engine/esm/Options/Classes/Interactivity/Modes/Modes.js", "../tsparticles-engine/esm/Options/Classes/Interactivity/Interactivity.js", "../tsparticles-engine/esm/Options/Classes/ManualParticle.js", "../tsparticles-engine/esm/Options/Classes/Responsive.js", "../tsparticles-engine/esm/Options/Classes/Theme/ThemeDefault.js", "../tsparticles-engine/esm/Options/Classes/Theme/Theme.js", "../tsparticles-engine/esm/Options/Classes/ColorAnimation.js", "../tsparticles-engine/esm/Options/Classes/HslAnimation.js", "../tsparticles-engine/esm/Options/Classes/AnimatableColor.js", "../tsparticles-engine/esm/Options/Classes/Particles/Collisions/CollisionsAbsorb.js", "../tsparticles-engine/esm/Options/Classes/Particles/Collisions/CollisionsOverlap.js", "../tsparticles-engine/esm/Options/Classes/AnimationOptions.js", "../tsparticles-engine/esm/Options/Classes/Random.js", "../tsparticles-engine/esm/Options/Classes/ValueWithRandom.js", "../tsparticles-engine/esm/Options/Classes/Particles/Bounce/ParticlesBounceFactor.js", "../tsparticles-engine/esm/Options/Classes/Particles/Bounce/ParticlesBounce.js", "../tsparticles-engine/esm/Options/Classes/Particles/Collisions/Collisions.js", "../tsparticles-engine/esm/Options/Classes/Particles/Move/MoveAngle.js", "../tsparticles-engine/esm/Options/Classes/Particles/Move/MoveAttract.js", "../tsparticles-engine/esm/Options/Classes/Particles/Move/MoveCenter.js", "../tsparticles-engine/esm/Options/Classes/Particles/Move/MoveGravity.js", "../tsparticles-engine/esm/Options/Classes/Particles/Move/Path/MovePath.js", "../tsparticles-engine/esm/Options/Classes/Particles/Move/MoveTrailFill.js", "../tsparticles-engine/esm/Options/Classes/Particles/Move/MoveTrail.js", "../tsparticles-engine/esm/Options/Classes/Particles/Move/OutModes.js", "../tsparticles-engine/esm/Options/Classes/Particles/Move/Spin.js", "../tsparticles-engine/esm/Options/Classes/Particles/Move/Move.js", "../tsparticles-engine/esm/Options/Classes/Particles/Opacity/OpacityAnimation.js", "../tsparticles-engine/esm/Options/Classes/Particles/Opacity/Opacity.js", "../tsparticles-engine/esm/Options/Classes/Particles/Number/ParticlesDensity.js", "../tsparticles-engine/esm/Options/Classes/Particles/Number/ParticlesNumber.js", "../tsparticles-engine/esm/Options/Classes/Particles/Shadow.js", "../tsparticles-engine/esm/Options/Classes/Particles/Shape/Shape.js", "../tsparticles-engine/esm/Options/Classes/Particles/Size/SizeAnimation.js", "../tsparticles-engine/esm/Options/Classes/Particles/Size/Size.js", "../tsparticles-engine/esm/Options/Classes/Particles/Stroke.js", "../tsparticles-engine/esm/Options/Classes/Particles/ZIndex/ZIndex.js", "../tsparticles-engine/esm/Options/Classes/Particles/ParticlesOptions.js", "../tsparticles-engine/esm/Utils/OptionsUtils.js", "../tsparticles-engine/esm/Options/Classes/Options.js", "../tsparticles-engine/esm/Core/Utils/InteractionManager.js", "../tsparticles-engine/esm/Core/Particle.js", "../tsparticles-engine/esm/Core/Utils/Point.js", "../tsparticles-engine/esm/Core/Utils/Range.js", "../tsparticles-engine/esm/Core/Utils/Rectangle.js", "../tsparticles-engine/esm/Core/Utils/Circle.js", "../tsparticles-engine/esm/Core/Utils/QuadTree.js", "../tsparticles-engine/esm/Core/Particles.js", "../tsparticles-engine/esm/Core/Retina.js", "../tsparticles-engine/esm/Core/Container.js", "../tsparticles-engine/esm/Utils/EventDispatcher.js", "../tsparticles-engine/esm/Core/Utils/Plugins.js", "../tsparticles-engine/esm/Core/Engine.js", "../tsparticles-engine/esm/Utils/HslColorManager.js", "../tsparticles-engine/esm/Utils/RgbColorManager.js", "../tsparticles-engine/esm/init.js", "../tsparticles-engine/esm/index.js", "../react-tsparticles/esm/Utils.js", "../react-tsparticles/esm/index.js", "dep:react-tsparticles"],
  "sourcesContent": ["import React, { Component } from \"react\";\nimport { tsParticles } from \"tsparticles-engine\";\nimport { deepCompare } from \"./Utils\";\nconst defaultId = \"tsparticles\";\nclass Particles extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            init: false,\n            library: undefined,\n        };\n    }\n    destroy() {\n        if (!this.state.library) {\n            return;\n        }\n        this.state.library.destroy();\n        this.setState({\n            library: undefined,\n        });\n    }\n    shouldComponentUpdate(nextProps) {\n        const nextOptions = nextProps.options ?? nextProps.params, currentOptions = this.props.options ?? this.props.params;\n        return (nextProps.url !== this.props.url ||\n            nextProps.id !== this.props.id ||\n            nextProps.canvasClassName !== this.props.canvasClassName ||\n            nextProps.className !== this.props.className ||\n            nextProps.height !== this.props.height ||\n            nextProps.width !== this.props.width ||\n            !deepCompare(nextProps.style, this.props.style) ||\n            nextProps.init !== this.props.init ||\n            nextProps.loaded !== this.props.loaded ||\n            !deepCompare(nextOptions, currentOptions, key => key.startsWith(\"_\")));\n    }\n    componentDidUpdate() {\n        this.refresh();\n    }\n    forceUpdate() {\n        this.refresh().then(() => {\n            super.forceUpdate();\n        });\n    }\n    componentDidMount() {\n        (async () => {\n            if (this.props.init) {\n                await this.props.init(tsParticles);\n            }\n            this.setState({\n                init: true,\n            }, async () => {\n                await this.loadParticles();\n            });\n        })();\n    }\n    componentWillUnmount() {\n        this.destroy();\n    }\n    render() {\n        const { width, height, className, canvasClassName, id } = this.props;\n        return (React.createElement(\"div\", { className: className, id: id },\n            React.createElement(\"canvas\", { className: canvasClassName, style: {\n                    ...this.props.style,\n                    width,\n                    height,\n                } })));\n    }\n    async refresh() {\n        this.destroy();\n        await this.loadParticles();\n    }\n    async loadParticles() {\n        if (!this.state.init) {\n            return;\n        }\n        const id = this.props.id ?? Particles.defaultProps.id ?? defaultId, container = await tsParticles.load({\n            url: this.props.url,\n            id,\n            options: this.props.options ?? this.props.params,\n        });\n        if (this.props.container) {\n            this.props.container.current = container;\n        }\n        this.setState({\n            library: container,\n        });\n        if (this.props.loaded) {\n            await this.props.loaded(container);\n        }\n    }\n}\nParticles.defaultProps = {\n    width: \"100%\",\n    height: \"100%\",\n    options: {},\n    style: {},\n    url: undefined,\n    id: defaultId,\n};\nexport default Particles;\n", "export const generatedAttribute = \"generated\";\nexport const mouseDownEvent = \"pointerdown\";\nexport const mouseUpEvent = \"pointerup\";\nexport const mouseLeaveEvent = \"pointerleave\";\nexport const mouseOutEvent = \"pointerout\";\nexport const mouseMoveEvent = \"pointermove\";\nexport const touchStartEvent = \"touchstart\";\nexport const touchEndEvent = \"touchend\";\nexport const touchMoveEvent = \"touchmove\";\nexport const touchCancelEvent = \"touchcancel\";\nexport const resizeEvent = \"resize\";\nexport const visibilityChangeEvent = \"visibilitychange\";\nexport const errorPrefix = \"tsParticles - Error\";\n", "import { errorPrefix } from \"./Constants\";\nimport { isNumber } from \"../../Utils/Utils\";\nexport class Vector3d {\n    constructor(xOrCoords, y, z) {\n        this._updateFromAngle = (angle, length) => {\n            this.x = Math.cos(angle) * length;\n            this.y = Math.sin(angle) * length;\n        };\n        if (!isNumber(xOrCoords) && xOrCoords) {\n            this.x = xOrCoords.x;\n            this.y = xOrCoords.y;\n            const coords3d = xOrCoords;\n            this.z = coords3d.z ? coords3d.z : 0;\n        }\n        else if (xOrCoords !== undefined && y !== undefined) {\n            this.x = xOrCoords;\n            this.y = y;\n            this.z = z ?? 0;\n        }\n        else {\n            throw new Error(`${errorPrefix} Vector3d not initialized correctly`);\n        }\n    }\n    static get origin() {\n        return Vector3d.create(0, 0, 0);\n    }\n    get angle() {\n        return Math.atan2(this.y, this.x);\n    }\n    set angle(angle) {\n        this._updateFromAngle(angle, this.length);\n    }\n    get length() {\n        return Math.sqrt(this.getLengthSq());\n    }\n    set length(length) {\n        this._updateFromAngle(this.angle, length);\n    }\n    static clone(source) {\n        return Vector3d.create(source.x, source.y, source.z);\n    }\n    static create(x, y, z) {\n        return new Vector3d(x, y, z);\n    }\n    add(v) {\n        return Vector3d.create(this.x + v.x, this.y + v.y, this.z + v.z);\n    }\n    addTo(v) {\n        this.x += v.x;\n        this.y += v.y;\n        this.z += v.z;\n    }\n    copy() {\n        return Vector3d.clone(this);\n    }\n    distanceTo(v) {\n        return this.sub(v).length;\n    }\n    distanceToSq(v) {\n        return this.sub(v).getLengthSq();\n    }\n    div(n) {\n        return Vector3d.create(this.x / n, this.y / n, this.z / n);\n    }\n    divTo(n) {\n        this.x /= n;\n        this.y /= n;\n        this.z /= n;\n    }\n    getLengthSq() {\n        return this.x ** 2 + this.y ** 2;\n    }\n    mult(n) {\n        return Vector3d.create(this.x * n, this.y * n, this.z * n);\n    }\n    multTo(n) {\n        this.x *= n;\n        this.y *= n;\n        this.z *= n;\n    }\n    normalize() {\n        const length = this.length;\n        if (length != 0) {\n            this.multTo(1.0 / length);\n        }\n    }\n    rotate(angle) {\n        return Vector3d.create(this.x * Math.cos(angle) - this.y * Math.sin(angle), this.x * Math.sin(angle) + this.y * Math.cos(angle), 0);\n    }\n    setTo(c) {\n        this.x = c.x;\n        this.y = c.y;\n        const v3d = c;\n        this.z = v3d.z ? v3d.z : 0;\n    }\n    sub(v) {\n        return Vector3d.create(this.x - v.x, this.y - v.y, this.z - v.z);\n    }\n    subFrom(v) {\n        this.x -= v.x;\n        this.y -= v.y;\n        this.z -= v.z;\n    }\n}\n", "import { Vector3d } from \"./Vector3d\";\nexport class Vector extends Vector3d {\n    constructor(xOrCoords, y) {\n        super(xOrCoords, y, 0);\n    }\n    static get origin() {\n        return Vector.create(0, 0);\n    }\n    static clone(source) {\n        return Vector.create(source.x, source.y);\n    }\n    static create(x, y) {\n        return new Vector(x, y);\n    }\n}\n", "import { isBoolean, isNumber } from \"./Utils\";\nimport { Vector } from \"../Core/Utils/Vector\";\nlet _random = Math.random;\nconst easings = new Map();\nexport function addEasing(name, easing) {\n    if (easings.get(name)) {\n        return;\n    }\n    easings.set(name, easing);\n}\nexport function getEasing(name) {\n    return easings.get(name) || ((value) => value);\n}\nexport function setRandom(rnd = Math.random) {\n    _random = rnd;\n}\nexport function getRandom() {\n    return clamp(_random(), 0, 1 - 1e-16);\n}\nexport function clamp(num, min, max) {\n    return Math.min(Math.max(num, min), max);\n}\nexport function mix(comp1, comp2, weight1, weight2) {\n    return Math.floor((comp1 * weight1 + comp2 * weight2) / (weight1 + weight2));\n}\nexport function randomInRange(r) {\n    const max = getRangeMax(r);\n    let min = getRangeMin(r);\n    if (max === min) {\n        min = 0;\n    }\n    return getRandom() * (max - min) + min;\n}\nexport function getRangeValue(value) {\n    return isNumber(value) ? value : randomInRange(value);\n}\nexport function getRangeMin(value) {\n    return isNumber(value) ? value : value.min;\n}\nexport function getRangeMax(value) {\n    return isNumber(value) ? value : value.max;\n}\nexport function setRangeValue(source, value) {\n    if (source === value || (value === undefined && isNumber(source))) {\n        return source;\n    }\n    const min = getRangeMin(source), max = getRangeMax(source);\n    return value !== undefined\n        ? {\n            min: Math.min(min, value),\n            max: Math.max(max, value),\n        }\n        : setRangeValue(min, max);\n}\nexport function getValue(options) {\n    const random = options.random, { enable, minimumValue } = isBoolean(random)\n        ? {\n            enable: random,\n            minimumValue: 0,\n        }\n        : random;\n    return enable ? getRangeValue(setRangeValue(options.value, minimumValue)) : getRangeValue(options.value);\n}\nexport function getDistances(pointA, pointB) {\n    const dx = pointA.x - pointB.x, dy = pointA.y - pointB.y;\n    return { dx: dx, dy: dy, distance: Math.sqrt(dx ** 2 + dy ** 2) };\n}\nexport function getDistance(pointA, pointB) {\n    return getDistances(pointA, pointB).distance;\n}\nexport function getParticleDirectionAngle(direction, position, center) {\n    if (isNumber(direction)) {\n        return (direction * Math.PI) / 180;\n    }\n    switch (direction) {\n        case \"top\":\n            return -Math.PI / 2;\n        case \"top-right\":\n            return -Math.PI / 4;\n        case \"right\":\n            return 0;\n        case \"bottom-right\":\n            return Math.PI / 4;\n        case \"bottom\":\n            return Math.PI / 2;\n        case \"bottom-left\":\n            return (3 * Math.PI) / 4;\n        case \"left\":\n            return Math.PI;\n        case \"top-left\":\n            return (-3 * Math.PI) / 4;\n        case \"inside\":\n            return Math.atan2(center.y - position.y, center.x - position.x);\n        case \"outside\":\n            return Math.atan2(position.y - center.y, position.x - center.x);\n        default:\n            return getRandom() * Math.PI * 2;\n    }\n}\nexport function getParticleBaseVelocity(direction) {\n    const baseVelocity = Vector.origin;\n    baseVelocity.length = 1;\n    baseVelocity.angle = direction;\n    return baseVelocity;\n}\nexport function collisionVelocity(v1, v2, m1, m2) {\n    return Vector.create((v1.x * (m1 - m2)) / (m1 + m2) + (v2.x * 2 * m2) / (m1 + m2), v1.y);\n}\nexport function calcPositionFromSize(data) {\n    return data.position && data.position.x !== undefined && data.position.y !== undefined\n        ? {\n            x: (data.position.x * data.size.width) / 100,\n            y: (data.position.y * data.size.height) / 100,\n        }\n        : undefined;\n}\nexport function calcPositionOrRandomFromSize(data) {\n    return {\n        x: ((data.position?.x ?? getRandom() * 100) * data.size.width) / 100,\n        y: ((data.position?.y ?? getRandom() * 100) * data.size.height) / 100,\n    };\n}\nexport function calcPositionOrRandomFromSizeRanged(data) {\n    const position = {\n        x: data.position?.x !== undefined ? getRangeValue(data.position.x) : undefined,\n        y: data.position?.y !== undefined ? getRangeValue(data.position.y) : undefined,\n    };\n    return calcPositionOrRandomFromSize({ size: data.size, position });\n}\nexport function calcExactPositionOrRandomFromSize(data) {\n    return {\n        x: data.position?.x ?? getRandom() * data.size.width,\n        y: data.position?.y ?? getRandom() * data.size.height,\n    };\n}\nexport function calcExactPositionOrRandomFromSizeRanged(data) {\n    const position = {\n        x: data.position?.x !== undefined ? getRangeValue(data.position.x) : undefined,\n        y: data.position?.y !== undefined ? getRangeValue(data.position.y) : undefined,\n    };\n    return calcExactPositionOrRandomFromSize({ size: data.size, position });\n}\nexport function parseAlpha(input) {\n    return input ? (input.endsWith(\"%\") ? parseFloat(input) / 100 : parseFloat(input)) : 1;\n}\n", "import { collisionVelocity, getDistances, getRandom, getRangeMax, getRangeMin, getRangeValue, getValue, randomInRange, } from \"./NumberUtils\";\nimport { Vector } from \"../Core/Utils/Vector\";\nconst _logger = {\n    debug: console.debug,\n    error: console.error,\n    info: console.info,\n    log: console.log,\n    verbose: console.log,\n    warning: console.warn,\n};\nexport function setLogger(logger) {\n    _logger.debug = logger.debug || _logger.debug;\n    _logger.error = logger.error || _logger.error;\n    _logger.info = logger.info || _logger.info;\n    _logger.log = logger.log || _logger.log;\n    _logger.verbose = logger.verbose || _logger.verbose;\n    _logger.warning = logger.warning || _logger.warning;\n}\nexport function getLogger() {\n    return _logger;\n}\nfunction rectSideBounce(data) {\n    const res = { bounced: false }, { pSide, pOtherSide, rectSide, rectOtherSide, velocity, factor } = data;\n    if (pOtherSide.min < rectOtherSide.min ||\n        pOtherSide.min > rectOtherSide.max ||\n        pOtherSide.max < rectOtherSide.min ||\n        pOtherSide.max > rectOtherSide.max) {\n        return res;\n    }\n    if ((pSide.max >= rectSide.min && pSide.max <= (rectSide.max + rectSide.min) / 2 && velocity > 0) ||\n        (pSide.min <= rectSide.max && pSide.min > (rectSide.max + rectSide.min) / 2 && velocity < 0)) {\n        res.velocity = velocity * -factor;\n        res.bounced = true;\n    }\n    return res;\n}\nfunction checkSelector(element, selectors) {\n    const res = executeOnSingleOrMultiple(selectors, (selector) => {\n        return element.matches(selector);\n    });\n    return isArray(res) ? res.some((t) => t) : res;\n}\nexport function isSsr() {\n    return typeof window === \"undefined\" || !window || typeof window.document === \"undefined\" || !window.document;\n}\nexport function hasMatchMedia() {\n    return !isSsr() && typeof matchMedia !== \"undefined\";\n}\nexport function safeMatchMedia(query) {\n    if (!hasMatchMedia()) {\n        return;\n    }\n    return matchMedia(query);\n}\nexport function safeMutationObserver(callback) {\n    if (isSsr() || typeof MutationObserver === \"undefined\") {\n        return;\n    }\n    return new MutationObserver(callback);\n}\nexport function isInArray(value, array) {\n    return value === array || (isArray(array) && array.indexOf(value) > -1);\n}\nexport async function loadFont(font, weight) {\n    try {\n        await document.fonts.load(`${weight ?? \"400\"} 36px '${font ?? \"Verdana\"}'`);\n    }\n    catch {\n    }\n}\nexport function arrayRandomIndex(array) {\n    return Math.floor(getRandom() * array.length);\n}\nexport function itemFromArray(array, index, useIndex = true) {\n    return array[index !== undefined && useIndex ? index % array.length : arrayRandomIndex(array)];\n}\nexport function isPointInside(point, size, offset, radius, direction) {\n    return areBoundsInside(calculateBounds(point, radius ?? 0), size, offset, direction);\n}\nexport function areBoundsInside(bounds, size, offset, direction) {\n    let inside = true;\n    if (!direction || direction === \"bottom\") {\n        inside = bounds.top < size.height + offset.x;\n    }\n    if (inside && (!direction || direction === \"left\")) {\n        inside = bounds.right > offset.x;\n    }\n    if (inside && (!direction || direction === \"right\")) {\n        inside = bounds.left < size.width + offset.y;\n    }\n    if (inside && (!direction || direction === \"top\")) {\n        inside = bounds.bottom > offset.y;\n    }\n    return inside;\n}\nexport function calculateBounds(point, radius) {\n    return {\n        bottom: point.y + radius,\n        left: point.x - radius,\n        right: point.x + radius,\n        top: point.y - radius,\n    };\n}\nexport function deepExtend(destination, ...sources) {\n    for (const source of sources) {\n        if (source === undefined || source === null) {\n            continue;\n        }\n        if (!isObject(source)) {\n            destination = source;\n            continue;\n        }\n        const sourceIsArray = Array.isArray(source);\n        if (sourceIsArray && (isObject(destination) || !destination || !Array.isArray(destination))) {\n            destination = [];\n        }\n        else if (!sourceIsArray && (isObject(destination) || !destination || Array.isArray(destination))) {\n            destination = {};\n        }\n        for (const key in source) {\n            if (key === \"__proto__\") {\n                continue;\n            }\n            const sourceDict = source, value = sourceDict[key], destDict = destination;\n            destDict[key] =\n                isObject(value) && Array.isArray(value)\n                    ? value.map((v) => deepExtend(destDict[key], v))\n                    : deepExtend(destDict[key], value);\n        }\n    }\n    return destination;\n}\nexport function isDivModeEnabled(mode, divs) {\n    return !!findItemFromSingleOrMultiple(divs, (t) => t.enable && isInArray(mode, t.mode));\n}\nexport function divModeExecute(mode, divs, callback) {\n    executeOnSingleOrMultiple(divs, (div) => {\n        const divMode = div.mode, divEnabled = div.enable;\n        if (divEnabled && isInArray(mode, divMode)) {\n            singleDivModeExecute(div, callback);\n        }\n    });\n}\nexport function singleDivModeExecute(div, callback) {\n    const selectors = div.selectors;\n    executeOnSingleOrMultiple(selectors, (selector) => {\n        callback(selector, div);\n    });\n}\nexport function divMode(divs, element) {\n    if (!element || !divs) {\n        return;\n    }\n    return findItemFromSingleOrMultiple(divs, (div) => {\n        return checkSelector(element, div.selectors);\n    });\n}\nexport function circleBounceDataFromParticle(p) {\n    return {\n        position: p.getPosition(),\n        radius: p.getRadius(),\n        mass: p.getMass(),\n        velocity: p.velocity,\n        factor: Vector.create(getValue(p.options.bounce.horizontal), getValue(p.options.bounce.vertical)),\n    };\n}\nexport function circleBounce(p1, p2) {\n    const { x: xVelocityDiff, y: yVelocityDiff } = p1.velocity.sub(p2.velocity), [pos1, pos2] = [p1.position, p2.position], { dx: xDist, dy: yDist } = getDistances(pos2, pos1);\n    if (xVelocityDiff * xDist + yVelocityDiff * yDist < 0) {\n        return;\n    }\n    const angle = -Math.atan2(yDist, xDist), m1 = p1.mass, m2 = p2.mass, u1 = p1.velocity.rotate(angle), u2 = p2.velocity.rotate(angle), v1 = collisionVelocity(u1, u2, m1, m2), v2 = collisionVelocity(u2, u1, m1, m2), vFinal1 = v1.rotate(-angle), vFinal2 = v2.rotate(-angle);\n    p1.velocity.x = vFinal1.x * p1.factor.x;\n    p1.velocity.y = vFinal1.y * p1.factor.y;\n    p2.velocity.x = vFinal2.x * p2.factor.x;\n    p2.velocity.y = vFinal2.y * p2.factor.y;\n}\nexport function rectBounce(particle, divBounds) {\n    const pPos = particle.getPosition(), size = particle.getRadius(), bounds = calculateBounds(pPos, size), resH = rectSideBounce({\n        pSide: {\n            min: bounds.left,\n            max: bounds.right,\n        },\n        pOtherSide: {\n            min: bounds.top,\n            max: bounds.bottom,\n        },\n        rectSide: {\n            min: divBounds.left,\n            max: divBounds.right,\n        },\n        rectOtherSide: {\n            min: divBounds.top,\n            max: divBounds.bottom,\n        },\n        velocity: particle.velocity.x,\n        factor: getValue(particle.options.bounce.horizontal),\n    });\n    if (resH.bounced) {\n        if (resH.velocity !== undefined) {\n            particle.velocity.x = resH.velocity;\n        }\n        if (resH.position !== undefined) {\n            particle.position.x = resH.position;\n        }\n    }\n    const resV = rectSideBounce({\n        pSide: {\n            min: bounds.top,\n            max: bounds.bottom,\n        },\n        pOtherSide: {\n            min: bounds.left,\n            max: bounds.right,\n        },\n        rectSide: {\n            min: divBounds.top,\n            max: divBounds.bottom,\n        },\n        rectOtherSide: {\n            min: divBounds.left,\n            max: divBounds.right,\n        },\n        velocity: particle.velocity.y,\n        factor: getValue(particle.options.bounce.vertical),\n    });\n    if (resV.bounced) {\n        if (resV.velocity !== undefined) {\n            particle.velocity.y = resV.velocity;\n        }\n        if (resV.position !== undefined) {\n            particle.position.y = resV.position;\n        }\n    }\n}\nexport function executeOnSingleOrMultiple(obj, callback) {\n    return isArray(obj) ? obj.map((item, index) => callback(item, index)) : callback(obj, 0);\n}\nexport function itemFromSingleOrMultiple(obj, index, useIndex) {\n    return isArray(obj) ? itemFromArray(obj, index, useIndex) : obj;\n}\nexport function findItemFromSingleOrMultiple(obj, callback) {\n    return isArray(obj) ? obj.find((t, index) => callback(t, index)) : callback(obj, 0) ? obj : undefined;\n}\nexport function initParticleNumericAnimationValue(options, pxRatio) {\n    const valueRange = options.value, animationOptions = options.animation, res = {\n        delayTime: getRangeValue(animationOptions.delay) * 1000,\n        enable: animationOptions.enable,\n        value: getRangeValue(options.value) * pxRatio,\n        max: getRangeMax(valueRange) * pxRatio,\n        min: getRangeMin(valueRange) * pxRatio,\n        loops: 0,\n        maxLoops: getRangeValue(animationOptions.count),\n        time: 0,\n    };\n    if (animationOptions.enable) {\n        res.decay = 1 - getRangeValue(animationOptions.decay);\n        switch (animationOptions.mode) {\n            case \"increase\":\n                res.status = \"increasing\";\n                break;\n            case \"decrease\":\n                res.status = \"decreasing\";\n                break;\n            case \"random\":\n                res.status = getRandom() >= 0.5 ? \"increasing\" : \"decreasing\";\n                break;\n        }\n        const autoStatus = animationOptions.mode === \"auto\";\n        switch (animationOptions.startValue) {\n            case \"min\":\n                res.value = res.min;\n                if (autoStatus) {\n                    res.status = \"increasing\";\n                }\n                break;\n            case \"max\":\n                res.value = res.max;\n                if (autoStatus) {\n                    res.status = \"decreasing\";\n                }\n                break;\n            case \"random\":\n            default:\n                res.value = randomInRange(res);\n                if (autoStatus) {\n                    res.status = getRandom() >= 0.5 ? \"increasing\" : \"decreasing\";\n                }\n                break;\n        }\n    }\n    res.initialValue = res.value;\n    return res;\n}\nfunction getPositionOrSize(positionOrSize, canvasSize) {\n    const isPercent = positionOrSize.mode === \"percent\";\n    if (!isPercent) {\n        const { mode: _, ...rest } = positionOrSize;\n        return rest;\n    }\n    const isPosition = \"x\" in positionOrSize;\n    if (isPosition) {\n        return {\n            x: (positionOrSize.x / 100) * canvasSize.width,\n            y: (positionOrSize.y / 100) * canvasSize.height,\n        };\n    }\n    else {\n        return {\n            width: (positionOrSize.width / 100) * canvasSize.width,\n            height: (positionOrSize.height / 100) * canvasSize.height,\n        };\n    }\n}\nexport function getPosition(position, canvasSize) {\n    return getPositionOrSize(position, canvasSize);\n}\nexport function getSize(size, canvasSize) {\n    return getPositionOrSize(size, canvasSize);\n}\nexport function isBoolean(arg) {\n    return typeof arg === \"boolean\";\n}\nexport function isString(arg) {\n    return typeof arg === \"string\";\n}\nexport function isNumber(arg) {\n    return typeof arg === \"number\";\n}\nexport function isFunction(arg) {\n    return typeof arg === \"function\";\n}\nexport function isObject(arg) {\n    return typeof arg === \"object\" && arg !== null;\n}\nexport function isArray(arg) {\n    return Array.isArray(arg);\n}\n", "import { getRandom, getRangeValue, mix, randomInRange, setRangeValue } from \"./NumberUtils\";\nimport { isArray, isString, itemFromArray } from \"./Utils\";\nconst randomColorValue = \"random\", midColorValue = \"mid\", colorManagers = new Map();\nexport function addColorManager(manager) {\n    colorManagers.set(manager.key, manager);\n}\nfunction hue2rgb(p, q, t) {\n    if (t < 0) {\n        t += 1;\n    }\n    if (t > 1) {\n        t -= 1;\n    }\n    if (t < 1 / 6) {\n        return p + (q - p) * 6 * t;\n    }\n    if (t < 1 / 2) {\n        return q;\n    }\n    if (t < 2 / 3) {\n        return p + (q - p) * (2 / 3 - t) * 6;\n    }\n    return p;\n}\nfunction stringToRgba(input) {\n    for (const [, manager] of colorManagers) {\n        if (input.startsWith(manager.stringPrefix)) {\n            return manager.parseString(input);\n        }\n    }\n    const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])?$/i, hexFixed = input.replace(shorthandRegex, (_, r, g, b, a) => {\n        return r + r + g + g + b + b + (a !== undefined ? a + a : \"\");\n    }), regex = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})?$/i, result = regex.exec(hexFixed);\n    return result\n        ? {\n            a: result[4] !== undefined ? parseInt(result[4], 16) / 0xff : 1,\n            b: parseInt(result[3], 16),\n            g: parseInt(result[2], 16),\n            r: parseInt(result[1], 16),\n        }\n        : undefined;\n}\nexport function rangeColorToRgb(input, index, useIndex = true) {\n    if (!input) {\n        return;\n    }\n    const color = isString(input) ? { value: input } : input;\n    if (isString(color.value)) {\n        return colorToRgb(color.value, index, useIndex);\n    }\n    if (isArray(color.value)) {\n        return rangeColorToRgb({\n            value: itemFromArray(color.value, index, useIndex),\n        });\n    }\n    for (const [, manager] of colorManagers) {\n        const res = manager.handleRangeColor(color);\n        if (res) {\n            return res;\n        }\n    }\n}\nexport function colorToRgb(input, index, useIndex = true) {\n    if (!input) {\n        return;\n    }\n    const color = isString(input) ? { value: input } : input;\n    if (isString(color.value)) {\n        return color.value === randomColorValue ? getRandomRgbColor() : stringToRgb(color.value);\n    }\n    if (isArray(color.value)) {\n        return colorToRgb({\n            value: itemFromArray(color.value, index, useIndex),\n        });\n    }\n    for (const [, manager] of colorManagers) {\n        const res = manager.handleColor(color);\n        if (res) {\n            return res;\n        }\n    }\n}\nexport function colorToHsl(color, index, useIndex = true) {\n    const rgb = colorToRgb(color, index, useIndex);\n    return rgb ? rgbToHsl(rgb) : undefined;\n}\nexport function rangeColorToHsl(color, index, useIndex = true) {\n    const rgb = rangeColorToRgb(color, index, useIndex);\n    return rgb ? rgbToHsl(rgb) : undefined;\n}\nexport function rgbToHsl(color) {\n    const r1 = color.r / 255, g1 = color.g / 255, b1 = color.b / 255, max = Math.max(r1, g1, b1), min = Math.min(r1, g1, b1), res = {\n        h: 0,\n        l: (max + min) / 2,\n        s: 0,\n    };\n    if (max !== min) {\n        res.s = res.l < 0.5 ? (max - min) / (max + min) : (max - min) / (2.0 - max - min);\n        res.h =\n            r1 === max\n                ? (g1 - b1) / (max - min)\n                : (res.h = g1 === max ? 2.0 + (b1 - r1) / (max - min) : 4.0 + (r1 - g1) / (max - min));\n    }\n    res.l *= 100;\n    res.s *= 100;\n    res.h *= 60;\n    if (res.h < 0) {\n        res.h += 360;\n    }\n    if (res.h >= 360) {\n        res.h -= 360;\n    }\n    return res;\n}\nexport function stringToAlpha(input) {\n    return stringToRgba(input)?.a;\n}\nexport function stringToRgb(input) {\n    return stringToRgba(input);\n}\nexport function hslToRgb(hsl) {\n    const result = { b: 0, g: 0, r: 0 }, hslPercent = {\n        h: hsl.h / 360,\n        l: hsl.l / 100,\n        s: hsl.s / 100,\n    };\n    if (!hslPercent.s) {\n        result.r = result.g = result.b = hslPercent.l;\n    }\n    else {\n        const q = hslPercent.l < 0.5\n            ? hslPercent.l * (1 + hslPercent.s)\n            : hslPercent.l + hslPercent.s - hslPercent.l * hslPercent.s, p = 2 * hslPercent.l - q;\n        result.r = hue2rgb(p, q, hslPercent.h + 1 / 3);\n        result.g = hue2rgb(p, q, hslPercent.h);\n        result.b = hue2rgb(p, q, hslPercent.h - 1 / 3);\n    }\n    result.r = Math.floor(result.r * 255);\n    result.g = Math.floor(result.g * 255);\n    result.b = Math.floor(result.b * 255);\n    return result;\n}\nexport function hslaToRgba(hsla) {\n    const rgbResult = hslToRgb(hsla);\n    return {\n        a: hsla.a,\n        b: rgbResult.b,\n        g: rgbResult.g,\n        r: rgbResult.r,\n    };\n}\nexport function getRandomRgbColor(min) {\n    const fixedMin = min ?? 0;\n    return {\n        b: Math.floor(randomInRange(setRangeValue(fixedMin, 256))),\n        g: Math.floor(randomInRange(setRangeValue(fixedMin, 256))),\n        r: Math.floor(randomInRange(setRangeValue(fixedMin, 256))),\n    };\n}\nexport function getStyleFromRgb(color, opacity) {\n    return `rgba(${color.r}, ${color.g}, ${color.b}, ${opacity ?? 1})`;\n}\nexport function getStyleFromHsl(color, opacity) {\n    return `hsla(${color.h}, ${color.s}%, ${color.l}%, ${opacity ?? 1})`;\n}\nexport function colorMix(color1, color2, size1, size2) {\n    let rgb1 = color1, rgb2 = color2;\n    if (rgb1.r === undefined) {\n        rgb1 = hslToRgb(color1);\n    }\n    if (rgb2.r === undefined) {\n        rgb2 = hslToRgb(color2);\n    }\n    return {\n        b: mix(rgb1.b, rgb2.b, size1, size2),\n        g: mix(rgb1.g, rgb2.g, size1, size2),\n        r: mix(rgb1.r, rgb2.r, size1, size2),\n    };\n}\nexport function getLinkColor(p1, p2, linkColor) {\n    if (linkColor === randomColorValue) {\n        return getRandomRgbColor();\n    }\n    else if (linkColor === midColorValue) {\n        const sourceColor = p1.getFillColor() ?? p1.getStrokeColor(), destColor = p2?.getFillColor() ?? p2?.getStrokeColor();\n        if (sourceColor && destColor && p2) {\n            return colorMix(sourceColor, destColor, p1.getRadius(), p2.getRadius());\n        }\n        else {\n            const hslColor = sourceColor ?? destColor;\n            if (hslColor) {\n                return hslToRgb(hslColor);\n            }\n        }\n    }\n    else {\n        return linkColor;\n    }\n}\nexport function getLinkRandomColor(optColor, blink, consent) {\n    const color = isString(optColor) ? optColor : optColor.value;\n    if (color === randomColorValue) {\n        if (consent) {\n            return rangeColorToRgb({\n                value: color,\n            });\n        }\n        if (blink) {\n            return randomColorValue;\n        }\n        return midColorValue;\n    }\n    else if (color === midColorValue) {\n        return midColorValue;\n    }\n    else {\n        return rangeColorToRgb({\n            value: color,\n        });\n    }\n}\nexport function getHslFromAnimation(animation) {\n    return animation !== undefined\n        ? {\n            h: animation.h.value,\n            s: animation.s.value,\n            l: animation.l.value,\n        }\n        : undefined;\n}\nexport function getHslAnimationFromHsl(hsl, animationOptions, reduceFactor) {\n    const resColor = {\n        h: {\n            enable: false,\n            value: hsl.h,\n        },\n        s: {\n            enable: false,\n            value: hsl.s,\n        },\n        l: {\n            enable: false,\n            value: hsl.l,\n        },\n    };\n    if (animationOptions) {\n        setColorAnimation(resColor.h, animationOptions.h, reduceFactor);\n        setColorAnimation(resColor.s, animationOptions.s, reduceFactor);\n        setColorAnimation(resColor.l, animationOptions.l, reduceFactor);\n    }\n    return resColor;\n}\nfunction setColorAnimation(colorValue, colorAnimation, reduceFactor) {\n    colorValue.enable = colorAnimation.enable;\n    if (colorValue.enable) {\n        colorValue.velocity = (getRangeValue(colorAnimation.speed) / 100) * reduceFactor;\n        colorValue.decay = 1 - getRangeValue(colorAnimation.decay);\n        colorValue.status = \"increasing\";\n        colorValue.loops = 0;\n        colorValue.maxLoops = getRangeValue(colorAnimation.count);\n        colorValue.time = 0;\n        colorValue.delayTime = getRangeValue(colorAnimation.delay) * 1000;\n        if (!colorAnimation.sync) {\n            colorValue.velocity *= getRandom();\n            colorValue.value *= getRandom();\n        }\n        colorValue.initialValue = colorValue.value;\n    }\n    else {\n        colorValue.velocity = 0;\n    }\n}\n", "import { getStyleFromRgb } from \"./ColorUtils\";\nexport function drawLine(context, begin, end) {\n    context.beginPath();\n    context.moveTo(begin.x, begin.y);\n    context.lineTo(end.x, end.y);\n    context.closePath();\n}\nexport function drawTriangle(context, p1, p2, p3) {\n    context.beginPath();\n    context.moveTo(p1.x, p1.y);\n    context.lineTo(p2.x, p2.y);\n    context.lineTo(p3.x, p3.y);\n    context.closePath();\n}\nexport function paintBase(context, dimension, baseColor) {\n    context.fillStyle = baseColor ?? \"rgba(0,0,0,0)\";\n    context.fillRect(0, 0, dimension.width, dimension.height);\n}\nexport function paintImage(context, dimension, image, opacity) {\n    if (!image) {\n        return;\n    }\n    context.globalAlpha = opacity;\n    context.drawImage(image, 0, 0, dimension.width, dimension.height);\n    context.globalAlpha = 1;\n}\nexport function clear(context, dimension) {\n    context.clearRect(0, 0, dimension.width, dimension.height);\n}\nexport function drawParticle(data) {\n    const { container, context, particle, delta, colorStyles, backgroundMask, composite, radius, opacity, shadow, transform, } = data;\n    const pos = particle.getPosition(), angle = particle.rotation + (particle.pathRotation ? particle.velocity.angle : 0), rotateData = {\n        sin: Math.sin(angle),\n        cos: Math.cos(angle),\n    }, transformData = {\n        a: rotateData.cos * (transform.a ?? 1),\n        b: rotateData.sin * (transform.b ?? 1),\n        c: -rotateData.sin * (transform.c ?? 1),\n        d: rotateData.cos * (transform.d ?? 1),\n    };\n    context.setTransform(transformData.a, transformData.b, transformData.c, transformData.d, pos.x, pos.y);\n    context.beginPath();\n    if (backgroundMask) {\n        context.globalCompositeOperation = composite;\n    }\n    const shadowColor = particle.shadowColor;\n    if (shadow.enable && shadowColor) {\n        context.shadowBlur = shadow.blur;\n        context.shadowColor = getStyleFromRgb(shadowColor);\n        context.shadowOffsetX = shadow.offset.x;\n        context.shadowOffsetY = shadow.offset.y;\n    }\n    if (colorStyles.fill) {\n        context.fillStyle = colorStyles.fill;\n    }\n    const strokeWidth = particle.strokeWidth ?? 0;\n    context.lineWidth = strokeWidth;\n    if (colorStyles.stroke) {\n        context.strokeStyle = colorStyles.stroke;\n    }\n    drawShape(container, context, particle, radius, opacity, delta);\n    if (strokeWidth > 0) {\n        context.stroke();\n    }\n    if (particle.close) {\n        context.closePath();\n    }\n    if (particle.fill) {\n        context.fill();\n    }\n    drawShapeAfterEffect(container, context, particle, radius, opacity, delta);\n    context.globalCompositeOperation = \"source-over\";\n    context.setTransform(1, 0, 0, 1, 0, 0);\n}\nexport function drawShape(container, context, particle, radius, opacity, delta) {\n    if (!particle.shape) {\n        return;\n    }\n    const drawer = container.drawers.get(particle.shape);\n    if (!drawer) {\n        return;\n    }\n    drawer.draw(context, particle, radius, opacity, delta, container.retina.pixelRatio);\n}\nexport function drawShapeAfterEffect(container, context, particle, radius, opacity, delta) {\n    if (!particle.shape) {\n        return;\n    }\n    const drawer = container.drawers.get(particle.shape);\n    if (!drawer || !drawer.afterEffect) {\n        return;\n    }\n    drawer.afterEffect(context, particle, radius, opacity, delta, container.retina.pixelRatio);\n}\nexport function drawPlugin(context, plugin, delta) {\n    if (!plugin.draw) {\n        return;\n    }\n    plugin.draw(context, delta);\n}\nexport function drawParticlePlugin(context, plugin, particle, delta) {\n    if (!plugin.drawParticle) {\n        return;\n    }\n    plugin.drawParticle(context, particle, delta);\n}\nexport function alterHsl(color, type, value) {\n    return {\n        h: color.h,\n        s: color.s,\n        l: color.l + (type === \"darken\" ? -1 : 1) * value,\n    };\n}\n", "import { clear, drawParticle, drawParticlePlugin, drawPlugin, paintBase, paintImage } from \"../Utils/CanvasUtils\";\nimport { deepExtend, getLogger, safeMutationObserver } from \"../Utils/Utils\";\nimport { getStyleFromHsl, getStyleFromRgb, rangeColorToHsl, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { generatedAttribute } from \"./Utils/Constants\";\nfunction setTransformValue(factor, newFactor, key) {\n    const newValue = newFactor[key];\n    if (newValue !== undefined) {\n        factor[key] = (factor[key] ?? 1) * newValue;\n    }\n}\nexport class Canvas {\n    constructor(container) {\n        this.container = container;\n        this._applyPostDrawUpdaters = (particle) => {\n            for (const updater of this._postDrawUpdaters) {\n                updater.afterDraw && updater.afterDraw(particle);\n            }\n        };\n        this._applyPreDrawUpdaters = (ctx, particle, radius, zOpacity, colorStyles, transform) => {\n            for (const updater of this._preDrawUpdaters) {\n                if (updater.getColorStyles) {\n                    const { fill, stroke } = updater.getColorStyles(particle, ctx, radius, zOpacity);\n                    if (fill) {\n                        colorStyles.fill = fill;\n                    }\n                    if (stroke) {\n                        colorStyles.stroke = stroke;\n                    }\n                }\n                if (updater.getTransformValues) {\n                    const updaterTransform = updater.getTransformValues(particle);\n                    for (const key in updaterTransform) {\n                        setTransformValue(transform, updaterTransform, key);\n                    }\n                }\n                updater.beforeDraw && updater.beforeDraw(particle);\n            }\n        };\n        this._applyResizePlugins = () => {\n            for (const plugin of this._resizePlugins) {\n                plugin.resize && plugin.resize();\n            }\n        };\n        this._getPluginParticleColors = (particle) => {\n            let fColor, sColor;\n            for (const plugin of this._colorPlugins) {\n                if (!fColor && plugin.particleFillColor) {\n                    fColor = rangeColorToHsl(plugin.particleFillColor(particle));\n                }\n                if (!sColor && plugin.particleStrokeColor) {\n                    sColor = rangeColorToHsl(plugin.particleStrokeColor(particle));\n                }\n                if (fColor && sColor) {\n                    break;\n                }\n            }\n            return [fColor, sColor];\n        };\n        this._initCover = () => {\n            const options = this.container.actualOptions, cover = options.backgroundMask.cover, color = cover.color, coverRgb = rangeColorToRgb(color);\n            if (coverRgb) {\n                const coverColor = {\n                    ...coverRgb,\n                    a: cover.opacity,\n                };\n                this._coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n            }\n        };\n        this._initStyle = () => {\n            const element = this.element, options = this.container.actualOptions;\n            if (!element) {\n                return;\n            }\n            if (this._fullScreen) {\n                this._originalStyle = deepExtend({}, element.style);\n                this._setFullScreenStyle();\n            }\n            else {\n                this._resetOriginalStyle();\n            }\n            for (const key in options.style) {\n                if (!key || !options.style) {\n                    continue;\n                }\n                const value = options.style[key];\n                if (!value) {\n                    continue;\n                }\n                element.style.setProperty(key, value, \"important\");\n            }\n        };\n        this._initTrail = async () => {\n            const options = this.container.actualOptions, trail = options.particles.move.trail, trailFill = trail.fill;\n            if (!trail.enable) {\n                return;\n            }\n            if (trailFill.color) {\n                const fillColor = rangeColorToRgb(trailFill.color);\n                if (!fillColor) {\n                    return;\n                }\n                const trail = options.particles.move.trail;\n                this._trailFill = {\n                    color: {\n                        ...fillColor,\n                    },\n                    opacity: 1 / trail.length,\n                };\n            }\n            else {\n                await new Promise((resolve, reject) => {\n                    if (!trailFill.image) {\n                        return;\n                    }\n                    const img = document.createElement(\"img\");\n                    img.addEventListener(\"load\", () => {\n                        this._trailFill = {\n                            image: img,\n                            opacity: 1 / trail.length,\n                        };\n                        resolve();\n                    });\n                    img.addEventListener(\"error\", (evt) => {\n                        reject(evt.error);\n                    });\n                    img.src = trailFill.image;\n                });\n            }\n        };\n        this._paintBase = (baseColor) => {\n            this.draw((ctx) => paintBase(ctx, this.size, baseColor));\n        };\n        this._paintImage = (image, opacity) => {\n            this.draw((ctx) => paintImage(ctx, this.size, image, opacity));\n        };\n        this._repairStyle = () => {\n            const element = this.element;\n            if (!element) {\n                return;\n            }\n            this._safeMutationObserver((observer) => observer.disconnect());\n            this._initStyle();\n            this.initBackground();\n            this._safeMutationObserver((observer) => observer.observe(element, { attributes: true }));\n        };\n        this._resetOriginalStyle = () => {\n            const element = this.element, originalStyle = this._originalStyle;\n            if (!(element && originalStyle)) {\n                return;\n            }\n            const style = element.style;\n            style.position = originalStyle.position;\n            style.zIndex = originalStyle.zIndex;\n            style.top = originalStyle.top;\n            style.left = originalStyle.left;\n            style.width = originalStyle.width;\n            style.height = originalStyle.height;\n        };\n        this._safeMutationObserver = (callback) => {\n            if (!this._mutationObserver) {\n                return;\n            }\n            callback(this._mutationObserver);\n        };\n        this._setFullScreenStyle = () => {\n            const element = this.element;\n            if (!element) {\n                return;\n            }\n            const priority = \"important\", style = element.style;\n            style.setProperty(\"position\", \"fixed\", priority);\n            style.setProperty(\"z-index\", this.container.actualOptions.fullScreen.zIndex.toString(10), priority);\n            style.setProperty(\"top\", \"0\", priority);\n            style.setProperty(\"left\", \"0\", priority);\n            style.setProperty(\"width\", \"100%\", priority);\n            style.setProperty(\"height\", \"100%\", priority);\n        };\n        this.size = {\n            height: 0,\n            width: 0,\n        };\n        this._context = null;\n        this._generated = false;\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n    }\n    get _fullScreen() {\n        return this.container.actualOptions.fullScreen.enable;\n    }\n    clear() {\n        const options = this.container.actualOptions, trail = options.particles.move.trail, trailFill = this._trailFill;\n        if (options.backgroundMask.enable) {\n            this.paint();\n        }\n        else if (trail.enable && trail.length > 0 && trailFill) {\n            if (trailFill.color) {\n                this._paintBase(getStyleFromRgb(trailFill.color, trailFill.opacity));\n            }\n            else if (trailFill.image) {\n                this._paintImage(trailFill.image, trailFill.opacity);\n            }\n        }\n        else {\n            this.draw((ctx) => {\n                clear(ctx, this.size);\n            });\n        }\n    }\n    destroy() {\n        this.stop();\n        if (this._generated) {\n            const element = this.element;\n            element && element.remove();\n        }\n        else {\n            this._resetOriginalStyle();\n        }\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n    }\n    draw(cb) {\n        const ctx = this._context;\n        if (!ctx) {\n            return;\n        }\n        return cb(ctx);\n    }\n    drawParticle(particle, delta) {\n        if (particle.spawning || particle.destroyed) {\n            return;\n        }\n        const radius = particle.getRadius();\n        if (radius <= 0) {\n            return;\n        }\n        const pfColor = particle.getFillColor(), psColor = particle.getStrokeColor() ?? pfColor;\n        let [fColor, sColor] = this._getPluginParticleColors(particle);\n        if (!fColor) {\n            fColor = pfColor;\n        }\n        if (!sColor) {\n            sColor = psColor;\n        }\n        if (!fColor && !sColor) {\n            return;\n        }\n        this.draw((ctx) => {\n            const container = this.container, options = container.actualOptions, zIndexOptions = particle.options.zIndex, zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate, opacity = particle.bubble.opacity ?? particle.opacity?.value ?? 1, strokeOpacity = particle.strokeOpacity ?? opacity, zOpacity = opacity * zOpacityFactor, zStrokeOpacity = strokeOpacity * zOpacityFactor, transform = {}, colorStyles = {\n                fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined,\n            };\n            colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n            this._applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform);\n            drawParticle({\n                container,\n                context: ctx,\n                particle,\n                delta,\n                colorStyles,\n                backgroundMask: options.backgroundMask.enable,\n                composite: options.backgroundMask.composite,\n                radius: radius * (1 - particle.zIndexFactor) ** zIndexOptions.sizeRate,\n                opacity: zOpacity,\n                shadow: particle.options.shadow,\n                transform,\n            });\n            this._applyPostDrawUpdaters(particle);\n        });\n    }\n    drawParticlePlugin(plugin, particle, delta) {\n        this.draw((ctx) => drawParticlePlugin(ctx, plugin, particle, delta));\n    }\n    drawPlugin(plugin, delta) {\n        this.draw((ctx) => drawPlugin(ctx, plugin, delta));\n    }\n    async init() {\n        this._safeMutationObserver((obs) => obs.disconnect());\n        this._mutationObserver = safeMutationObserver((records) => {\n            for (const record of records) {\n                if (record.type === \"attributes\" && record.attributeName === \"style\") {\n                    this._repairStyle();\n                }\n            }\n        });\n        this.resize();\n        this._initStyle();\n        this._initCover();\n        try {\n            await this._initTrail();\n        }\n        catch (e) {\n            getLogger().error(e);\n        }\n        this.initBackground();\n        this._safeMutationObserver((obs) => {\n            if (!this.element) {\n                return;\n            }\n            obs.observe(this.element, { attributes: true });\n        });\n        this.initUpdaters();\n        this.initPlugins();\n        this.paint();\n    }\n    initBackground() {\n        const options = this.container.actualOptions, background = options.background, element = this.element;\n        if (!element) {\n            return;\n        }\n        const elementStyle = element.style;\n        if (!elementStyle) {\n            return;\n        }\n        if (background.color) {\n            const color = rangeColorToRgb(background.color);\n            elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n        }\n        else {\n            elementStyle.backgroundColor = \"\";\n        }\n        elementStyle.backgroundImage = background.image || \"\";\n        elementStyle.backgroundPosition = background.position || \"\";\n        elementStyle.backgroundRepeat = background.repeat || \"\";\n        elementStyle.backgroundSize = background.size || \"\";\n    }\n    initPlugins() {\n        this._resizePlugins = [];\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.resize) {\n                this._resizePlugins.push(plugin);\n            }\n            if (plugin.particleFillColor || plugin.particleStrokeColor) {\n                this._colorPlugins.push(plugin);\n            }\n        }\n    }\n    initUpdaters() {\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        for (const updater of this.container.particles.updaters) {\n            if (updater.afterDraw) {\n                this._postDrawUpdaters.push(updater);\n            }\n            if (updater.getColorStyles || updater.getTransformValues || updater.beforeDraw) {\n                this._preDrawUpdaters.push(updater);\n            }\n        }\n    }\n    loadCanvas(canvas) {\n        if (this._generated && this.element) {\n            this.element.remove();\n        }\n        this._generated =\n            canvas.dataset && generatedAttribute in canvas.dataset\n                ? canvas.dataset[generatedAttribute] === \"true\"\n                : this._generated;\n        this.element = canvas;\n        this.element.ariaHidden = \"true\";\n        this._originalStyle = deepExtend({}, this.element.style);\n        this.size.height = canvas.offsetHeight;\n        this.size.width = canvas.offsetWidth;\n        this._context = this.element.getContext(\"2d\");\n        this._safeMutationObserver((obs) => {\n            if (!this.element) {\n                return;\n            }\n            obs.observe(this.element, { attributes: true });\n        });\n        this.container.retina.init();\n        this.initBackground();\n    }\n    paint() {\n        const options = this.container.actualOptions;\n        this.draw((ctx) => {\n            if (options.backgroundMask.enable && options.backgroundMask.cover) {\n                clear(ctx, this.size);\n                this._paintBase(this._coverColorStyle);\n            }\n            else {\n                this._paintBase();\n            }\n        });\n    }\n    resize() {\n        if (!this.element) {\n            return false;\n        }\n        const container = this.container, pxRatio = container.retina.pixelRatio, size = container.canvas.size, newSize = {\n            width: this.element.offsetWidth * pxRatio,\n            height: this.element.offsetHeight * pxRatio,\n        };\n        if (newSize.height === size.height &&\n            newSize.width === size.width &&\n            newSize.height === this.element.height &&\n            newSize.width === this.element.width) {\n            return false;\n        }\n        const oldSize = { ...size };\n        this.element.width = size.width = this.element.offsetWidth * pxRatio;\n        this.element.height = size.height = this.element.offsetHeight * pxRatio;\n        if (this.container.started) {\n            this.resizeFactor = {\n                width: size.width / oldSize.width,\n                height: size.height / oldSize.height,\n            };\n        }\n        return true;\n    }\n    stop() {\n        this._safeMutationObserver((obs) => obs.disconnect());\n        this._mutationObserver = undefined;\n        this.draw((ctx) => clear(ctx, this.size));\n    }\n    async windowResize() {\n        if (!this.element || !this.resize()) {\n            return;\n        }\n        const container = this.container, needsRefresh = container.updateActualOptions();\n        container.particles.setDensity();\n        this._applyResizePlugins();\n        if (needsRefresh) {\n            await container.refresh();\n        }\n    }\n}\n", "import { executeOnSingleOrMultiple, isBoolean, safeMatchMedia } from \"../../Utils/Utils\";\nimport { mouseDownEvent, mouseLeaveEvent, mouseMoveEvent, mouseOutEvent, mouseUpEvent, resizeEvent, touchCancelEvent, touchEndEvent, touchMoveEvent, touchStartEvent, visibilityChangeEvent, } from \"./Constants\";\nfunction manageListener(element, event, handler, add, options) {\n    if (add) {\n        let addOptions = { passive: true };\n        if (isBoolean(options)) {\n            addOptions.capture = options;\n        }\n        else if (options !== undefined) {\n            addOptions = options;\n        }\n        element.addEventListener(event, handler, addOptions);\n    }\n    else {\n        const removeOptions = options;\n        element.removeEventListener(event, handler, removeOptions);\n    }\n}\nexport class EventListeners {\n    constructor(container) {\n        this.container = container;\n        this._doMouseTouchClick = (e) => {\n            const container = this.container, options = container.actualOptions;\n            if (this._canPush) {\n                const mouseInteractivity = container.interactivity.mouse, mousePos = mouseInteractivity.position;\n                if (!mousePos) {\n                    return;\n                }\n                mouseInteractivity.clickPosition = { ...mousePos };\n                mouseInteractivity.clickTime = new Date().getTime();\n                const onClick = options.interactivity.events.onClick;\n                executeOnSingleOrMultiple(onClick.mode, (mode) => this.container.handleClickMode(mode));\n            }\n            if (e.type === \"touchend\") {\n                setTimeout(() => this._mouseTouchFinish(), 500);\n            }\n        };\n        this._handleThemeChange = (e) => {\n            const mediaEvent = e, container = this.container, options = container.options, defaultThemes = options.defaultThemes, themeName = mediaEvent.matches ? defaultThemes.dark : defaultThemes.light, theme = options.themes.find((theme) => theme.name === themeName);\n            if (theme && theme.default.auto) {\n                container.loadTheme(themeName);\n            }\n        };\n        this._handleVisibilityChange = () => {\n            const container = this.container, options = container.actualOptions;\n            this._mouseTouchFinish();\n            if (!options.pauseOnBlur) {\n                return;\n            }\n            if (document && document.hidden) {\n                container.pageHidden = true;\n                container.pause();\n            }\n            else {\n                container.pageHidden = false;\n                if (container.getAnimationStatus()) {\n                    container.play(true);\n                }\n                else {\n                    container.draw(true);\n                }\n            }\n        };\n        this._handleWindowResize = async () => {\n            if (this._resizeTimeout) {\n                clearTimeout(this._resizeTimeout);\n                delete this._resizeTimeout;\n            }\n            this._resizeTimeout = setTimeout(async () => {\n                const canvas = this.container.canvas;\n                canvas && (await canvas.windowResize());\n            }, this.container.actualOptions.interactivity.events.resize.delay * 1000);\n        };\n        this._manageInteractivityListeners = (mouseLeaveTmpEvent, add) => {\n            const handlers = this._handlers, container = this.container, options = container.actualOptions;\n            const interactivityEl = container.interactivity.element;\n            if (!interactivityEl) {\n                return;\n            }\n            const html = interactivityEl, canvasEl = container.canvas.element;\n            if (canvasEl) {\n                canvasEl.style.pointerEvents = html === canvasEl ? \"initial\" : \"none\";\n            }\n            if (!(options.interactivity.events.onHover.enable || options.interactivity.events.onClick.enable)) {\n                return;\n            }\n            manageListener(interactivityEl, mouseMoveEvent, handlers.mouseMove, add);\n            manageListener(interactivityEl, touchStartEvent, handlers.touchStart, add);\n            manageListener(interactivityEl, touchMoveEvent, handlers.touchMove, add);\n            if (!options.interactivity.events.onClick.enable) {\n                manageListener(interactivityEl, touchEndEvent, handlers.touchEnd, add);\n            }\n            else {\n                manageListener(interactivityEl, touchEndEvent, handlers.touchEndClick, add);\n                manageListener(interactivityEl, mouseUpEvent, handlers.mouseUp, add);\n                manageListener(interactivityEl, mouseDownEvent, handlers.mouseDown, add);\n            }\n            manageListener(interactivityEl, mouseLeaveTmpEvent, handlers.mouseLeave, add);\n            manageListener(interactivityEl, touchCancelEvent, handlers.touchCancel, add);\n        };\n        this._manageListeners = (add) => {\n            const handlers = this._handlers, container = this.container, options = container.actualOptions, detectType = options.interactivity.detectsOn, canvasEl = container.canvas.element;\n            let mouseLeaveTmpEvent = mouseLeaveEvent;\n            if (detectType === \"window\") {\n                container.interactivity.element = window;\n                mouseLeaveTmpEvent = mouseOutEvent;\n            }\n            else if (detectType === \"parent\" && canvasEl) {\n                container.interactivity.element = canvasEl.parentElement ?? canvasEl.parentNode;\n            }\n            else {\n                container.interactivity.element = canvasEl;\n            }\n            this._manageMediaMatch(add);\n            this._manageResize(add);\n            this._manageInteractivityListeners(mouseLeaveTmpEvent, add);\n            if (document) {\n                manageListener(document, visibilityChangeEvent, handlers.visibilityChange, add, false);\n            }\n        };\n        this._manageMediaMatch = (add) => {\n            const handlers = this._handlers, mediaMatch = safeMatchMedia(\"(prefers-color-scheme: dark)\");\n            if (!mediaMatch) {\n                return;\n            }\n            if (mediaMatch.addEventListener !== undefined) {\n                manageListener(mediaMatch, \"change\", handlers.themeChange, add);\n                return;\n            }\n            if (mediaMatch.addListener === undefined) {\n                return;\n            }\n            if (add) {\n                mediaMatch.addListener(handlers.oldThemeChange);\n            }\n            else {\n                mediaMatch.removeListener(handlers.oldThemeChange);\n            }\n        };\n        this._manageResize = (add) => {\n            const handlers = this._handlers, container = this.container, options = container.actualOptions;\n            if (!options.interactivity.events.resize) {\n                return;\n            }\n            if (typeof ResizeObserver === \"undefined\") {\n                manageListener(window, resizeEvent, handlers.resize, add);\n                return;\n            }\n            const canvasEl = container.canvas.element;\n            if (this._resizeObserver && !add) {\n                if (canvasEl) {\n                    this._resizeObserver.unobserve(canvasEl);\n                }\n                this._resizeObserver.disconnect();\n                delete this._resizeObserver;\n            }\n            else if (!this._resizeObserver && add && canvasEl) {\n                this._resizeObserver = new ResizeObserver(async (entries) => {\n                    const entry = entries.find((e) => e.target === canvasEl);\n                    if (!entry) {\n                        return;\n                    }\n                    await this._handleWindowResize();\n                });\n                this._resizeObserver.observe(canvasEl);\n            }\n        };\n        this._mouseDown = () => {\n            const { interactivity } = this.container;\n            if (!interactivity) {\n                return;\n            }\n            const { mouse } = interactivity;\n            mouse.clicking = true;\n            mouse.downPosition = mouse.position;\n        };\n        this._mouseTouchClick = (e) => {\n            const container = this.container, options = container.actualOptions, { mouse } = container.interactivity;\n            mouse.inside = true;\n            let handled = false;\n            const mousePosition = mouse.position;\n            if (!mousePosition || !options.interactivity.events.onClick.enable) {\n                return;\n            }\n            for (const [, plugin] of container.plugins) {\n                if (!plugin.clickPositionValid) {\n                    continue;\n                }\n                handled = plugin.clickPositionValid(mousePosition);\n                if (handled) {\n                    break;\n                }\n            }\n            if (!handled) {\n                this._doMouseTouchClick(e);\n            }\n            mouse.clicking = false;\n        };\n        this._mouseTouchFinish = () => {\n            const interactivity = this.container.interactivity;\n            if (!interactivity) {\n                return;\n            }\n            const mouse = interactivity.mouse;\n            delete mouse.position;\n            delete mouse.clickPosition;\n            delete mouse.downPosition;\n            interactivity.status = mouseLeaveEvent;\n            mouse.inside = false;\n            mouse.clicking = false;\n        };\n        this._mouseTouchMove = (e) => {\n            const container = this.container, options = container.actualOptions, interactivity = container.interactivity, canvasEl = container.canvas.element;\n            if (!interactivity || !interactivity.element) {\n                return;\n            }\n            interactivity.mouse.inside = true;\n            let pos;\n            if (e.type.startsWith(\"pointer\")) {\n                this._canPush = true;\n                const mouseEvent = e;\n                if (interactivity.element === window) {\n                    if (canvasEl) {\n                        const clientRect = canvasEl.getBoundingClientRect();\n                        pos = {\n                            x: mouseEvent.clientX - clientRect.left,\n                            y: mouseEvent.clientY - clientRect.top,\n                        };\n                    }\n                }\n                else if (options.interactivity.detectsOn === \"parent\") {\n                    const source = mouseEvent.target, target = mouseEvent.currentTarget;\n                    if (source && target && canvasEl) {\n                        const sourceRect = source.getBoundingClientRect(), targetRect = target.getBoundingClientRect(), canvasRect = canvasEl.getBoundingClientRect();\n                        pos = {\n                            x: mouseEvent.offsetX + 2 * sourceRect.left - (targetRect.left + canvasRect.left),\n                            y: mouseEvent.offsetY + 2 * sourceRect.top - (targetRect.top + canvasRect.top),\n                        };\n                    }\n                    else {\n                        pos = {\n                            x: mouseEvent.offsetX ?? mouseEvent.clientX,\n                            y: mouseEvent.offsetY ?? mouseEvent.clientY,\n                        };\n                    }\n                }\n                else if (mouseEvent.target === canvasEl) {\n                    pos = {\n                        x: mouseEvent.offsetX ?? mouseEvent.clientX,\n                        y: mouseEvent.offsetY ?? mouseEvent.clientY,\n                    };\n                }\n            }\n            else {\n                this._canPush = e.type !== \"touchmove\";\n                if (canvasEl) {\n                    const touchEvent = e, lastTouch = touchEvent.touches[touchEvent.touches.length - 1], canvasRect = canvasEl.getBoundingClientRect();\n                    pos = {\n                        x: lastTouch.clientX - (canvasRect.left ?? 0),\n                        y: lastTouch.clientY - (canvasRect.top ?? 0),\n                    };\n                }\n            }\n            const pxRatio = container.retina.pixelRatio;\n            if (pos) {\n                pos.x *= pxRatio;\n                pos.y *= pxRatio;\n            }\n            interactivity.mouse.position = pos;\n            interactivity.status = mouseMoveEvent;\n        };\n        this._touchEnd = (e) => {\n            const evt = e, touches = Array.from(evt.changedTouches);\n            for (const touch of touches) {\n                this._touches.delete(touch.identifier);\n            }\n            this._mouseTouchFinish();\n        };\n        this._touchEndClick = (e) => {\n            const evt = e, touches = Array.from(evt.changedTouches);\n            for (const touch of touches) {\n                this._touches.delete(touch.identifier);\n            }\n            this._mouseTouchClick(e);\n        };\n        this._touchStart = (e) => {\n            const evt = e, touches = Array.from(evt.changedTouches);\n            for (const touch of touches) {\n                this._touches.set(touch.identifier, performance.now());\n            }\n            this._mouseTouchMove(e);\n        };\n        this._canPush = true;\n        this._touches = new Map();\n        this._handlers = {\n            mouseDown: () => this._mouseDown(),\n            mouseLeave: () => this._mouseTouchFinish(),\n            mouseMove: (e) => this._mouseTouchMove(e),\n            mouseUp: (e) => this._mouseTouchClick(e),\n            touchStart: (e) => this._touchStart(e),\n            touchMove: (e) => this._mouseTouchMove(e),\n            touchEnd: (e) => this._touchEnd(e),\n            touchCancel: (e) => this._touchEnd(e),\n            touchEndClick: (e) => this._touchEndClick(e),\n            visibilityChange: () => this._handleVisibilityChange(),\n            themeChange: (e) => this._handleThemeChange(e),\n            oldThemeChange: (e) => this._handleThemeChange(e),\n            resize: () => {\n                this._handleWindowResize();\n            },\n        };\n    }\n    addListeners() {\n        this._manageListeners(true);\n    }\n    removeListeners() {\n        this._manageListeners(false);\n    }\n}\n", "import { isArray, isString } from \"../../Utils/Utils\";\nexport class OptionsColor {\n    constructor() {\n        this.value = \"\";\n    }\n    static create(source, data) {\n        const color = new OptionsColor();\n        color.load(source);\n        if (data !== undefined) {\n            if (isString(data) || isArray(data)) {\n                color.load({ value: data });\n            }\n            else {\n                color.load(data);\n            }\n        }\n        return color;\n    }\n    load(data) {\n        if (data?.value === undefined) {\n            return;\n        }\n        this.value = data.value;\n    }\n}\n", "import { OptionsColor } from \"../OptionsColor\";\nexport class Background {\n    constructor() {\n        this.color = new OptionsColor();\n        this.color.value = \"\";\n        this.image = \"\";\n        this.position = \"\";\n        this.repeat = \"\";\n        this.size = \"\";\n        this.opacity = 1;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.image !== undefined) {\n            this.image = data.image;\n        }\n        if (data.position !== undefined) {\n            this.position = data.position;\n        }\n        if (data.repeat !== undefined) {\n            this.repeat = data.repeat;\n        }\n        if (data.size !== undefined) {\n            this.size = data.size;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n", "import { OptionsColor } from \"../OptionsColor\";\nexport class BackgroundMaskCover {\n    constructor() {\n        this.color = new OptionsColor();\n        this.color.value = \"#fff\";\n        this.opacity = 1;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n", "import { BackgroundMaskCover } from \"./BackgroundMaskCover\";\nimport { isString } from \"../../../Utils/Utils\";\nexport class BackgroundMask {\n    constructor() {\n        this.composite = \"destination-out\";\n        this.cover = new BackgroundMaskCover();\n        this.enable = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.composite !== undefined) {\n            this.composite = data.composite;\n        }\n        if (data.cover !== undefined) {\n            const cover = data.cover;\n            const color = (isString(data.cover) ? { color: data.cover } : data.cover);\n            this.cover.load(cover.color !== undefined ? cover : { color: color });\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n    }\n}\n", "export class FullScreen {\n    constructor() {\n        this.enable = true;\n        this.zIndex = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.zIndex !== undefined) {\n            this.zIndex = data.zIndex;\n        }\n    }\n}\n", "export class ClickEvent {\n    constructor() {\n        this.enable = false;\n        this.mode = [];\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n    }\n}\n", "import { executeOnSingleOrMultiple } from \"../../../../Utils/Utils\";\nexport class DivEvent {\n    constructor() {\n        this.selectors = [];\n        this.enable = false;\n        this.mode = [];\n        this.type = \"circle\";\n    }\n    get el() {\n        return this.elementId;\n    }\n    set el(value) {\n        this.elementId = value;\n    }\n    get elementId() {\n        return this.ids;\n    }\n    set elementId(value) {\n        this.ids = value;\n    }\n    get ids() {\n        return executeOnSingleOrMultiple(this.selectors, (t) => t.replace(\"#\", \"\"));\n    }\n    set ids(value) {\n        this.selectors = executeOnSingleOrMultiple(value, (t) => `#${t}`);\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        const ids = data.ids ?? data.elementId ?? data.el;\n        if (ids !== undefined) {\n            this.ids = ids;\n        }\n        if (data.selectors !== undefined) {\n            this.selectors = data.selectors;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.type !== undefined) {\n            this.type = data.type;\n        }\n    }\n}\n", "export class Parallax {\n    constructor() {\n        this.enable = false;\n        this.force = 2;\n        this.smooth = 10;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.force !== undefined) {\n            this.force = data.force;\n        }\n        if (data.smooth !== undefined) {\n            this.smooth = data.smooth;\n        }\n    }\n}\n", "import { Parallax } from \"./Parallax\";\nexport class HoverEvent {\n    constructor() {\n        this.enable = false;\n        this.mode = [];\n        this.parallax = new Parallax();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        this.parallax.load(data.parallax);\n    }\n}\n", "export class ResizeEvent {\n    constructor() {\n        this.delay = 0.5;\n        this.enable = true;\n    }\n    load(data) {\n        if (data === undefined) {\n            return;\n        }\n        if (data.delay !== undefined) {\n            this.delay = data.delay;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n    }\n}\n", "import { executeOnSingleOrMultiple, isBoolean } from \"../../../../Utils/Utils\";\nimport { ClickEvent } from \"./ClickEvent\";\nimport { DivEvent } from \"./DivEvent\";\nimport { HoverEvent } from \"./HoverEvent\";\nimport { ResizeEvent } from \"./ResizeEvent\";\nexport class Events {\n    constructor() {\n        this.onClick = new ClickEvent();\n        this.onDiv = new DivEvent();\n        this.onHover = new HoverEvent();\n        this.resize = new ResizeEvent();\n    }\n    get onclick() {\n        return this.onClick;\n    }\n    set onclick(value) {\n        this.onClick = value;\n    }\n    get ondiv() {\n        return this.onDiv;\n    }\n    set ondiv(value) {\n        this.onDiv = value;\n    }\n    get onhover() {\n        return this.onHover;\n    }\n    set onhover(value) {\n        this.onHover = value;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        this.onClick.load(data.onClick ?? data.onclick);\n        const onDiv = data.onDiv ?? data.ondiv;\n        if (onDiv !== undefined) {\n            this.onDiv = executeOnSingleOrMultiple(onDiv, (t) => {\n                const tmp = new DivEvent();\n                tmp.load(t);\n                return tmp;\n            });\n        }\n        this.onHover.load(data.onHover ?? data.onhover);\n        if (isBoolean(data.resize)) {\n            this.resize.enable = data.resize;\n        }\n        else {\n            this.resize.load(data.resize);\n        }\n    }\n}\n", "export class Modes {\n    constructor(engine, container) {\n        this._engine = engine;\n        this._container = container;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (!this._container) {\n            return;\n        }\n        const interactors = this._engine.plugins.interactors.get(this._container);\n        if (!interactors) {\n            return;\n        }\n        for (const interactor of interactors) {\n            if (!interactor.loadModeOptions) {\n                continue;\n            }\n            interactor.loadModeOptions(this, data);\n        }\n    }\n}\n", "import { Events } from \"./Events/Events\";\nimport { Modes } from \"./Modes/Modes\";\nexport class Interactivity {\n    constructor(engine, container) {\n        this.detectsOn = \"window\";\n        this.events = new Events();\n        this.modes = new Modes(engine, container);\n    }\n    get detect_on() {\n        return this.detectsOn;\n    }\n    set detect_on(value) {\n        this.detectsOn = value;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        const detectsOn = data.detectsOn ?? data.detect_on;\n        if (detectsOn !== undefined) {\n            this.detectsOn = detectsOn;\n        }\n        this.events.load(data.events);\n        this.modes.load(data.modes);\n    }\n}\n", "import { deepExtend } from \"../../Utils/Utils\";\nexport class ManualParticle {\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.position) {\n            this.position = {\n                x: data.position.x ?? 50,\n                y: data.position.y ?? 50,\n                mode: data.position.mode ?? \"percent\",\n            };\n        }\n        if (data.options) {\n            this.options = deepExtend({}, data.options);\n        }\n    }\n}\n", "import { deepExtend } from \"../../Utils/Utils\";\nexport class Responsive {\n    constructor() {\n        this.maxWidth = Infinity;\n        this.options = {};\n        this.mode = \"canvas\";\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.maxWidth !== undefined) {\n            this.maxWidth = data.maxWidth;\n        }\n        if (data.mode !== undefined) {\n            if (data.mode === \"screen\") {\n                this.mode = \"screen\";\n            }\n            else {\n                this.mode = \"canvas\";\n            }\n        }\n        if (data.options !== undefined) {\n            this.options = deepExtend({}, data.options);\n        }\n    }\n}\n", "export class ThemeDefault {\n    constructor() {\n        this.auto = false;\n        this.mode = \"any\";\n        this.value = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.auto !== undefined) {\n            this.auto = data.auto;\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.value !== undefined) {\n            this.value = data.value;\n        }\n    }\n}\n", "import { ThemeDefault } from \"./ThemeDefault\";\nimport { deepExtend } from \"../../../Utils/Utils\";\nexport class Theme {\n    constructor() {\n        this.name = \"\";\n        this.default = new ThemeDefault();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.name !== undefined) {\n            this.name = data.name;\n        }\n        this.default.load(data.default);\n        if (data.options !== undefined) {\n            this.options = deepExtend({}, data.options);\n        }\n    }\n}\n", "import { setRangeValue } from \"../../Utils/NumberUtils\";\nexport class ColorAnimation {\n    constructor() {\n        this.count = 0;\n        this.enable = false;\n        this.offset = 0;\n        this.speed = 1;\n        this.delay = 0;\n        this.decay = 0;\n        this.sync = true;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.count !== undefined) {\n            this.count = setRangeValue(data.count);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.offset !== undefined) {\n            this.offset = setRangeValue(data.offset);\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n        if (data.decay !== undefined) {\n            this.decay = setRangeValue(data.decay);\n        }\n        if (data.delay !== undefined) {\n            this.delay = setRangeValue(data.delay);\n        }\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n", "import { ColorAnimation } from \"./ColorAnimation\";\nexport class HslAnimation {\n    constructor() {\n        this.h = new ColorAnimation();\n        this.s = new ColorAnimation();\n        this.l = new ColorAnimation();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        this.h.load(data.h);\n        this.s.load(data.s);\n        this.l.load(data.l);\n    }\n}\n", "import { isArray, isString } from \"../../Utils/Utils\";\nimport { HslAnimation } from \"./HslAnimation\";\nimport { OptionsColor } from \"./OptionsColor\";\nexport class AnimatableColor extends OptionsColor {\n    constructor() {\n        super();\n        this.animation = new HslAnimation();\n    }\n    static create(source, data) {\n        const color = new AnimatableColor();\n        color.load(source);\n        if (data !== undefined) {\n            if (isString(data) || isArray(data)) {\n                color.load({ value: data });\n            }\n            else {\n                color.load(data);\n            }\n        }\n        return color;\n    }\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        const colorAnimation = data.animation;\n        if (colorAnimation !== undefined) {\n            if (colorAnimation.enable !== undefined) {\n                this.animation.h.load(colorAnimation);\n            }\n            else {\n                this.animation.load(data.animation);\n            }\n        }\n    }\n}\n", "export class CollisionsAbsorb {\n    constructor() {\n        this.speed = 2;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.speed !== undefined) {\n            this.speed = data.speed;\n        }\n    }\n}\n", "export class CollisionsOverlap {\n    constructor() {\n        this.enable = true;\n        this.retries = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.retries !== undefined) {\n            this.retries = data.retries;\n        }\n    }\n}\n", "import { setRangeValue } from \"../../Utils/NumberUtils\";\nexport class AnimationOptions {\n    constructor() {\n        this.count = 0;\n        this.enable = false;\n        this.speed = 1;\n        this.decay = 0;\n        this.delay = 0;\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.count !== undefined) {\n            this.count = setRangeValue(data.count);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n        if (data.decay !== undefined) {\n            this.decay = setRangeValue(data.decay);\n        }\n        if (data.delay !== undefined) {\n            this.delay = setRangeValue(data.delay);\n        }\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\nexport class RangedAnimationOptions extends AnimationOptions {\n    constructor() {\n        super();\n        this.mode = \"auto\";\n        this.startValue = \"random\";\n    }\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        if (data.minimumValue !== undefined) {\n            this.minimumValue = data.minimumValue;\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.startValue !== undefined) {\n            this.startValue = data.startValue;\n        }\n    }\n}\n", "export class Random {\n    constructor() {\n        this.enable = false;\n        this.minimumValue = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.minimumValue !== undefined) {\n            this.minimumValue = data.minimumValue;\n        }\n    }\n}\n", "import { AnimationOptions, RangedAnimationOptions } from \"./AnimationOptions\";\nimport { Random } from \"./Random\";\nimport { isBoolean } from \"../../Utils/Utils\";\nimport { setRangeValue } from \"../../Utils/NumberUtils\";\nexport class ValueWithRandom {\n    constructor() {\n        this.random = new Random();\n        this.value = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (isBoolean(data.random)) {\n            this.random.enable = data.random;\n        }\n        else {\n            this.random.load(data.random);\n        }\n        if (data.value !== undefined) {\n            this.value = setRangeValue(data.value, this.random.enable ? this.random.minimumValue : undefined);\n        }\n    }\n}\nexport class AnimationValueWithRandom extends ValueWithRandom {\n    constructor() {\n        super();\n        this.animation = new AnimationOptions();\n    }\n    get anim() {\n        return this.animation;\n    }\n    set anim(value) {\n        this.animation = value;\n    }\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        const animation = data.animation ?? data.anim;\n        if (animation !== undefined) {\n            this.animation.load(animation);\n        }\n    }\n}\nexport class RangedAnimationValueWithRandom extends AnimationValueWithRandom {\n    constructor() {\n        super();\n        this.animation = new RangedAnimationOptions();\n    }\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        const animation = data.animation ?? data.anim;\n        if (animation !== undefined) {\n            this.value = setRangeValue(this.value, this.animation.enable ? this.animation.minimumValue : undefined);\n        }\n    }\n}\n", "import { ValueWithRandom } from \"../../ValueWithRandom\";\nexport class ParticlesBounceFactor extends ValueWithRandom {\n    constructor() {\n        super();\n        this.random.minimumValue = 0.1;\n        this.value = 1;\n    }\n}\n", "import { ParticlesBounceFactor } from \"./ParticlesBounceFactor\";\nexport class ParticlesBounce {\n    constructor() {\n        this.horizontal = new ParticlesBounceFactor();\n        this.vertical = new ParticlesBounceFactor();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        this.horizontal.load(data.horizontal);\n        this.vertical.load(data.vertical);\n    }\n}\n", "import { CollisionsAbsorb } from \"./CollisionsAbsorb\";\nimport { CollisionsOverlap } from \"./CollisionsOverlap\";\nimport { ParticlesBounce } from \"../Bounce/ParticlesBounce\";\nimport { setRangeValue } from \"../../../../Utils/NumberUtils\";\nexport class Collisions {\n    constructor() {\n        this.absorb = new CollisionsAbsorb();\n        this.bounce = new ParticlesBounce();\n        this.enable = false;\n        this.maxSpeed = 50;\n        this.mode = \"bounce\";\n        this.overlap = new CollisionsOverlap();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        this.absorb.load(data.absorb);\n        this.bounce.load(data.bounce);\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.maxSpeed !== undefined) {\n            this.maxSpeed = setRangeValue(data.maxSpeed);\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        this.overlap.load(data.overlap);\n    }\n}\n", "import { setRangeValue } from \"../../../../Utils/NumberUtils\";\nexport class MoveAngle {\n    constructor() {\n        this.offset = 0;\n        this.value = 90;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.offset !== undefined) {\n            this.offset = setRangeValue(data.offset);\n        }\n        if (data.value !== undefined) {\n            this.value = setRangeValue(data.value);\n        }\n    }\n}\n", "import { setRangeValue } from \"../../../../Utils/NumberUtils\";\nexport class MoveAttract {\n    constructor() {\n        this.distance = 200;\n        this.enable = false;\n        this.rotate = {\n            x: 3000,\n            y: 3000,\n        };\n    }\n    get rotateX() {\n        return this.rotate.x;\n    }\n    set rotateX(value) {\n        this.rotate.x = value;\n    }\n    get rotateY() {\n        return this.rotate.y;\n    }\n    set rotateY(value) {\n        this.rotate.y = value;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = setRangeValue(data.distance);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        const rotateX = data.rotate?.x ?? data.rotateX;\n        if (rotateX !== undefined) {\n            this.rotate.x = rotateX;\n        }\n        const rotateY = data.rotate?.y ?? data.rotateY;\n        if (rotateY !== undefined) {\n            this.rotate.y = rotateY;\n        }\n    }\n}\n", "export class MoveCenter {\n    constructor() {\n        this.x = 50;\n        this.y = 50;\n        this.mode = \"percent\";\n        this.radius = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.x !== undefined) {\n            this.x = data.x;\n        }\n        if (data.y !== undefined) {\n            this.y = data.y;\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.radius !== undefined) {\n            this.radius = data.radius;\n        }\n    }\n}\n", "import { setRangeValue } from \"../../../../Utils/NumberUtils\";\nexport class MoveGravity {\n    constructor() {\n        this.acceleration = 9.81;\n        this.enable = false;\n        this.inverse = false;\n        this.maxSpeed = 50;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.acceleration !== undefined) {\n            this.acceleration = setRangeValue(data.acceleration);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.inverse !== undefined) {\n            this.inverse = data.inverse;\n        }\n        if (data.maxSpeed !== undefined) {\n            this.maxSpeed = setRangeValue(data.maxSpeed);\n        }\n    }\n}\n", "import { ValueWithRandom } from \"../../../ValueWithRandom\";\nimport { deepExtend } from \"../../../../../Utils/Utils\";\nexport class MovePath {\n    constructor() {\n        this.clamp = true;\n        this.delay = new ValueWithRandom();\n        this.enable = false;\n        this.options = {};\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.clamp !== undefined) {\n            this.clamp = data.clamp;\n        }\n        this.delay.load(data.delay);\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        this.generator = data.generator;\n        if (data.options) {\n            this.options = deepExtend(this.options, data.options);\n        }\n    }\n}\n", "import { OptionsColor } from \"../../OptionsColor\";\nexport class MoveTrailFill {\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.image !== undefined) {\n            this.image = data.image;\n        }\n    }\n}\n", "import { MoveTrailFill } from \"./MoveTrailFill\";\nexport class MoveTrail {\n    constructor() {\n        this.enable = false;\n        this.length = 10;\n        this.fill = new MoveTrailFill();\n    }\n    get fillColor() {\n        return this.fill.color;\n    }\n    set fillColor(value) {\n        this.fill.load({ color: value });\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.fill !== undefined || data.fillColor !== undefined) {\n            this.fill.load(data.fill || { color: data.fillColor });\n        }\n        if (data.length !== undefined) {\n            this.length = data.length;\n        }\n    }\n}\n", "export class OutModes {\n    constructor() {\n        this.default = \"out\";\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.default !== undefined) {\n            this.default = data.default;\n        }\n        this.bottom = data.bottom ?? data.default;\n        this.left = data.left ?? data.default;\n        this.right = data.right ?? data.default;\n        this.top = data.top ?? data.default;\n    }\n}\n", "import { deepExtend } from \"../../../../Utils/Utils\";\nimport { setRangeValue } from \"../../../../Utils/NumberUtils\";\nexport class Spin {\n    constructor() {\n        this.acceleration = 0;\n        this.enable = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.acceleration !== undefined) {\n            this.acceleration = setRangeValue(data.acceleration);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.position) {\n            this.position = deepExtend({}, data.position);\n        }\n    }\n}\n", "import { isNumber, isObject } from \"../../../../Utils/Utils\";\nimport { MoveAngle } from \"./MoveAngle\";\nimport { MoveAttract } from \"./MoveAttract\";\nimport { MoveCenter } from \"./MoveCenter\";\nimport { MoveGravity } from \"./MoveGravity\";\nimport { MovePath } from \"./Path/MovePath\";\nimport { MoveTrail } from \"./MoveTrail\";\nimport { OutModes } from \"./OutModes\";\nimport { Spin } from \"./Spin\";\nimport { setRangeValue } from \"../../../../Utils/NumberUtils\";\nexport class Move {\n    constructor() {\n        this.angle = new MoveAngle();\n        this.attract = new MoveAttract();\n        this.center = new MoveCenter();\n        this.decay = 0;\n        this.distance = {};\n        this.direction = \"none\";\n        this.drift = 0;\n        this.enable = false;\n        this.gravity = new MoveGravity();\n        this.path = new MovePath();\n        this.outModes = new OutModes();\n        this.random = false;\n        this.size = false;\n        this.speed = 2;\n        this.spin = new Spin();\n        this.straight = false;\n        this.trail = new MoveTrail();\n        this.vibrate = false;\n        this.warp = false;\n    }\n    get bounce() {\n        return this.collisions;\n    }\n    set bounce(value) {\n        this.collisions = value;\n    }\n    get collisions() {\n        return false;\n    }\n    set collisions(_) {\n    }\n    get noise() {\n        return this.path;\n    }\n    set noise(value) {\n        this.path = value;\n    }\n    get outMode() {\n        return this.outModes.default;\n    }\n    set outMode(value) {\n        this.outModes.default = value;\n    }\n    get out_mode() {\n        return this.outMode;\n    }\n    set out_mode(value) {\n        this.outMode = value;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        this.angle.load(isNumber(data.angle) ? { value: data.angle } : data.angle);\n        this.attract.load(data.attract);\n        this.center.load(data.center);\n        if (data.decay !== undefined) {\n            this.decay = setRangeValue(data.decay);\n        }\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        if (data.distance !== undefined) {\n            this.distance = isNumber(data.distance)\n                ? {\n                    horizontal: data.distance,\n                    vertical: data.distance,\n                }\n                : { ...data.distance };\n        }\n        if (data.drift !== undefined) {\n            this.drift = setRangeValue(data.drift);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        this.gravity.load(data.gravity);\n        const outModes = data.outModes ?? data.outMode ?? data.out_mode;\n        if (outModes !== undefined) {\n            if (isObject(outModes)) {\n                this.outModes.load(outModes);\n            }\n            else {\n                this.outModes.load({\n                    default: outModes,\n                });\n            }\n        }\n        this.path.load(data.path ?? data.noise);\n        if (data.random !== undefined) {\n            this.random = data.random;\n        }\n        if (data.size !== undefined) {\n            this.size = data.size;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n        this.spin.load(data.spin);\n        if (data.straight !== undefined) {\n            this.straight = data.straight;\n        }\n        this.trail.load(data.trail);\n        if (data.vibrate !== undefined) {\n            this.vibrate = data.vibrate;\n        }\n        if (data.warp !== undefined) {\n            this.warp = data.warp;\n        }\n    }\n}\n", "import { RangedAnimationOptions } from \"../../AnimationOptions\";\nexport class OpacityAnimation extends RangedAnimationOptions {\n    constructor() {\n        super();\n        this.destroy = \"none\";\n        this.speed = 2;\n    }\n    get opacity_min() {\n        return this.minimumValue;\n    }\n    set opacity_min(value) {\n        this.minimumValue = value;\n    }\n    load(data) {\n        if (data?.opacity_min !== undefined && data.minimumValue === undefined) {\n            data.minimumValue = data.opacity_min;\n        }\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        if (data.destroy !== undefined) {\n            this.destroy = data.destroy;\n        }\n    }\n}\n", "import { OpacityAnimation } from \"./OpacityAnimation\";\nimport { ValueWithRandom } from \"../../ValueWithRandom\";\nimport { setRangeValue } from \"../../../../Utils/NumberUtils\";\nexport class Opacity extends ValueWithRandom {\n    constructor() {\n        super();\n        this.animation = new OpacityAnimation();\n        this.random.minimumValue = 0.1;\n        this.value = 1;\n    }\n    get anim() {\n        return this.animation;\n    }\n    set anim(value) {\n        this.animation = value;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        super.load(data);\n        const animation = data.animation ?? data.anim;\n        if (animation !== undefined) {\n            this.animation.load(animation);\n            this.value = setRangeValue(this.value, this.animation.enable ? this.animation.minimumValue : undefined);\n        }\n    }\n}\n", "export class ParticlesDensity {\n    constructor() {\n        this.enable = false;\n        this.width = 1920;\n        this.height = 1080;\n    }\n    get area() {\n        return this.width;\n    }\n    set area(value) {\n        this.width = value;\n    }\n    get factor() {\n        return this.height;\n    }\n    set factor(value) {\n        this.height = value;\n    }\n    get value_area() {\n        return this.area;\n    }\n    set value_area(value) {\n        this.area = value;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        const width = data.width ?? data.area ?? data.value_area;\n        if (width !== undefined) {\n            this.width = width;\n        }\n        const height = data.height ?? data.factor;\n        if (height !== undefined) {\n            this.height = height;\n        }\n    }\n}\n", "import { ParticlesDensity } from \"./ParticlesDensity\";\nexport class ParticlesNumber {\n    constructor() {\n        this.density = new ParticlesDensity();\n        this.limit = 0;\n        this.value = 0;\n    }\n    get max() {\n        return this.limit;\n    }\n    set max(value) {\n        this.limit = value;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        this.density.load(data.density);\n        const limit = data.limit ?? data.max;\n        if (limit !== undefined) {\n            this.limit = limit;\n        }\n        if (data.value !== undefined) {\n            this.value = data.value;\n        }\n    }\n}\n", "import { OptionsColor } from \"../OptionsColor\";\nexport class Shadow {\n    constructor() {\n        this.blur = 0;\n        this.color = new OptionsColor();\n        this.enable = false;\n        this.offset = {\n            x: 0,\n            y: 0,\n        };\n        this.color.value = \"#000\";\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.blur !== undefined) {\n            this.blur = data.blur;\n        }\n        this.color = OptionsColor.create(this.color, data.color);\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.offset === undefined) {\n            return;\n        }\n        if (data.offset.x !== undefined) {\n            this.offset.x = data.offset.x;\n        }\n        if (data.offset.y !== undefined) {\n            this.offset.y = data.offset.y;\n        }\n    }\n}\n", "import { deepExtend, isArray } from \"../../../../Utils/Utils\";\nconst charKey = \"character\", charAltKey = \"char\", imageKey = \"image\", imageAltKey = \"images\", polygonKey = \"polygon\", polygonAltKey = \"star\";\nexport class Shape {\n    constructor() {\n        this.loadShape = (item, mainKey, altKey, altOverride) => {\n            if (!item) {\n                return;\n            }\n            const itemIsArray = isArray(item), emptyValue = itemIsArray ? [] : {}, mainDifferentValues = itemIsArray !== isArray(this.options[mainKey]), altDifferentValues = itemIsArray !== isArray(this.options[altKey]);\n            if (mainDifferentValues) {\n                this.options[mainKey] = emptyValue;\n            }\n            if (altDifferentValues && altOverride) {\n                this.options[altKey] = emptyValue;\n            }\n            this.options[mainKey] = deepExtend(this.options[mainKey] ?? emptyValue, item);\n            if (!this.options[altKey] || altOverride) {\n                this.options[altKey] = deepExtend(this.options[altKey] ?? emptyValue, item);\n            }\n        };\n        this.close = true;\n        this.fill = true;\n        this.options = {};\n        this.type = \"circle\";\n    }\n    get character() {\n        return (this.options[charKey] ?? this.options[charAltKey]);\n    }\n    set character(value) {\n        this.options[charAltKey] = this.options[charKey] = value;\n    }\n    get custom() {\n        return this.options;\n    }\n    set custom(value) {\n        this.options = value;\n    }\n    get image() {\n        return (this.options[imageKey] ?? this.options[imageAltKey]);\n    }\n    set image(value) {\n        this.options[imageAltKey] = this.options[imageKey] = value;\n    }\n    get images() {\n        return this.image;\n    }\n    set images(value) {\n        this.image = value;\n    }\n    get polygon() {\n        return (this.options[polygonKey] ?? this.options[polygonAltKey]);\n    }\n    set polygon(value) {\n        this.options[polygonAltKey] = this.options[polygonKey] = value;\n    }\n    get stroke() {\n        return [];\n    }\n    set stroke(_value) {\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        const options = data.options ?? data.custom;\n        if (options !== undefined) {\n            for (const shape in options) {\n                const item = options[shape];\n                if (item) {\n                    this.options[shape] = deepExtend(this.options[shape] ?? {}, item);\n                }\n            }\n        }\n        this.loadShape(data.character, charKey, charAltKey, true);\n        this.loadShape(data.polygon, polygonKey, polygonAltKey, false);\n        this.loadShape(data.image ?? data.images, imageKey, imageAltKey, true);\n        if (data.close !== undefined) {\n            this.close = data.close;\n        }\n        if (data.fill !== undefined) {\n            this.fill = data.fill;\n        }\n        if (data.type !== undefined) {\n            this.type = data.type;\n        }\n    }\n}\n", "import { RangedAnimationOptions } from \"../../AnimationOptions\";\nexport class SizeAnimation extends RangedAnimationOptions {\n    constructor() {\n        super();\n        this.destroy = \"none\";\n        this.speed = 5;\n    }\n    get size_min() {\n        return this.minimumValue;\n    }\n    set size_min(value) {\n        this.minimumValue = value;\n    }\n    load(data) {\n        if (data?.size_min !== undefined && data.minimumValue === undefined) {\n            data.minimumValue = data.size_min;\n        }\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        if (data.destroy !== undefined) {\n            this.destroy = data.destroy;\n        }\n    }\n}\n", "import { SizeAnimation } from \"./SizeAnimation\";\nimport { ValueWithRandom } from \"../../ValueWithRandom\";\nimport { setRangeValue } from \"../../../../Utils/NumberUtils\";\nexport class Size extends ValueWithRandom {\n    constructor() {\n        super();\n        this.animation = new SizeAnimation();\n        this.random.minimumValue = 1;\n        this.value = 3;\n    }\n    get anim() {\n        return this.animation;\n    }\n    set anim(value) {\n        this.animation = value;\n    }\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        const animation = data.animation ?? data.anim;\n        if (animation !== undefined) {\n            this.animation.load(animation);\n            this.value = setRangeValue(this.value, this.animation.enable ? this.animation.minimumValue : undefined);\n        }\n    }\n}\n", "import { AnimatableColor } from \"../AnimatableColor\";\nimport { setRangeValue } from \"../../../Utils/NumberUtils\";\nexport class Stroke {\n    constructor() {\n        this.width = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = AnimatableColor.create(this.color, data.color);\n        }\n        if (data.width !== undefined) {\n            this.width = setRangeValue(data.width);\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = setRangeValue(data.opacity);\n        }\n    }\n}\n", "import { ValueWithRandom } from \"../../ValueWithRandom\";\nexport class ZIndex extends ValueWithRandom {\n    constructor() {\n        super();\n        this.opacityRate = 1;\n        this.sizeRate = 1;\n        this.velocityRate = 1;\n    }\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        if (data.opacityRate !== undefined) {\n            this.opacityRate = data.opacityRate;\n        }\n        if (data.sizeRate !== undefined) {\n            this.sizeRate = data.sizeRate;\n        }\n        if (data.velocityRate !== undefined) {\n            this.velocityRate = data.velocityRate;\n        }\n    }\n}\n", "import { deepExtend, executeOnSingleOrMultiple } from \"../../../Utils/Utils\";\nimport { AnimatableColor } from \"../AnimatableColor\";\nimport { Collisions } from \"./Collisions/Collisions\";\nimport { Move } from \"./Move/Move\";\nimport { Opacity } from \"./Opacity/Opacity\";\nimport { ParticlesBounce } from \"./Bounce/ParticlesBounce\";\nimport { ParticlesNumber } from \"./Number/ParticlesNumber\";\nimport { Shadow } from \"./Shadow\";\nimport { Shape } from \"./Shape/Shape\";\nimport { Size } from \"./Size/Size\";\nimport { Stroke } from \"./Stroke\";\nimport { ZIndex } from \"./ZIndex/ZIndex\";\nexport class ParticlesOptions {\n    constructor(engine, container) {\n        this._engine = engine;\n        this._container = container;\n        this.bounce = new ParticlesBounce();\n        this.collisions = new Collisions();\n        this.color = new AnimatableColor();\n        this.color.value = \"#fff\";\n        this.groups = {};\n        this.move = new Move();\n        this.number = new ParticlesNumber();\n        this.opacity = new Opacity();\n        this.reduceDuplicates = false;\n        this.shadow = new Shadow();\n        this.shape = new Shape();\n        this.size = new Size();\n        this.stroke = new Stroke();\n        this.zIndex = new ZIndex();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        this.bounce.load(data.bounce);\n        this.color.load(AnimatableColor.create(this.color, data.color));\n        if (data.groups !== undefined) {\n            for (const group in data.groups) {\n                const item = data.groups[group];\n                if (item !== undefined) {\n                    this.groups[group] = deepExtend(this.groups[group] ?? {}, item);\n                }\n            }\n        }\n        this.move.load(data.move);\n        this.number.load(data.number);\n        this.opacity.load(data.opacity);\n        if (data.reduceDuplicates !== undefined) {\n            this.reduceDuplicates = data.reduceDuplicates;\n        }\n        this.shape.load(data.shape);\n        this.size.load(data.size);\n        this.shadow.load(data.shadow);\n        this.zIndex.load(data.zIndex);\n        const collisions = data.move?.collisions ?? data.move?.bounce;\n        if (collisions !== undefined) {\n            this.collisions.enable = collisions;\n        }\n        this.collisions.load(data.collisions);\n        if (data.interactivity !== undefined) {\n            this.interactivity = deepExtend({}, data.interactivity);\n        }\n        const strokeToLoad = data.stroke ?? data.shape?.stroke;\n        if (strokeToLoad) {\n            this.stroke = executeOnSingleOrMultiple(strokeToLoad, (t) => {\n                const tmp = new Stroke();\n                tmp.load(t);\n                return tmp;\n            });\n        }\n        if (this._container) {\n            const updaters = this._engine.plugins.updaters.get(this._container);\n            if (updaters) {\n                for (const updater of updaters) {\n                    if (updater.loadOptions) {\n                        updater.loadOptions(this, data);\n                    }\n                }\n            }\n            const interactors = this._engine.plugins.interactors.get(this._container);\n            if (interactors) {\n                for (const interactor of interactors) {\n                    if (interactor.loadParticlesOptions) {\n                        interactor.loadParticlesOptions(this, data);\n                    }\n                }\n            }\n        }\n    }\n}\n", "import { ParticlesOptions } from \"../Options/Classes/Particles/ParticlesOptions\";\nexport function loadOptions(options, ...sourceOptionsArr) {\n    for (const sourceOptions of sourceOptionsArr) {\n        options.load(sourceOptions);\n    }\n}\nexport function loadParticlesOptions(engine, container, ...sourceOptionsArr) {\n    const options = new ParticlesOptions(engine, container);\n    loadOptions(options, ...sourceOptionsArr);\n    return options;\n}\n", "import { deepExtend, executeOnSingleOrMultiple, isBoolean, safeMatchMedia } from \"../../Utils/Utils\";\nimport { Background } from \"./Background/Background\";\nimport { BackgroundMask } from \"./BackgroundMask/BackgroundMask\";\nimport { FullScreen } from \"./FullScreen/FullScreen\";\nimport { Interactivity } from \"./Interactivity/Interactivity\";\nimport { ManualParticle } from \"./ManualParticle\";\nimport { Responsive } from \"./Responsive\";\nimport { Theme } from \"./Theme/Theme\";\nimport { loadParticlesOptions } from \"../../Utils/OptionsUtils\";\nimport { setRangeValue } from \"../../Utils/NumberUtils\";\nexport class Options {\n    constructor(engine, container) {\n        this._findDefaultTheme = (mode) => {\n            return (this.themes.find((theme) => theme.default.value && theme.default.mode === mode) ??\n                this.themes.find((theme) => theme.default.value && theme.default.mode === \"any\"));\n        };\n        this._importPreset = (preset) => {\n            this.load(this._engine.plugins.getPreset(preset));\n        };\n        this._engine = engine;\n        this._container = container;\n        this.autoPlay = true;\n        this.background = new Background();\n        this.backgroundMask = new BackgroundMask();\n        this.defaultThemes = {};\n        this.delay = 0;\n        this.fullScreen = new FullScreen();\n        this.detectRetina = true;\n        this.duration = 0;\n        this.fpsLimit = 120;\n        this.interactivity = new Interactivity(engine, container);\n        this.manualParticles = [];\n        this.particles = loadParticlesOptions(this._engine, this._container);\n        this.pauseOnBlur = true;\n        this.pauseOnOutsideViewport = true;\n        this.responsive = [];\n        this.smooth = false;\n        this.style = {};\n        this.themes = [];\n        this.zLayers = 100;\n    }\n    get backgroundMode() {\n        return this.fullScreen;\n    }\n    set backgroundMode(value) {\n        this.fullScreen.load(value);\n    }\n    get fps_limit() {\n        return this.fpsLimit;\n    }\n    set fps_limit(value) {\n        this.fpsLimit = value;\n    }\n    get retina_detect() {\n        return this.detectRetina;\n    }\n    set retina_detect(value) {\n        this.detectRetina = value;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.preset !== undefined) {\n            executeOnSingleOrMultiple(data.preset, (preset) => this._importPreset(preset));\n        }\n        if (data.autoPlay !== undefined) {\n            this.autoPlay = data.autoPlay;\n        }\n        if (data.delay !== undefined) {\n            this.delay = setRangeValue(data.delay);\n        }\n        const detectRetina = data.detectRetina ?? data.retina_detect;\n        if (detectRetina !== undefined) {\n            this.detectRetina = detectRetina;\n        }\n        if (data.duration !== undefined) {\n            this.duration = setRangeValue(data.duration);\n        }\n        const fpsLimit = data.fpsLimit ?? data.fps_limit;\n        if (fpsLimit !== undefined) {\n            this.fpsLimit = fpsLimit;\n        }\n        if (data.pauseOnBlur !== undefined) {\n            this.pauseOnBlur = data.pauseOnBlur;\n        }\n        if (data.pauseOnOutsideViewport !== undefined) {\n            this.pauseOnOutsideViewport = data.pauseOnOutsideViewport;\n        }\n        if (data.zLayers !== undefined) {\n            this.zLayers = data.zLayers;\n        }\n        this.background.load(data.background);\n        const fullScreen = data.fullScreen ?? data.backgroundMode;\n        if (isBoolean(fullScreen)) {\n            this.fullScreen.enable = fullScreen;\n        }\n        else {\n            this.fullScreen.load(fullScreen);\n        }\n        this.backgroundMask.load(data.backgroundMask);\n        this.interactivity.load(data.interactivity);\n        if (data.manualParticles) {\n            this.manualParticles = data.manualParticles.map((t) => {\n                const tmp = new ManualParticle();\n                tmp.load(t);\n                return tmp;\n            });\n        }\n        this.particles.load(data.particles);\n        this.style = deepExtend(this.style, data.style);\n        this._engine.plugins.loadOptions(this, data);\n        if (data.smooth !== undefined) {\n            this.smooth = data.smooth;\n        }\n        const interactors = this._engine.plugins.interactors.get(this._container);\n        if (interactors) {\n            for (const interactor of interactors) {\n                if (interactor.loadOptions) {\n                    interactor.loadOptions(this, data);\n                }\n            }\n        }\n        if (data.responsive !== undefined) {\n            for (const responsive of data.responsive) {\n                const optResponsive = new Responsive();\n                optResponsive.load(responsive);\n                this.responsive.push(optResponsive);\n            }\n        }\n        this.responsive.sort((a, b) => a.maxWidth - b.maxWidth);\n        if (data.themes !== undefined) {\n            for (const theme of data.themes) {\n                const existingTheme = this.themes.find((t) => t.name === theme.name);\n                if (!existingTheme) {\n                    const optTheme = new Theme();\n                    optTheme.load(theme);\n                    this.themes.push(optTheme);\n                }\n                else {\n                    existingTheme.load(theme);\n                }\n            }\n        }\n        this.defaultThemes.dark = this._findDefaultTheme(\"dark\")?.name;\n        this.defaultThemes.light = this._findDefaultTheme(\"light\")?.name;\n    }\n    setResponsive(width, pxRatio, defaultOptions) {\n        this.load(defaultOptions);\n        const responsiveOptions = this.responsive.find((t) => t.mode === \"screen\" && screen ? t.maxWidth > screen.availWidth : t.maxWidth * pxRatio > width);\n        this.load(responsiveOptions?.options);\n        return responsiveOptions?.maxWidth;\n    }\n    setTheme(name) {\n        if (name) {\n            const chosenTheme = this.themes.find((theme) => theme.name === name);\n            if (chosenTheme) {\n                this.load(chosenTheme.options);\n            }\n        }\n        else {\n            const mediaMatch = safeMatchMedia(\"(prefers-color-scheme: dark)\"), clientDarkMode = mediaMatch && mediaMatch.matches, defaultTheme = this._findDefaultTheme(clientDarkMode ? \"dark\" : \"light\");\n            if (defaultTheme) {\n                this.load(defaultTheme.options);\n            }\n        }\n    }\n}\n", "export class InteractionManager {\n    constructor(engine, container) {\n        this.container = container;\n        this._engine = engine;\n        this._interactors = engine.plugins.getInteractors(this.container, true);\n        this._externalInteractors = [];\n        this._particleInteractors = [];\n    }\n    async externalInteract(delta) {\n        for (const interactor of this._externalInteractors) {\n            interactor.isEnabled() && (await interactor.interact(delta));\n        }\n    }\n    handleClickMode(mode) {\n        for (const interactor of this._externalInteractors) {\n            interactor.handleClickMode && interactor.handleClickMode(mode);\n        }\n    }\n    init() {\n        this._externalInteractors = [];\n        this._particleInteractors = [];\n        for (const interactor of this._interactors) {\n            switch (interactor.type) {\n                case \"external\":\n                    this._externalInteractors.push(interactor);\n                    break;\n                case \"particles\":\n                    this._particleInteractors.push(interactor);\n                    break;\n            }\n            interactor.init();\n        }\n    }\n    async particlesInteract(particle, delta) {\n        for (const interactor of this._externalInteractors) {\n            interactor.clear(particle, delta);\n        }\n        for (const interactor of this._particleInteractors) {\n            interactor.isEnabled(particle) && (await interactor.interact(particle, delta));\n        }\n    }\n    async reset(particle) {\n        for (const interactor of this._externalInteractors) {\n            interactor.isEnabled() && interactor.reset(particle);\n        }\n        for (const interactor of this._particleInteractors) {\n            interactor.isEnabled(particle) && interactor.reset(particle);\n        }\n    }\n}\n", "import { calcExactPositionOrRandomFromSize, clamp, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeValue, getValue, randomInRange, setRangeValue, } from \"../Utils/NumberUtils\";\nimport { deepExtend, getPosition, initParticleNumericAnimationValue, isInArray, itemFromSingleOrMultiple, } from \"../Utils/Utils\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity\";\nimport { Vector } from \"./Utils/Vector\";\nimport { Vector3d } from \"./Utils/Vector3d\";\nimport { alterHsl } from \"../Utils/CanvasUtils\";\nimport { errorPrefix } from \"./Utils/Constants\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils\";\nconst fixOutMode = (data) => {\n    if (!isInArray(data.outMode, data.checkModes)) {\n        return;\n    }\n    const diameter = data.radius * 2;\n    if (data.coord > data.maxCoord - diameter) {\n        data.setCb(-data.radius);\n    }\n    else if (data.coord < diameter) {\n        data.setCb(data.radius);\n    }\n};\nexport class Particle {\n    constructor(engine, id, container, position, overrideOptions, group) {\n        this.container = container;\n        this._calcPosition = (container, position, zIndex, tryCount = 0) => {\n            for (const [, plugin] of container.plugins) {\n                const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n                if (pluginPos) {\n                    return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n                }\n            }\n            const canvasSize = container.canvas.size, exactPosition = calcExactPositionOrRandomFromSize({\n                size: canvasSize,\n                position: position,\n            }), pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex), radius = this.getRadius(), outModes = this.options.move.outModes, fixHorizontal = (outMode) => {\n                fixOutMode({\n                    outMode,\n                    checkModes: [\"bounce\", \"bounce-horizontal\"],\n                    coord: pos.x,\n                    maxCoord: container.canvas.size.width,\n                    setCb: (value) => (pos.x += value),\n                    radius,\n                });\n            }, fixVertical = (outMode) => {\n                fixOutMode({\n                    outMode,\n                    checkModes: [\"bounce\", \"bounce-vertical\"],\n                    coord: pos.y,\n                    maxCoord: container.canvas.size.height,\n                    setCb: (value) => (pos.y += value),\n                    radius,\n                });\n            };\n            fixHorizontal(outModes.left ?? outModes.default);\n            fixHorizontal(outModes.right ?? outModes.default);\n            fixVertical(outModes.top ?? outModes.default);\n            fixVertical(outModes.bottom ?? outModes.default);\n            if (this._checkOverlap(pos, tryCount)) {\n                return this._calcPosition(container, undefined, zIndex, tryCount + 1);\n            }\n            return pos;\n        };\n        this._calculateVelocity = () => {\n            const baseVelocity = getParticleBaseVelocity(this.direction), res = baseVelocity.copy(), moveOptions = this.options.move;\n            if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n                return res;\n            }\n            const rad = (Math.PI / 180) * getRangeValue(moveOptions.angle.value), radOffset = (Math.PI / 180) * getRangeValue(moveOptions.angle.offset), range = {\n                left: radOffset - rad / 2,\n                right: radOffset + rad / 2,\n            };\n            if (!moveOptions.straight) {\n                res.angle += randomInRange(setRangeValue(range.left, range.right));\n            }\n            if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n                res.length *= getRandom();\n            }\n            return res;\n        };\n        this._checkOverlap = (pos, tryCount = 0) => {\n            const collisionsOptions = this.options.collisions, radius = this.getRadius();\n            if (!collisionsOptions.enable) {\n                return false;\n            }\n            const overlapOptions = collisionsOptions.overlap;\n            if (overlapOptions.enable) {\n                return false;\n            }\n            const retries = overlapOptions.retries;\n            if (retries >= 0 && tryCount > retries) {\n                throw new Error(`${errorPrefix} particle is overlapping and can't be placed`);\n            }\n            return !!this.container.particles.find((particle) => getDistance(pos, particle.position) < radius + particle.getRadius());\n        };\n        this._getRollColor = (color) => {\n            if (!color || !this.roll || (!this.backColor && !this.roll.alter)) {\n                return color;\n            }\n            const backFactor = this.roll.horizontal && this.roll.vertical ? 2 : 1, backSum = this.roll.horizontal ? Math.PI / 2 : 0, rolled = Math.floor(((this.roll.angle ?? 0) + backSum) / (Math.PI / backFactor)) % 2;\n            if (!rolled) {\n                return color;\n            }\n            if (this.backColor) {\n                return this.backColor;\n            }\n            if (this.roll.alter) {\n                return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n            }\n            return color;\n        };\n        this._initPosition = (position) => {\n            const container = this.container, zIndexValue = getRangeValue(this.options.zIndex.value);\n            this.position = this._calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n            this.initialPosition = this.position.copy();\n            const canvasSize = container.canvas.size;\n            this.moveCenter = {\n                ...getPosition(this.options.move.center, canvasSize),\n                radius: this.options.move.center.radius ?? 0,\n                mode: this.options.move.center.mode ?? \"percent\",\n            };\n            this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n            switch (this.options.move.direction) {\n                case \"inside\":\n                    this.outType = \"inside\";\n                    break;\n                case \"outside\":\n                    this.outType = \"outside\";\n                    break;\n            }\n            this.offset = Vector.origin;\n        };\n        this._loadShapeData = (shapeOptions, reduceDuplicates) => {\n            const shapeData = shapeOptions.options[this.shape];\n            if (!shapeData) {\n                return;\n            }\n            return deepExtend({\n                close: shapeOptions.close,\n                fill: shapeOptions.fill,\n            }, itemFromSingleOrMultiple(shapeData, this.id, reduceDuplicates));\n        };\n        this._engine = engine;\n        this.init(id, position, overrideOptions, group);\n    }\n    destroy(override) {\n        if (this.unbreakable || this.destroyed) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        this.slow.inRange = false;\n        const container = this.container, pathGenerator = this.pathGenerator;\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleDestroyed) {\n                plugin.particleDestroyed(this, override);\n            }\n        }\n        for (const updater of container.particles.updaters) {\n            if (updater.particleDestroyed) {\n                updater.particleDestroyed(this, override);\n            }\n        }\n        if (pathGenerator) {\n            pathGenerator.reset(this);\n        }\n    }\n    draw(delta) {\n        const container = this.container;\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        container.canvas.drawParticle(this, delta);\n    }\n    getFillColor() {\n        return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.color));\n    }\n    getMass() {\n        return (this.getRadius() ** 2 * Math.PI) / 2;\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        return this.bubble.radius ?? this.size.value;\n    }\n    getStrokeColor() {\n        return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.strokeColor));\n    }\n    init(id, position, overrideOptions, group) {\n        const container = this.container, engine = this._engine;\n        this.id = id;\n        this.group = group;\n        this.fill = true;\n        this.pathRotation = false;\n        this.close = true;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.rotation = 0;\n        this.misplaced = false;\n        this.retina = {\n            maxDistance: {},\n        };\n        this.outType = \"normal\";\n        this.ignoresResizeRatio = true;\n        const pxRatio = container.retina.pixelRatio, mainOptions = container.actualOptions, particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles), shapeType = particlesOptions.shape.type, { reduceDuplicates } = particlesOptions;\n        this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n        const shapeOptions = particlesOptions.shape;\n        if (overrideOptions && overrideOptions.shape && overrideOptions.shape.type) {\n            const overrideShapeType = overrideOptions.shape.type, shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n            if (shape) {\n                this.shape = shape;\n                shapeOptions.load(overrideOptions.shape);\n            }\n        }\n        this.shapeData = this._loadShapeData(shapeOptions, reduceDuplicates);\n        particlesOptions.load(overrideOptions);\n        const shapeData = this.shapeData;\n        if (shapeData) {\n            particlesOptions.load(shapeData.particles);\n        }\n        const interactivity = new Interactivity(engine, container);\n        interactivity.load(container.actualOptions.interactivity);\n        interactivity.load(particlesOptions.interactivity);\n        this.interactivity = interactivity;\n        this.fill = shapeData?.fill ?? particlesOptions.shape.fill;\n        this.close = shapeData?.close ?? particlesOptions.shape.close;\n        this.options = particlesOptions;\n        const pathOptions = this.options.move.path;\n        this.pathDelay = getValue(pathOptions.delay) * 1000;\n        if (pathOptions.generator) {\n            this.pathGenerator = this._engine.plugins.getPathGenerator(pathOptions.generator);\n            if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n                this.pathGenerator.init(container);\n            }\n        }\n        container.retina.initParticle(this);\n        this.size = initParticleNumericAnimationValue(this.options.size, pxRatio);\n        this.bubble = {\n            inRange: false,\n        };\n        this.slow = {\n            inRange: false,\n            factor: 1,\n        };\n        this._initPosition(position);\n        this.initialVelocity = this._calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n        const particles = container.particles;\n        particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n        particles.lastZIndex = this.position.z;\n        this.zIndexFactor = this.position.z / container.zLayers;\n        this.sides = 24;\n        let drawer = container.drawers.get(this.shape);\n        if (!drawer) {\n            drawer = this._engine.plugins.getShapeDrawer(this.shape);\n            if (drawer) {\n                container.drawers.set(this.shape, drawer);\n            }\n        }\n        if (drawer && drawer.loadShape) {\n            drawer.loadShape(this);\n        }\n        const sideCountFunc = drawer?.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.spawning = false;\n        this.shadowColor = rangeColorToRgb(this.options.shadow.color);\n        for (const updater of container.particles.updaters) {\n            updater.init(this);\n        }\n        for (const mover of container.particles.movers) {\n            mover.init && mover.init(this);\n        }\n        if (drawer && drawer.particleInit) {\n            drawer.particleInit(container, this);\n        }\n        for (const [, plugin] of container.plugins) {\n            plugin.particleCreated && plugin.particleCreated(this);\n        }\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius(), canvasSize = this.container.canvas.size, position = this.position;\n        return (position.x >= -radius &&\n            position.y >= -radius &&\n            position.y <= canvasSize.height + radius &&\n            position.x <= canvasSize.width + radius);\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    reset() {\n        for (const updater of this.container.particles.updaters) {\n            updater.reset && updater.reset(this);\n        }\n    }\n}\n", "export class Point {\n    constructor(position, particle) {\n        this.position = position;\n        this.particle = particle;\n    }\n}\n", "export class Range {\n    constructor(x, y) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n    }\n}\n", "import { Circle } from \"./Circle\";\nimport { Range } from \"./Range\";\nexport class Rectangle extends Range {\n    constructor(x, y, width, height) {\n        super(x, y);\n        this.size = {\n            height: height,\n            width: width,\n        };\n    }\n    contains(point) {\n        const w = this.size.width, h = this.size.height, pos = this.position;\n        return point.x >= pos.x && point.x <= pos.x + w && point.y >= pos.y && point.y <= pos.y + h;\n    }\n    intersects(range) {\n        if (range instanceof Circle) {\n            range.intersects(this);\n        }\n        const w = this.size.width, h = this.size.height, pos1 = this.position, pos2 = range.position, size2 = range instanceof Rectangle ? range.size : { width: 0, height: 0 }, w2 = size2.width, h2 = size2.height;\n        return pos2.x < pos1.x + w && pos2.x + w2 > pos1.x && pos2.y < pos1.y + h && pos2.y + h2 > pos1.y;\n    }\n}\n", "import { Range } from \"./Range\";\nimport { Rectangle } from \"./Rectangle\";\nimport { getDistance } from \"../../Utils/NumberUtils\";\nexport class Circle extends Range {\n    constructor(x, y, radius) {\n        super(x, y);\n        this.radius = radius;\n    }\n    contains(point) {\n        return getDistance(point, this.position) <= this.radius;\n    }\n    intersects(range) {\n        const pos1 = this.position, pos2 = range.position, distPos = { x: Math.abs(pos2.x - pos1.x), y: Math.abs(pos2.y - pos1.y) }, r = this.radius;\n        if (range instanceof Circle) {\n            const rSum = r + range.radius, dist = Math.sqrt(distPos.x ** 2 + distPos.y ** 2);\n            return rSum > dist;\n        }\n        else if (range instanceof Rectangle) {\n            const { width, height } = range.size, edges = Math.pow(distPos.x - width, 2) + Math.pow(distPos.y - height, 2);\n            return (edges <= r ** 2 ||\n                (distPos.x <= r + width && distPos.y <= r + height) ||\n                distPos.x <= width ||\n                distPos.y <= height);\n        }\n        return false;\n    }\n}\n", "import { Circle } from \"./Circle\";\nimport { Rectangle } from \"./Rectangle\";\nimport { getDistance } from \"../../Utils/NumberUtils\";\nexport class QuadTree {\n    constructor(rectangle, capacity) {\n        this.rectangle = rectangle;\n        this.capacity = capacity;\n        this._subdivide = () => {\n            const { x, y } = this.rectangle.position, { width, height } = this.rectangle.size, { capacity } = this;\n            for (let i = 0; i < 4; i++) {\n                this._subs.push(new QuadTree(new Rectangle(x + (width / 2) * (i % 2), y + (height / 2) * (Math.round(i / 2) - (i % 2)), width / 2, height / 2), capacity));\n            }\n            this._divided = true;\n        };\n        this._points = [];\n        this._divided = false;\n        this._subs = [];\n    }\n    insert(point) {\n        if (!this.rectangle.contains(point.position)) {\n            return false;\n        }\n        if (this._points.length < this.capacity) {\n            this._points.push(point);\n            return true;\n        }\n        if (!this._divided) {\n            this._subdivide();\n        }\n        return this._subs.some((sub) => sub.insert(point));\n    }\n    query(range, check, found) {\n        const res = found || [];\n        if (!range.intersects(this.rectangle)) {\n            return [];\n        }\n        for (const p of this._points) {\n            if (!range.contains(p.position) &&\n                getDistance(range.position, p.position) > p.particle.getRadius() &&\n                (!check || check(p.particle))) {\n                continue;\n            }\n            res.push(p.particle);\n        }\n        if (this._divided) {\n            for (const sub of this._subs) {\n                sub.query(range, check, res);\n            }\n        }\n        return res;\n    }\n    queryCircle(position, radius, check) {\n        return this.query(new Circle(position.x, position.y, radius), check);\n    }\n    queryRectangle(position, size, check) {\n        return this.query(new Rectangle(position.x, position.y, size.width, size.height), check);\n    }\n}\n", "import { getLogger, getPosition } from \"../Utils/Utils\";\nimport { InteractionManager } from \"./Utils/InteractionManager\";\nimport { Particle } from \"./Particle\";\nimport { Point } from \"./Utils/Point\";\nimport { QuadTree } from \"./Utils/QuadTree\";\nimport { Rectangle } from \"./Utils/Rectangle\";\nimport { errorPrefix } from \"./Utils/Constants\";\nconst qTreeCapacity = 4;\nconst qTreeRectangle = (canvasSize) => {\n    return new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2);\n};\nexport class Particles {\n    constructor(engine, container) {\n        this._applyDensity = (options, manualCount, group) => {\n            if (!options.number.density?.enable) {\n                return;\n            }\n            const numberOptions = options.number, densityFactor = this._initDensityFactor(numberOptions.density), optParticlesNumber = numberOptions.value, optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber, particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount, particlesCount = Math.min(this.count, this.filter((t) => t.group === group).length);\n            this.limit = numberOptions.limit * densityFactor;\n            if (particlesCount < particlesNumber) {\n                this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n            }\n            else if (particlesCount > particlesNumber) {\n                this.removeQuantity(particlesCount - particlesNumber, group);\n            }\n        };\n        this._initDensityFactor = (densityOptions) => {\n            const container = this._container;\n            if (!container.canvas.element || !densityOptions.enable) {\n                return 1;\n            }\n            const canvas = container.canvas.element, pxRatio = container.retina.pixelRatio;\n            return (canvas.width * canvas.height) / (densityOptions.factor * pxRatio ** 2 * densityOptions.area);\n        };\n        this._pushParticle = (position, overrideOptions, group, initializer) => {\n            try {\n                let particle = this.pool.pop();\n                if (particle) {\n                    particle.init(this._nextId, position, overrideOptions, group);\n                }\n                else {\n                    particle = new Particle(this._engine, this._nextId, this._container, position, overrideOptions, group);\n                }\n                let canAdd = true;\n                if (initializer) {\n                    canAdd = initializer(particle);\n                }\n                if (!canAdd) {\n                    return;\n                }\n                this._array.push(particle);\n                this._zArray.push(particle);\n                this._nextId++;\n                this._engine.dispatchEvent(\"particleAdded\", {\n                    container: this._container,\n                    data: {\n                        particle,\n                    },\n                });\n                return particle;\n            }\n            catch (e) {\n                getLogger().warning(`${errorPrefix} adding particle: ${e}`);\n                return;\n            }\n        };\n        this._removeParticle = (index, group, override) => {\n            const particle = this._array[index];\n            if (!particle || particle.group !== group) {\n                return false;\n            }\n            particle.destroy(override);\n            const zIdx = this._zArray.indexOf(particle);\n            this._array.splice(index, 1);\n            this._zArray.splice(zIdx, 1);\n            this.pool.push(particle);\n            this._engine.dispatchEvent(\"particleRemoved\", {\n                container: this._container,\n                data: {\n                    particle,\n                },\n            });\n            return true;\n        };\n        this._engine = engine;\n        this._container = container;\n        this._nextId = 0;\n        this._array = [];\n        this._zArray = [];\n        this.pool = [];\n        this.limit = 0;\n        this.needsSort = false;\n        this.lastZIndex = 0;\n        this._interactionManager = new InteractionManager(engine, container);\n        const canvasSize = container.canvas.size;\n        this.quadTree = new QuadTree(qTreeRectangle(canvasSize), qTreeCapacity);\n        this.movers = this._engine.plugins.getMovers(container, true);\n        this.updaters = this._engine.plugins.getUpdaters(container, true);\n    }\n    get count() {\n        return this._array.length;\n    }\n    addManualParticles() {\n        const container = this._container, options = container.actualOptions;\n        for (const particle of options.manualParticles) {\n            this.addParticle(particle.position ? getPosition(particle.position, container.canvas.size) : undefined, particle.options);\n        }\n    }\n    addParticle(position, overrideOptions, group, initializer) {\n        const container = this._container, options = container.actualOptions, limit = options.particles.number.limit;\n        if (limit > 0) {\n            const countToRemove = this.count + 1 - limit;\n            if (countToRemove > 0) {\n                this.removeQuantity(countToRemove);\n            }\n        }\n        return this._pushParticle(position, overrideOptions, group, initializer);\n    }\n    clear() {\n        this._array = [];\n        this._zArray = [];\n    }\n    destroy() {\n        this._array = [];\n        this._zArray = [];\n        this.movers = [];\n        this.updaters = [];\n    }\n    async draw(delta) {\n        const container = this._container;\n        container.canvas.clear();\n        await this.update(delta);\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this._zArray) {\n            p.draw(delta);\n        }\n    }\n    filter(condition) {\n        return this._array.filter(condition);\n    }\n    find(condition) {\n        return this._array.find(condition);\n    }\n    handleClickMode(mode) {\n        this._interactionManager.handleClickMode(mode);\n    }\n    init() {\n        const container = this._container, options = container.actualOptions;\n        this.lastZIndex = 0;\n        this.needsSort = false;\n        let handled = false;\n        this.updaters = this._engine.plugins.getUpdaters(container, true);\n        this._interactionManager.init();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particlesInitialization !== undefined) {\n                handled = plugin.particlesInitialization();\n            }\n            if (handled) {\n                break;\n            }\n        }\n        this._interactionManager.init();\n        for (const [, pathGenerator] of container.pathGenerators) {\n            pathGenerator.init(container);\n        }\n        this.addManualParticles();\n        if (!handled) {\n            for (const group in options.particles.groups) {\n                const groupOptions = options.particles.groups[group];\n                for (let i = this.count, j = 0; j < groupOptions.number?.value && i < options.particles.number.value; i++, j++) {\n                    this.addParticle(undefined, groupOptions, group);\n                }\n            }\n            for (let i = this.count; i < options.particles.number.value; i++) {\n                this.addParticle();\n            }\n        }\n    }\n    push(nb, mouse, overrideOptions, group) {\n        this.pushing = true;\n        for (let i = 0; i < nb; i++) {\n            this.addParticle(mouse?.position, overrideOptions, group);\n        }\n        this.pushing = false;\n    }\n    async redraw() {\n        this.clear();\n        this.init();\n        await this.draw({ value: 0, factor: 0 });\n    }\n    remove(particle, group, override) {\n        this.removeAt(this._array.indexOf(particle), undefined, group, override);\n    }\n    removeAt(index, quantity = 1, group, override) {\n        if (index < 0 || index > this.count) {\n            return;\n        }\n        let deleted = 0;\n        for (let i = index; deleted < quantity && i < this.count; i++) {\n            this._removeParticle(i--, group, override) && deleted++;\n        }\n    }\n    removeQuantity(quantity, group) {\n        this.removeAt(0, quantity, group);\n    }\n    setDensity() {\n        const options = this._container.actualOptions, groups = options.particles.groups;\n        for (const group in groups) {\n            this._applyDensity(groups[group], 0, group);\n        }\n        this._applyDensity(options.particles, options.manualParticles.length);\n    }\n    async update(delta) {\n        const container = this._container, particlesToDelete = new Set();\n        this.quadTree = new QuadTree(qTreeRectangle(container.canvas.size), qTreeCapacity);\n        for (const [, pathGenerator] of container.pathGenerators) {\n            pathGenerator.update();\n        }\n        for (const [, plugin] of container.plugins) {\n            plugin.update && plugin.update(delta);\n        }\n        for (const particle of this._array) {\n            const resizeFactor = container.canvas.resizeFactor;\n            if (resizeFactor && !particle.ignoresResizeRatio) {\n                particle.position.x *= resizeFactor.width;\n                particle.position.y *= resizeFactor.height;\n                particle.initialPosition.x *= resizeFactor.width;\n                particle.initialPosition.y *= resizeFactor.height;\n            }\n            particle.ignoresResizeRatio = false;\n            await this._interactionManager.reset(particle);\n            for (const [, plugin] of this._container.plugins) {\n                if (particle.destroyed) {\n                    break;\n                }\n                if (plugin.particleUpdate) {\n                    plugin.particleUpdate(particle, delta);\n                }\n            }\n            for (const mover of this.movers) {\n                mover.isEnabled(particle) && mover.move(particle, delta);\n            }\n            if (particle.destroyed) {\n                particlesToDelete.add(particle);\n                continue;\n            }\n            this.quadTree.insert(new Point(particle.getPosition(), particle));\n        }\n        if (particlesToDelete.size) {\n            const checkDelete = (p) => !particlesToDelete.has(p);\n            this._array = this.filter(checkDelete);\n            this._zArray = this._zArray.filter(checkDelete);\n            this.pool.push(...particlesToDelete);\n        }\n        await this._interactionManager.externalInteract(delta);\n        for (const particle of this._array) {\n            for (const updater of this.updaters) {\n                updater.update(particle, delta);\n            }\n            if (!particle.destroyed && !particle.spawning) {\n                await this._interactionManager.particlesInteract(particle, delta);\n            }\n        }\n        delete container.canvas.resizeFactor;\n        if (this.needsSort) {\n            const zArray = this._zArray;\n            zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n            this.lastZIndex = zArray[zArray.length - 1].position.z;\n            this.needsSort = false;\n        }\n    }\n}\n", "import { getRangeValue } from \"../Utils/NumberUtils\";\nimport { isSsr } from \"../Utils/Utils\";\nexport class Retina {\n    constructor(container) {\n        this.container = container;\n        this.pixelRatio = 1;\n        this.reduceFactor = 1;\n    }\n    init() {\n        const container = this.container, options = container.actualOptions;\n        this.pixelRatio = !options.detectRetina || isSsr() ? 1 : window.devicePixelRatio;\n        this.reduceFactor = 1;\n        const ratio = this.pixelRatio;\n        if (container.canvas.element) {\n            const element = container.canvas.element;\n            container.canvas.size.width = element.offsetWidth * ratio;\n            container.canvas.size.height = element.offsetHeight * ratio;\n        }\n        const particles = options.particles, moveOptions = particles.move;\n        this.attractDistance = getRangeValue(moveOptions.attract.distance) * ratio;\n        this.maxSpeed = getRangeValue(moveOptions.gravity.maxSpeed) * ratio;\n        this.sizeAnimationSpeed = getRangeValue(particles.size.animation.speed) * ratio;\n    }\n    initParticle(particle) {\n        const options = particle.options, ratio = this.pixelRatio, moveOptions = options.move, moveDistance = moveOptions.distance, props = particle.retina;\n        props.attractDistance = getRangeValue(moveOptions.attract.distance) * ratio;\n        props.moveDrift = getRangeValue(moveOptions.drift) * ratio;\n        props.moveSpeed = getRangeValue(moveOptions.speed) * ratio;\n        props.sizeAnimationSpeed = getRangeValue(options.size.animation.speed) * ratio;\n        const maxDistance = props.maxDistance;\n        maxDistance.horizontal = moveDistance.horizontal !== undefined ? moveDistance.horizontal * ratio : undefined;\n        maxDistance.vertical = moveDistance.vertical !== undefined ? moveDistance.vertical * ratio : undefined;\n        props.maxSpeed = getRangeValue(moveOptions.gravity.maxSpeed) * ratio;\n    }\n}\n", "import { getLogger, isFunction } from \"../Utils/Utils\";\nimport { Canvas } from \"./Canvas\";\nimport { EventListeners } from \"./Utils/EventListeners\";\nimport { Options } from \"../Options/Classes/Options\";\nimport { Particles } from \"./Particles\";\nimport { Retina } from \"./Retina\";\nimport { errorPrefix } from \"./Utils/Constants\";\nimport { getRangeValue } from \"../Utils/NumberUtils\";\nimport { loadOptions } from \"../Utils/OptionsUtils\";\nfunction guardCheck(container) {\n    return container && !container.destroyed;\n}\nfunction initDelta(value, fpsLimit = 60, smooth = false) {\n    return {\n        value,\n        factor: smooth ? 60 / fpsLimit : (60 * value) / 1000,\n    };\n}\nfunction loadContainerOptions(engine, container, ...sourceOptionsArr) {\n    const options = new Options(engine, container);\n    loadOptions(options, ...sourceOptionsArr);\n    return options;\n}\nconst defaultPathGeneratorKey = \"default\", defaultPathGenerator = {\n    generate: (p) => p.velocity,\n    init: () => {\n    },\n    update: () => {\n    },\n    reset: () => {\n    },\n};\nexport class Container {\n    constructor(engine, id, sourceOptions) {\n        this.id = id;\n        this._intersectionManager = (entries) => {\n            if (!guardCheck(this) || !this.actualOptions.pauseOnOutsideViewport) {\n                return;\n            }\n            for (const entry of entries) {\n                if (entry.target !== this.interactivity.element) {\n                    continue;\n                }\n                (entry.isIntersecting ? this.play : this.pause)();\n            }\n        };\n        this._nextFrame = async (timestamp) => {\n            try {\n                if (!this.smooth &&\n                    this.lastFrameTime !== undefined &&\n                    timestamp < this.lastFrameTime + 1000 / this.fpsLimit) {\n                    this.draw(false);\n                    return;\n                }\n                this.lastFrameTime ??= timestamp;\n                const delta = initDelta(timestamp - this.lastFrameTime, this.fpsLimit, this.smooth);\n                this.addLifeTime(delta.value);\n                this.lastFrameTime = timestamp;\n                if (delta.value > 1000) {\n                    this.draw(false);\n                    return;\n                }\n                await this.particles.draw(delta);\n                if (!this.alive()) {\n                    this.destroy();\n                    return;\n                }\n                if (this.getAnimationStatus()) {\n                    this.draw(false);\n                }\n            }\n            catch (e) {\n                getLogger().error(`${errorPrefix} in animation loop`, e);\n            }\n        };\n        this._engine = engine;\n        this.fpsLimit = 120;\n        this.smooth = false;\n        this._delay = 0;\n        this._duration = 0;\n        this._lifeTime = 0;\n        this._firstStart = true;\n        this.started = false;\n        this.destroyed = false;\n        this._paused = true;\n        this.lastFrameTime = 0;\n        this.zLayers = 100;\n        this.pageHidden = false;\n        this._sourceOptions = sourceOptions;\n        this._initialSourceOptions = sourceOptions;\n        this.retina = new Retina(this);\n        this.canvas = new Canvas(this);\n        this.particles = new Particles(this._engine, this);\n        this.pathGenerators = new Map();\n        this.interactivity = {\n            mouse: {\n                clicking: false,\n                inside: false,\n            },\n        };\n        this.plugins = new Map();\n        this.drawers = new Map();\n        this._options = loadContainerOptions(this._engine, this);\n        this.actualOptions = loadContainerOptions(this._engine, this);\n        this._eventListeners = new EventListeners(this);\n        if (typeof IntersectionObserver !== \"undefined\" && IntersectionObserver) {\n            this._intersectionObserver = new IntersectionObserver((entries) => this._intersectionManager(entries));\n        }\n        this._engine.dispatchEvent(\"containerBuilt\", { container: this });\n    }\n    get options() {\n        return this._options;\n    }\n    get sourceOptions() {\n        return this._sourceOptions;\n    }\n    addClickHandler(callback) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        const el = this.interactivity.element;\n        if (!el) {\n            return;\n        }\n        const clickOrTouchHandler = (e, pos, radius) => {\n            if (!guardCheck(this)) {\n                return;\n            }\n            const pxRatio = this.retina.pixelRatio, posRetina = {\n                x: pos.x * pxRatio,\n                y: pos.y * pxRatio,\n            }, particles = this.particles.quadTree.queryCircle(posRetina, radius * pxRatio);\n            callback(e, particles);\n        };\n        const clickHandler = (e) => {\n            if (!guardCheck(this)) {\n                return;\n            }\n            const mouseEvent = e, pos = {\n                x: mouseEvent.offsetX || mouseEvent.clientX,\n                y: mouseEvent.offsetY || mouseEvent.clientY,\n            };\n            clickOrTouchHandler(e, pos, 1);\n        };\n        const touchStartHandler = () => {\n            if (!guardCheck(this)) {\n                return;\n            }\n            touched = true;\n            touchMoved = false;\n        };\n        const touchMoveHandler = () => {\n            if (!guardCheck(this)) {\n                return;\n            }\n            touchMoved = true;\n        };\n        const touchEndHandler = (e) => {\n            if (!guardCheck(this)) {\n                return;\n            }\n            if (touched && !touchMoved) {\n                const touchEvent = e;\n                let lastTouch = touchEvent.touches[touchEvent.touches.length - 1];\n                if (!lastTouch) {\n                    lastTouch = touchEvent.changedTouches[touchEvent.changedTouches.length - 1];\n                    if (!lastTouch) {\n                        return;\n                    }\n                }\n                const element = this.canvas.element, canvasRect = element ? element.getBoundingClientRect() : undefined, pos = {\n                    x: lastTouch.clientX - (canvasRect ? canvasRect.left : 0),\n                    y: lastTouch.clientY - (canvasRect ? canvasRect.top : 0),\n                };\n                clickOrTouchHandler(e, pos, Math.max(lastTouch.radiusX, lastTouch.radiusY));\n            }\n            touched = false;\n            touchMoved = false;\n        };\n        const touchCancelHandler = () => {\n            if (!guardCheck(this)) {\n                return;\n            }\n            touched = false;\n            touchMoved = false;\n        };\n        let touched = false, touchMoved = false;\n        el.addEventListener(\"click\", clickHandler);\n        el.addEventListener(\"touchstart\", touchStartHandler);\n        el.addEventListener(\"touchmove\", touchMoveHandler);\n        el.addEventListener(\"touchend\", touchEndHandler);\n        el.addEventListener(\"touchcancel\", touchCancelHandler);\n    }\n    addLifeTime(value) {\n        this._lifeTime += value;\n    }\n    addPath(key, generator, override = false) {\n        if (!guardCheck(this) || (!override && this.pathGenerators.has(key))) {\n            return false;\n        }\n        this.pathGenerators.set(key, generator ?? defaultPathGenerator);\n        return true;\n    }\n    alive() {\n        return !this._duration || this._lifeTime <= this._duration;\n    }\n    destroy() {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this.stop();\n        this.particles.destroy();\n        this.canvas.destroy();\n        for (const [, drawer] of this.drawers) {\n            drawer.destroy && drawer.destroy(this);\n        }\n        for (const key of this.drawers.keys()) {\n            this.drawers.delete(key);\n        }\n        this._engine.plugins.destroy(this);\n        this.destroyed = true;\n        const mainArr = this._engine.dom(), idx = mainArr.findIndex((t) => t === this);\n        if (idx >= 0) {\n            mainArr.splice(idx, 1);\n        }\n        this._engine.dispatchEvent(\"containerDestroyed\", { container: this });\n    }\n    draw(force) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        let refreshTime = force;\n        this._drawAnimationFrame = requestAnimationFrame(async (timestamp) => {\n            if (refreshTime) {\n                this.lastFrameTime = undefined;\n                refreshTime = false;\n            }\n            await this._nextFrame(timestamp);\n        });\n    }\n    async export(type, options = {}) {\n        for (const [, plugin] of this.plugins) {\n            if (!plugin.export) {\n                continue;\n            }\n            const res = await plugin.export(type, options);\n            if (!res.supported) {\n                continue;\n            }\n            return res.blob;\n        }\n        getLogger().error(`${errorPrefix} - Export plugin with type ${type} not found`);\n    }\n    getAnimationStatus() {\n        return !this._paused && !this.pageHidden && guardCheck(this);\n    }\n    handleClickMode(mode) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this.particles.handleClickMode(mode);\n        for (const [, plugin] of this.plugins) {\n            plugin.handleClickMode && plugin.handleClickMode(mode);\n        }\n    }\n    async init() {\n        if (!guardCheck(this)) {\n            return;\n        }\n        const shapes = this._engine.plugins.getSupportedShapes();\n        for (const type of shapes) {\n            const drawer = this._engine.plugins.getShapeDrawer(type);\n            if (drawer) {\n                this.drawers.set(type, drawer);\n            }\n        }\n        this._options = loadContainerOptions(this._engine, this, this._initialSourceOptions, this.sourceOptions);\n        this.actualOptions = loadContainerOptions(this._engine, this, this._options);\n        const availablePlugins = this._engine.plugins.getAvailablePlugins(this);\n        for (const [id, plugin] of availablePlugins) {\n            this.plugins.set(id, plugin);\n        }\n        this.retina.init();\n        await this.canvas.init();\n        this.updateActualOptions();\n        this.canvas.initBackground();\n        this.canvas.resize();\n        this.zLayers = this.actualOptions.zLayers;\n        this._duration = getRangeValue(this.actualOptions.duration) * 1000;\n        this._delay = getRangeValue(this.actualOptions.delay) * 1000;\n        this._lifeTime = 0;\n        this.fpsLimit = this.actualOptions.fpsLimit > 0 ? this.actualOptions.fpsLimit : 120;\n        this.smooth = this.actualOptions.smooth;\n        for (const [, drawer] of this.drawers) {\n            drawer.init && (await drawer.init(this));\n        }\n        for (const [, plugin] of this.plugins) {\n            plugin.init && (await plugin.init());\n        }\n        this._engine.dispatchEvent(\"containerInit\", { container: this });\n        this.particles.init();\n        this.particles.setDensity();\n        for (const [, plugin] of this.plugins) {\n            plugin.particlesSetup && plugin.particlesSetup();\n        }\n        this._engine.dispatchEvent(\"particlesSetup\", { container: this });\n    }\n    async loadTheme(name) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this._currentTheme = name;\n        await this.refresh();\n    }\n    pause() {\n        if (!guardCheck(this)) {\n            return;\n        }\n        if (this._drawAnimationFrame !== undefined) {\n            cancelAnimationFrame(this._drawAnimationFrame);\n            delete this._drawAnimationFrame;\n        }\n        if (this._paused) {\n            return;\n        }\n        for (const [, plugin] of this.plugins) {\n            plugin.pause && plugin.pause();\n        }\n        if (!this.pageHidden) {\n            this._paused = true;\n        }\n        this._engine.dispatchEvent(\"containerPaused\", { container: this });\n    }\n    play(force) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        const needsUpdate = this._paused || force;\n        if (this._firstStart && !this.actualOptions.autoPlay) {\n            this._firstStart = false;\n            return;\n        }\n        if (this._paused) {\n            this._paused = false;\n        }\n        if (needsUpdate) {\n            for (const [, plugin] of this.plugins) {\n                if (plugin.play) {\n                    plugin.play();\n                }\n            }\n        }\n        this._engine.dispatchEvent(\"containerPlay\", { container: this });\n        this.draw(needsUpdate || false);\n    }\n    async refresh() {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this.stop();\n        return this.start();\n    }\n    async reset() {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this._initialSourceOptions = undefined;\n        this._options = loadContainerOptions(this._engine, this);\n        this.actualOptions = loadContainerOptions(this._engine, this, this._options);\n        return this.refresh();\n    }\n    setNoise(noiseOrGenerator, init, update) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this.setPath(noiseOrGenerator, init, update);\n    }\n    setPath(pathOrGenerator, init, update) {\n        if (!pathOrGenerator || !guardCheck(this)) {\n            return;\n        }\n        const pathGenerator = { ...defaultPathGenerator };\n        if (isFunction(pathOrGenerator)) {\n            pathGenerator.generate = pathOrGenerator;\n            if (init) {\n                pathGenerator.init = init;\n            }\n            if (update) {\n                pathGenerator.update = update;\n            }\n        }\n        else {\n            const oldGenerator = pathGenerator;\n            pathGenerator.generate = pathOrGenerator.generate || oldGenerator.generate;\n            pathGenerator.init = pathOrGenerator.init || oldGenerator.init;\n            pathGenerator.update = pathOrGenerator.update || oldGenerator.update;\n        }\n        this.addPath(defaultPathGeneratorKey, pathGenerator, true);\n    }\n    async start() {\n        if (!guardCheck(this) || this.started) {\n            return;\n        }\n        await this.init();\n        this.started = true;\n        await new Promise((resolve) => {\n            this._delayTimeout = setTimeout(async () => {\n                this._eventListeners.addListeners();\n                if (this.interactivity.element instanceof HTMLElement && this._intersectionObserver) {\n                    this._intersectionObserver.observe(this.interactivity.element);\n                }\n                for (const [, plugin] of this.plugins) {\n                    plugin.start && (await plugin.start());\n                }\n                this._engine.dispatchEvent(\"containerStarted\", { container: this });\n                this.play();\n                resolve();\n            }, this._delay);\n        });\n    }\n    stop() {\n        if (!guardCheck(this) || !this.started) {\n            return;\n        }\n        if (this._delayTimeout) {\n            clearTimeout(this._delayTimeout);\n            delete this._delayTimeout;\n        }\n        this._firstStart = true;\n        this.started = false;\n        this._eventListeners.removeListeners();\n        this.pause();\n        this.particles.clear();\n        this.canvas.stop();\n        if (this.interactivity.element instanceof HTMLElement && this._intersectionObserver) {\n            this._intersectionObserver.unobserve(this.interactivity.element);\n        }\n        for (const [, plugin] of this.plugins) {\n            plugin.stop && plugin.stop();\n        }\n        for (const key of this.plugins.keys()) {\n            this.plugins.delete(key);\n        }\n        this._sourceOptions = this._options;\n        this._engine.dispatchEvent(\"containerStopped\", { container: this });\n    }\n    updateActualOptions() {\n        this.actualOptions.responsive = [];\n        const newMaxWidth = this.actualOptions.setResponsive(this.canvas.size.width, this.retina.pixelRatio, this._options);\n        this.actualOptions.setTheme(this._currentTheme);\n        if (this.responsiveMaxWidth === newMaxWidth) {\n            return false;\n        }\n        this.responsiveMaxWidth = newMaxWidth;\n        return true;\n    }\n}\n", "export class EventDispatcher {\n    constructor() {\n        this._listeners = new Map();\n    }\n    addEventListener(type, listener) {\n        this.removeEventListener(type, listener);\n        let arr = this._listeners.get(type);\n        if (!arr) {\n            arr = [];\n            this._listeners.set(type, arr);\n        }\n        arr.push(listener);\n    }\n    dispatchEvent(type, args) {\n        const listeners = this._listeners.get(type);\n        listeners && listeners.forEach((handler) => handler(args));\n    }\n    hasEventListener(type) {\n        return !!this._listeners.get(type);\n    }\n    removeAllEventListeners(type) {\n        if (!type) {\n            this._listeners = new Map();\n        }\n        else {\n            this._listeners.delete(type);\n        }\n    }\n    removeEventListener(type, listener) {\n        const arr = this._listeners.get(type);\n        if (!arr) {\n            return;\n        }\n        const length = arr.length, idx = arr.indexOf(listener);\n        if (idx < 0) {\n            return;\n        }\n        if (length === 1) {\n            this._listeners.delete(type);\n        }\n        else {\n            arr.splice(idx, 1);\n        }\n    }\n}\n", "import { executeOnSingleOrMultiple } from \"../../Utils/Utils\";\nfunction getItemsFromInitializer(container, map, initializers, force = false) {\n    let res = map.get(container);\n    if (!res || force) {\n        res = [...initializers.values()].map((t) => t(container));\n        map.set(container, res);\n    }\n    return res;\n}\nexport class Plugins {\n    constructor(engine) {\n        this._engine = engine;\n        this.plugins = [];\n        this._initializers = {\n            interactors: new Map(),\n            movers: new Map(),\n            updaters: new Map(),\n        };\n        this.interactors = new Map();\n        this.movers = new Map();\n        this.updaters = new Map();\n        this.presets = new Map();\n        this.drawers = new Map();\n        this.pathGenerators = new Map();\n    }\n    addInteractor(name, initInteractor) {\n        this._initializers.interactors.set(name, initInteractor);\n    }\n    addParticleMover(name, initMover) {\n        this._initializers.movers.set(name, initMover);\n    }\n    addParticleUpdater(name, initUpdater) {\n        this._initializers.updaters.set(name, initUpdater);\n    }\n    addPathGenerator(type, pathGenerator) {\n        !this.getPathGenerator(type) && this.pathGenerators.set(type, pathGenerator);\n    }\n    addPlugin(plugin) {\n        !this.getPlugin(plugin.id) && this.plugins.push(plugin);\n    }\n    addPreset(presetKey, options, override = false) {\n        (override || !this.getPreset(presetKey)) && this.presets.set(presetKey, options);\n    }\n    addShapeDrawer(types, drawer) {\n        executeOnSingleOrMultiple(types, (type) => {\n            !this.getShapeDrawer(type) && this.drawers.set(type, drawer);\n        });\n    }\n    destroy(container) {\n        this.updaters.delete(container);\n        this.movers.delete(container);\n        this.interactors.delete(container);\n    }\n    getAvailablePlugins(container) {\n        const res = new Map();\n        for (const plugin of this.plugins) {\n            plugin.needsPlugin(container.actualOptions) && res.set(plugin.id, plugin.getPlugin(container));\n        }\n        return res;\n    }\n    getInteractors(container, force = false) {\n        return getItemsFromInitializer(container, this.interactors, this._initializers.interactors, force);\n    }\n    getMovers(container, force = false) {\n        return getItemsFromInitializer(container, this.movers, this._initializers.movers, force);\n    }\n    getPathGenerator(type) {\n        return this.pathGenerators.get(type);\n    }\n    getPlugin(plugin) {\n        return this.plugins.find((t) => t.id === plugin);\n    }\n    getPreset(preset) {\n        return this.presets.get(preset);\n    }\n    getShapeDrawer(type) {\n        return this.drawers.get(type);\n    }\n    getSupportedShapes() {\n        return this.drawers.keys();\n    }\n    getUpdaters(container, force = false) {\n        return getItemsFromInitializer(container, this.updaters, this._initializers.updaters, force);\n    }\n    loadOptions(options, sourceOptions) {\n        for (const plugin of this.plugins) {\n            plugin.loadOptions(options, sourceOptions);\n        }\n    }\n    loadParticlesOptions(container, options, ...sourceOptions) {\n        const updaters = this.updaters.get(container);\n        if (!updaters) {\n            return;\n        }\n        for (const updater of updaters) {\n            updater.loadOptions && updater.loadOptions(options, ...sourceOptions);\n        }\n    }\n}\n", "import { errorPrefix, generatedAttribute } from \"./Utils/Constants\";\nimport { getLogger, isBoolean, isFunction, isNumber, isString, itemFromSingleOrMultiple } from \"../Utils/Utils\";\nimport { Container } from \"./Container\";\nimport { EventDispatcher } from \"../Utils/EventDispatcher\";\nimport { Plugins } from \"./Utils/Plugins\";\nimport { getRandom } from \"../Utils/NumberUtils\";\nasync function getDataFromUrl(data) {\n    const url = itemFromSingleOrMultiple(data.url, data.index);\n    if (!url) {\n        return data.fallback;\n    }\n    const response = await fetch(url);\n    if (response.ok) {\n        return response.json();\n    }\n    getLogger().error(`${errorPrefix} ${response.status} while retrieving config file`);\n    return data.fallback;\n}\nfunction isParamsEmpty(params) {\n    return !params.id && !params.element && !params.url && !params.options;\n}\nfunction isParams(obj) {\n    return !isParamsEmpty(obj);\n}\nexport class Engine {\n    constructor() {\n        this._configs = new Map();\n        this._domArray = [];\n        this._eventDispatcher = new EventDispatcher();\n        this._initialized = false;\n        this.plugins = new Plugins(this);\n    }\n    get configs() {\n        const res = {};\n        for (const [name, config] of this._configs) {\n            res[name] = config;\n        }\n        return res;\n    }\n    get version() {\n        return \"2.12.0\";\n    }\n    addConfig(nameOrConfig, config) {\n        if (isString(nameOrConfig)) {\n            if (config) {\n                config.name = nameOrConfig;\n                this._configs.set(nameOrConfig, config);\n            }\n        }\n        else {\n            this._configs.set(nameOrConfig.name ?? \"default\", nameOrConfig);\n        }\n    }\n    addEventListener(type, listener) {\n        this._eventDispatcher.addEventListener(type, listener);\n    }\n    async addInteractor(name, interactorInitializer, refresh = true) {\n        this.plugins.addInteractor(name, interactorInitializer);\n        await this.refresh(refresh);\n    }\n    async addMover(name, moverInitializer, refresh = true) {\n        this.plugins.addParticleMover(name, moverInitializer);\n        await this.refresh(refresh);\n    }\n    async addParticleUpdater(name, updaterInitializer, refresh = true) {\n        this.plugins.addParticleUpdater(name, updaterInitializer);\n        await this.refresh(refresh);\n    }\n    async addPathGenerator(name, generator, refresh = true) {\n        this.plugins.addPathGenerator(name, generator);\n        await this.refresh(refresh);\n    }\n    async addPlugin(plugin, refresh = true) {\n        this.plugins.addPlugin(plugin);\n        await this.refresh(refresh);\n    }\n    async addPreset(preset, options, override = false, refresh = true) {\n        this.plugins.addPreset(preset, options, override);\n        await this.refresh(refresh);\n    }\n    async addShape(shape, drawer, initOrRefresh, afterEffectOrRefresh, destroyOrRefresh, refresh = true) {\n        let customDrawer;\n        let realRefresh = refresh, realInit, realAfterEffect, realDestroy;\n        if (isBoolean(initOrRefresh)) {\n            realRefresh = initOrRefresh;\n            realInit = undefined;\n        }\n        else {\n            realInit = initOrRefresh;\n        }\n        if (isBoolean(afterEffectOrRefresh)) {\n            realRefresh = afterEffectOrRefresh;\n            realAfterEffect = undefined;\n        }\n        else {\n            realAfterEffect = afterEffectOrRefresh;\n        }\n        if (isBoolean(destroyOrRefresh)) {\n            realRefresh = destroyOrRefresh;\n            realDestroy = undefined;\n        }\n        else {\n            realDestroy = destroyOrRefresh;\n        }\n        if (isFunction(drawer)) {\n            customDrawer = {\n                afterEffect: realAfterEffect,\n                destroy: realDestroy,\n                draw: drawer,\n                init: realInit,\n            };\n        }\n        else {\n            customDrawer = drawer;\n        }\n        this.plugins.addShapeDrawer(shape, customDrawer);\n        await this.refresh(realRefresh);\n    }\n    dispatchEvent(type, args) {\n        this._eventDispatcher.dispatchEvent(type, args);\n    }\n    dom() {\n        return this._domArray;\n    }\n    domItem(index) {\n        const dom = this.dom(), item = dom[index];\n        if (!item || item.destroyed) {\n            dom.splice(index, 1);\n            return;\n        }\n        return item;\n    }\n    init() {\n        if (this._initialized) {\n            return;\n        }\n        this._initialized = true;\n    }\n    async load(tagIdOrOptionsOrParams, options) {\n        return this.loadFromArray(tagIdOrOptionsOrParams, options);\n    }\n    async loadFromArray(tagIdOrOptionsOrParams, optionsOrIndex, index) {\n        let params;\n        if (!isParams(tagIdOrOptionsOrParams)) {\n            params = {};\n            if (isString(tagIdOrOptionsOrParams)) {\n                params.id = tagIdOrOptionsOrParams;\n            }\n            else {\n                params.options = tagIdOrOptionsOrParams;\n            }\n            if (isNumber(optionsOrIndex)) {\n                params.index = optionsOrIndex;\n            }\n            else {\n                params.options = optionsOrIndex ?? params.options;\n            }\n            params.index = index ?? params.index;\n        }\n        else {\n            params = tagIdOrOptionsOrParams;\n        }\n        return this._loadParams(params);\n    }\n    async loadJSON(tagId, pathConfigJson, index) {\n        let url, id;\n        if (isNumber(pathConfigJson) || pathConfigJson === undefined) {\n            url = tagId;\n        }\n        else {\n            id = tagId;\n            url = pathConfigJson;\n        }\n        return this._loadParams({ id: id, url, index });\n    }\n    async refresh(refresh = true) {\n        if (!refresh) {\n            return;\n        }\n        this.dom().forEach((t) => t.refresh());\n    }\n    removeEventListener(type, listener) {\n        this._eventDispatcher.removeEventListener(type, listener);\n    }\n    async set(id, element, options, index) {\n        const params = { index };\n        if (isString(id)) {\n            params.id = id;\n        }\n        else {\n            params.element = id;\n        }\n        if (element instanceof HTMLElement) {\n            params.element = element;\n        }\n        else {\n            params.options = element;\n        }\n        if (isNumber(options)) {\n            params.index = options;\n        }\n        else {\n            params.options = options ?? params.options;\n        }\n        return this._loadParams(params);\n    }\n    async setJSON(id, element, pathConfigJson, index) {\n        const params = {};\n        if (id instanceof HTMLElement) {\n            params.element = id;\n            params.url = element;\n            params.index = pathConfigJson;\n        }\n        else {\n            params.id = id;\n            params.element = element;\n            params.url = pathConfigJson;\n            params.index = index;\n        }\n        return this._loadParams(params);\n    }\n    setOnClickHandler(callback) {\n        const dom = this.dom();\n        if (!dom.length) {\n            throw new Error(`${errorPrefix} can only set click handlers after calling tsParticles.load()`);\n        }\n        for (const domItem of dom) {\n            domItem.addClickHandler(callback);\n        }\n    }\n    async _loadParams(params) {\n        const id = params.id ?? `tsparticles${Math.floor(getRandom() * 10000)}`, { index, url } = params, options = url ? await getDataFromUrl({ fallback: params.options, url, index }) : params.options;\n        let domContainer = params.element ?? document.getElementById(id);\n        if (!domContainer) {\n            domContainer = document.createElement(\"div\");\n            domContainer.id = id;\n            document.body.append(domContainer);\n        }\n        const currentOptions = itemFromSingleOrMultiple(options, index), dom = this.dom(), oldIndex = dom.findIndex((v) => v.id === id);\n        if (oldIndex >= 0) {\n            const old = this.domItem(oldIndex);\n            if (old && !old.destroyed) {\n                old.destroy();\n                dom.splice(oldIndex, 1);\n            }\n        }\n        let canvasEl;\n        if (domContainer.tagName.toLowerCase() === \"canvas\") {\n            canvasEl = domContainer;\n            canvasEl.dataset[generatedAttribute] = \"false\";\n        }\n        else {\n            const existingCanvases = domContainer.getElementsByTagName(\"canvas\");\n            if (existingCanvases.length) {\n                canvasEl = existingCanvases[0];\n                canvasEl.dataset[generatedAttribute] = \"false\";\n            }\n            else {\n                canvasEl = document.createElement(\"canvas\");\n                canvasEl.dataset[generatedAttribute] = \"true\";\n                domContainer.appendChild(canvasEl);\n            }\n        }\n        if (!canvasEl.style.width) {\n            canvasEl.style.width = \"100%\";\n        }\n        if (!canvasEl.style.height) {\n            canvasEl.style.height = \"100%\";\n        }\n        const newItem = new Container(this, id, currentOptions);\n        if (oldIndex >= 0) {\n            dom.splice(oldIndex, 0, newItem);\n        }\n        else {\n            dom.push(newItem);\n        }\n        newItem.canvas.loadCanvas(canvasEl);\n        await newItem.start();\n        return newItem;\n    }\n}\n", "import { getRangeValue, parseAlpha } from \"./NumberUtils\";\nimport { hslToRgb, hslaToRgba } from \"./ColorUtils\";\nexport class HslColorManager {\n    constructor() {\n        this.key = \"hsl\";\n        this.stringPrefix = \"hsl\";\n    }\n    handleColor(color) {\n        const colorValue = color.value, hslColor = colorValue.hsl ?? color.value;\n        if (hslColor.h !== undefined && hslColor.s !== undefined && hslColor.l !== undefined) {\n            return hslToRgb(hslColor);\n        }\n    }\n    handleRangeColor(color) {\n        const colorValue = color.value, hslColor = colorValue.hsl ?? color.value;\n        if (hslColor.h !== undefined && hslColor.l !== undefined) {\n            return hslToRgb({\n                h: getRangeValue(hslColor.h),\n                l: getRangeValue(hslColor.l),\n                s: getRangeValue(hslColor.s),\n            });\n        }\n    }\n    parseString(input) {\n        if (!input.startsWith(\"hsl\")) {\n            return;\n        }\n        const regex = /hsla?\\(\\s*(\\d+)\\s*,\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*(,\\s*([\\d.%]+)\\s*)?\\)/i, result = regex.exec(input);\n        return result\n            ? hslaToRgba({\n                a: result.length > 4 ? parseAlpha(result[5]) : 1,\n                h: parseInt(result[1], 10),\n                l: parseInt(result[3], 10),\n                s: parseInt(result[2], 10),\n            })\n            : undefined;\n    }\n}\n", "import { getRangeValue, parseAlpha } from \"./NumberUtils\";\nexport class RgbColorManager {\n    constructor() {\n        this.key = \"rgb\";\n        this.stringPrefix = \"rgb\";\n    }\n    handleColor(color) {\n        const colorValue = color.value, rgbColor = colorValue.rgb ?? color.value;\n        if (rgbColor.r !== undefined) {\n            return rgbColor;\n        }\n    }\n    handleRangeColor(color) {\n        const colorValue = color.value, rgbColor = colorValue.rgb ?? color.value;\n        if (rgbColor.r !== undefined) {\n            return {\n                r: getRangeValue(rgbColor.r),\n                g: getRangeValue(rgbColor.g),\n                b: getRangeValue(rgbColor.b),\n            };\n        }\n    }\n    parseString(input) {\n        if (!input.startsWith(this.stringPrefix)) {\n            return;\n        }\n        const regex = /rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([\\d.%]+)\\s*)?\\)/i, result = regex.exec(input);\n        return result\n            ? {\n                a: result.length > 4 ? parseAlpha(result[5]) : 1,\n                b: parseInt(result[3], 10),\n                g: parseInt(result[2], 10),\n                r: parseInt(result[1], 10),\n            }\n            : undefined;\n    }\n}\n", "import { Engine } from \"./Core/Engine\";\nimport { HslColorManager } from \"./Utils/HslColorManager\";\nimport { RgbColorManager } from \"./Utils/RgbColorManager\";\nimport { addColorManager } from \"./Utils/ColorUtils\";\nexport function init() {\n    const rgbColorManager = new RgbColorManager(), hslColorManager = new HslColorManager();\n    addColorManager(rgbColorManager);\n    addColorManager(hslColorManager);\n    const engine = new Engine();\n    engine.init();\n    return engine;\n}\n", "import { init } from \"./init\";\nimport { isSsr } from \"./Utils/Utils\";\nconst tsParticles = init();\nif (!isSsr()) {\n    window.tsParticles = tsParticles;\n}\nexport * from \"./exports\";\nexport * from \"./export-types\";\nexport { tsParticles };\n", "const isObject = (val) => typeof val === \"object\" && val !== null;\nexport function deepCompare(obj1, obj2, excludeKeyFn = () => false) {\n    if (!isObject(obj1) || !isObject(obj2)) {\n        return obj1 === obj2;\n    }\n    const keys1 = Object.keys(obj1).filter(key => !excludeKeyFn(key)), keys2 = Object.keys(obj2).filter(key => !excludeKeyFn(key));\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        const value1 = obj1[key], value2 = obj2[key];\n        if (isObject(value1) && isObject(value2)) {\n            if (value1 === obj2 && value2 === obj1) {\n                continue;\n            }\n            if (!deepCompare(value1, value2, excludeKeyFn)) {\n                return false;\n            }\n        }\n        else if (Array.isArray(value1) && Array.isArray(value2)) {\n            if (!deepCompareArrays(value1, value2, excludeKeyFn)) {\n                return false;\n            }\n        }\n        else if (value1 !== value2) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction deepCompareArrays(arr1, arr2, excludeKeyFn) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n        const val1 = arr1[i], val2 = arr2[i];\n        if (Array.isArray(val1) && Array.isArray(val2)) {\n            if (!deepCompareArrays(val1, val2, excludeKeyFn)) {\n                return false;\n            }\n        }\n        else if (isObject(val1) && isObject(val2)) {\n            if (!deepCompare(val1, val2, excludeKeyFn)) {\n                return false;\n            }\n        }\n        else if (val1 !== val2) {\n            return false;\n        }\n    }\n    return true;\n}\n", "import Particles from \"./Particles\";\nexport default Particles;\nexport { Particles };\n", "import d from \"./node_modules/react-tsparticles/esm/index.js\";export default d;\nexport * from \"./node_modules/react-tsparticles/esm/index.js\""],
  "mappings": ";;;;;;;;;;;AAAA,mBAAiC;;;ACA1B,IAAM,qBAAqB;AAC3B,IAAM,iBAAiB;AACvB,IAAM,eAAe;AACrB,IAAM,kBAAkB;AACxB,IAAM,gBAAgB;AACtB,IAAM,iBAAiB;AACvB,IAAM,kBAAkB;AACxB,IAAM,gBAAgB;AACtB,IAAM,iBAAiB;AACvB,IAAM,mBAAmB;AACzB,IAAM,cAAc;AACpB,IAAM,wBAAwB;AAC9B,IAAM,cAAc;;;ACVpB,qBAAe;AAAA,EAClB,YAAY,WAAW,GAAG,GAAG;AACzB,SAAK,mBAAmB,CAAC,OAAO,WAAW;AACvC,WAAK,IAAI,KAAK,IAAI,SAAS;AAC3B,WAAK,IAAI,KAAK,IAAI,SAAS;AAAA;AAE/B,QAAI,CAAC,SAAS,cAAc,WAAW;AACnC,WAAK,IAAI,UAAU;AACnB,WAAK,IAAI,UAAU;AACnB,YAAM,WAAW;AACjB,WAAK,IAAI,SAAS,IAAI,SAAS,IAAI;AAAA,eAE9B,cAAc,UAAa,MAAM,QAAW;AACjD,WAAK,IAAI;AACT,WAAK,IAAI;AACT,WAAK,IAAI,gBAAK;AAAA,WAEb;AACD,YAAM,IAAI,MAAM,GAAG;AAAA;AAAA;AAAA,aAGhB,SAAS;AAChB,WAAO,SAAS,OAAO,GAAG,GAAG;AAAA;AAAA,MAE7B,QAAQ;AACR,WAAO,KAAK,MAAM,KAAK,GAAG,KAAK;AAAA;AAAA,MAE/B,MAAM,OAAO;AACb,SAAK,iBAAiB,OAAO,KAAK;AAAA;AAAA,MAElC,SAAS;AACT,WAAO,KAAK,KAAK,KAAK;AAAA;AAAA,MAEtB,OAAO,QAAQ;AACf,SAAK,iBAAiB,KAAK,OAAO;AAAA;AAAA,SAE/B,MAAM,QAAQ;AACjB,WAAO,SAAS,OAAO,OAAO,GAAG,OAAO,GAAG,OAAO;AAAA;AAAA,SAE/C,OAAO,GAAG,GAAG,GAAG;AACnB,WAAO,IAAI,SAAS,GAAG,GAAG;AAAA;AAAA,EAE9B,IAAI,GAAG;AACH,WAAO,SAAS,OAAO,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE;AAAA;AAAA,EAElE,MAAM,GAAG;AACL,SAAK,KAAK,EAAE;AACZ,SAAK,KAAK,EAAE;AACZ,SAAK,KAAK,EAAE;AAAA;AAAA,EAEhB,OAAO;AACH,WAAO,SAAS,MAAM;AAAA;AAAA,EAE1B,WAAW,GAAG;AACV,WAAO,KAAK,IAAI,GAAG;AAAA;AAAA,EAEvB,aAAa,GAAG;AACZ,WAAO,KAAK,IAAI,GAAG;AAAA;AAAA,EAEvB,IAAI,GAAG;AACH,WAAO,SAAS,OAAO,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI;AAAA;AAAA,EAE5D,MAAM,GAAG;AACL,SAAK,KAAK;AACV,SAAK,KAAK;AACV,SAAK,KAAK;AAAA;AAAA,EAEd,cAAc;AACV,WAAO,KAAK,KAAK,IAAI,KAAK,KAAK;AAAA;AAAA,EAEnC,KAAK,GAAG;AACJ,WAAO,SAAS,OAAO,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI;AAAA;AAAA,EAE5D,OAAO,GAAG;AACN,SAAK,KAAK;AACV,SAAK,KAAK;AACV,SAAK,KAAK;AAAA;AAAA,EAEd,YAAY;AACR,UAAM,SAAS,KAAK;AACpB,QAAI,UAAU,GAAG;AACb,WAAK,OAAO,IAAM;AAAA;AAAA;AAAA,EAG1B,OAAO,OAAO;AACV,WAAO,SAAS,OAAO,KAAK,IAAI,KAAK,IAAI,SAAS,KAAK,IAAI,KAAK,IAAI,QAAQ,KAAK,IAAI,KAAK,IAAI,SAAS,KAAK,IAAI,KAAK,IAAI,QAAQ;AAAA;AAAA,EAErI,MAAM,GAAG;AACL,SAAK,IAAI,EAAE;AACX,SAAK,IAAI,EAAE;AACX,UAAM,MAAM;AACZ,SAAK,IAAI,IAAI,IAAI,IAAI,IAAI;AAAA;AAAA,EAE7B,IAAI,GAAG;AACH,WAAO,SAAS,OAAO,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE;AAAA;AAAA,EAElE,QAAQ,GAAG;AACP,SAAK,KAAK,EAAE;AACZ,SAAK,KAAK,EAAE;AACZ,SAAK,KAAK,EAAE;AAAA;AAAA;;;ACpGb,2BAAqB,SAAS;AAAA,EACjC,YAAY,WAAW,GAAG;AACtB,UAAM,WAAW,GAAG;AAAA;AAAA,aAEb,SAAS;AAChB,WAAO,OAAO,OAAO,GAAG;AAAA;AAAA,SAErB,MAAM,QAAQ;AACjB,WAAO,OAAO,OAAO,OAAO,GAAG,OAAO;AAAA;AAAA,SAEnC,OAAO,GAAG,GAAG;AAChB,WAAO,IAAI,OAAO,GAAG;AAAA;AAAA;;;ACV7B,IAAI,UAAU,KAAK;AACnB,IAAM,UAAU,IAAI;AAab,qBAAqB;AACxB,SAAO,MAAM,WAAW,GAAG,IAAI;AAAA;AAE5B,eAAe,KAAK,KAAK,KAAK;AACjC,SAAO,KAAK,IAAI,KAAK,IAAI,KAAK,MAAM;AAAA;AAKjC,uBAAuB,GAAG;AAC7B,QAAM,MAAM,YAAY;AACxB,MAAI,MAAM,YAAY;AACtB,MAAI,QAAQ,KAAK;AACb,UAAM;AAAA;AAEV,SAAO,cAAe,OAAM,OAAO;AAAA;AAEhC,uBAAuB,OAAO;AACjC,SAAO,SAAS,SAAS,QAAQ,cAAc;AAAA;AAE5C,qBAAqB,OAAO;AAC/B,SAAO,SAAS,SAAS,QAAQ,MAAM;AAAA;AAEpC,qBAAqB,OAAO;AAC/B,SAAO,SAAS,SAAS,QAAQ,MAAM;AAAA;AAEpC,uBAAuB,QAAQ,OAAO;AACzC,MAAI,WAAW,SAAU,UAAU,UAAa,SAAS,SAAU;AAC/D,WAAO;AAAA;AAEX,QAAM,MAAM,YAAY,SAAS,MAAM,YAAY;AACnD,SAAO,UAAU,SACX;AAAA,IACE,KAAK,KAAK,IAAI,KAAK;AAAA,IACnB,KAAK,KAAK,IAAI,KAAK;AAAA,MAErB,cAAc,KAAK;AAAA;AAEtB,kBAAkB,SAAS;AAC9B,QAAM,SAAS,QAAQ,QAAQ,EAAE,QAAQ,iBAAiB,UAAU,UAC9D;AAAA,IACE,QAAQ;AAAA,IACR,cAAc;AAAA,MAEhB;AACN,SAAO,SAAS,cAAc,cAAc,QAAQ,OAAO,iBAAiB,cAAc,QAAQ;AAAA;AAE/F,sBAAsB,QAAQ,QAAQ;AACzC,QAAM,KAAK,OAAO,IAAI,OAAO,GAAG,KAAK,OAAO,IAAI,OAAO;AACvD,SAAO,EAAE,IAAQ,IAAQ,UAAU,KAAK,KAAK,MAAM,IAAI,MAAM;AAAA;AAE1D,qBAAqB,QAAQ,QAAQ;AACxC,SAAO,aAAa,QAAQ,QAAQ;AAAA;AAEjC,mCAAmC,WAAW,UAAU,QAAQ;AACnE,MAAI,SAAS,YAAY;AACrB,WAAQ,YAAY,KAAK,KAAM;AAAA;AAEnC,UAAQ;AAAA,SACC;AACD,aAAO,CAAC,KAAK,KAAK;AAAA,SACjB;AACD,aAAO,CAAC,KAAK,KAAK;AAAA,SACjB;AACD,aAAO;AAAA,SACN;AACD,aAAO,KAAK,KAAK;AAAA,SAChB;AACD,aAAO,KAAK,KAAK;AAAA,SAChB;AACD,aAAQ,IAAI,KAAK,KAAM;AAAA,SACtB;AACD,aAAO,KAAK;AAAA,SACX;AACD,aAAQ,KAAK,KAAK,KAAM;AAAA,SACvB;AACD,aAAO,KAAK,MAAM,OAAO,IAAI,SAAS,GAAG,OAAO,IAAI,SAAS;AAAA,SAC5D;AACD,aAAO,KAAK,MAAM,SAAS,IAAI,OAAO,GAAG,SAAS,IAAI,OAAO;AAAA;AAE7D,aAAO,cAAc,KAAK,KAAK;AAAA;AAAA;AAGpC,iCAAiC,WAAW;AAC/C,QAAM,eAAe,OAAO;AAC5B,eAAa,SAAS;AACtB,eAAa,QAAQ;AACrB,SAAO;AAAA;AA0BJ,2CAA2C,MAAM;AAjIxD;AAkII,SAAO;AAAA,IACH,GAAG,iBAAK,aAAL,mBAAe,MAAf,YAAoB,cAAc,KAAK,KAAK;AAAA,IAC/C,GAAG,iBAAK,aAAL,mBAAe,MAAf,YAAoB,cAAc,KAAK,KAAK;AAAA;AAAA;AAUhD,oBAAoB,OAAO;AAC9B,SAAO,QAAS,MAAM,SAAS,OAAO,WAAW,SAAS,MAAM,WAAW,SAAU;AAAA;;;AC7IzF,IAAM,UAAU;AAAA,EACZ,OAAO,QAAQ;AAAA,EACf,OAAO,QAAQ;AAAA,EACf,MAAM,QAAQ;AAAA,EACd,KAAK,QAAQ;AAAA,EACb,SAAS,QAAQ;AAAA,EACjB,SAAS,QAAQ;AAAA;AAUd,qBAAqB;AACxB,SAAO;AAAA;AAuBJ,iBAAiB;AACpB,SAAO,OAAO,WAAW,eAAe,CAAC,UAAU,OAAO,OAAO,aAAa,eAAe,CAAC,OAAO;AAAA;AAElG,yBAAyB;AAC5B,SAAO,CAAC,WAAW,OAAO,eAAe;AAAA;AAEtC,wBAAwB,OAAO;AAClC,MAAI,CAAC,iBAAiB;AAClB;AAAA;AAEJ,SAAO,WAAW;AAAA;AAEf,8BAA8B,UAAU;AAC3C,MAAI,WAAW,OAAO,qBAAqB,aAAa;AACpD;AAAA;AAEJ,SAAO,IAAI,iBAAiB;AAAA;AAEzB,mBAAmB,OAAO,OAAO;AACpC,SAAO,UAAU,SAAU,QAAQ,UAAU,MAAM,QAAQ,SAAS;AAAA;AASjE,0BAA0B,OAAO;AACpC,SAAO,KAAK,MAAM,cAAc,MAAM;AAAA;AAEnC,uBAAuB,OAAO,OAAO,WAAW,MAAM;AACzD,SAAO,MAAM,UAAU,UAAa,WAAW,QAAQ,MAAM,SAAS,iBAAiB;AAAA;AA6BpF,oBAAoB,gBAAgB,SAAS;AAChD,aAAW,UAAU,SAAS;AAC1B,QAAI,WAAW,UAAa,WAAW,MAAM;AACzC;AAAA;AAEJ,QAAI,CAAC,SAAS,SAAS;AACnB,oBAAc;AACd;AAAA;AAEJ,UAAM,gBAAgB,MAAM,QAAQ;AACpC,QAAI,iBAAkB,UAAS,gBAAgB,CAAC,eAAe,CAAC,MAAM,QAAQ,eAAe;AACzF,oBAAc;AAAA,eAET,CAAC,iBAAkB,UAAS,gBAAgB,CAAC,eAAe,MAAM,QAAQ,eAAe;AAC9F,oBAAc;AAAA;AAElB,eAAW,OAAO,QAAQ;AACtB,UAAI,QAAQ,aAAa;AACrB;AAAA;AAEJ,YAAM,aAAa,QAAQ,QAAQ,WAAW,MAAM,WAAW;AAC/D,eAAS,OACL,SAAS,UAAU,MAAM,QAAQ,SAC3B,MAAM,IAAI,CAAC,MAAM,WAAW,SAAS,MAAM,MAC3C,WAAW,SAAS,MAAM;AAAA;AAAA;AAG5C,SAAO;AAAA;AAyGJ,mCAAmC,KAAK,UAAU;AACrD,SAAO,QAAQ,OAAO,IAAI,IAAI,CAAC,MAAM,UAAU,SAAS,MAAM,UAAU,SAAS,KAAK;AAAA;AAEnF,kCAAkC,KAAK,OAAO,UAAU;AAC3D,SAAO,QAAQ,OAAO,cAAc,KAAK,OAAO,YAAY;AAAA;AAKzD,2CAA2C,SAAS,SAAS;AAChE,QAAM,aAAa,QAAQ,OAAO,mBAAmB,QAAQ,WAAW,MAAM;AAAA,IAC1E,WAAW,cAAc,iBAAiB,SAAS;AAAA,IACnD,QAAQ,iBAAiB;AAAA,IACzB,OAAO,cAAc,QAAQ,SAAS;AAAA,IACtC,KAAK,YAAY,cAAc;AAAA,IAC/B,KAAK,YAAY,cAAc;AAAA,IAC/B,OAAO;AAAA,IACP,UAAU,cAAc,iBAAiB;AAAA,IACzC,MAAM;AAAA;AAEV,MAAI,iBAAiB,QAAQ;AACzB,QAAI,QAAQ,IAAI,cAAc,iBAAiB;AAC/C,YAAQ,iBAAiB;AAAA,WAChB;AACD,YAAI,SAAS;AACb;AAAA,WACC;AACD,YAAI,SAAS;AACb;AAAA,WACC;AACD,YAAI,SAAS,eAAe,MAAM,eAAe;AACjD;AAAA;AAER,UAAM,aAAa,iBAAiB,SAAS;AAC7C,YAAQ,iBAAiB;AAAA,WAChB;AACD,YAAI,QAAQ,IAAI;AAChB,YAAI,YAAY;AACZ,cAAI,SAAS;AAAA;AAEjB;AAAA,WACC;AACD,YAAI,QAAQ,IAAI;AAChB,YAAI,YAAY;AACZ,cAAI,SAAS;AAAA;AAEjB;AAAA,WACC;AAAA;AAED,YAAI,QAAQ,cAAc;AAC1B,YAAI,YAAY;AACZ,cAAI,SAAS,eAAe,MAAM,eAAe;AAAA;AAErD;AAAA;AAAA;AAGZ,MAAI,eAAe,IAAI;AACvB,SAAO;AAAA;AAEX,2BAA2B,gBAAgB,YAAY;AACnD,QAAM,YAAY,eAAe,SAAS;AAC1C,MAAI,CAAC,WAAW;AACZ,UAA6B,qBAArB,QAAM,MAAe,IAAT,iBAAS,IAAT,CAAZ;AACR,WAAO;AAAA;AAEX,QAAM,aAAa,OAAO;AAC1B,MAAI,YAAY;AACZ,WAAO;AAAA,MACH,GAAI,eAAe,IAAI,MAAO,WAAW;AAAA,MACzC,GAAI,eAAe,IAAI,MAAO,WAAW;AAAA;AAAA,SAG5C;AACD,WAAO;AAAA,MACH,OAAQ,eAAe,QAAQ,MAAO,WAAW;AAAA,MACjD,QAAS,eAAe,SAAS,MAAO,WAAW;AAAA;AAAA;AAAA;AAIxD,qBAAqB,UAAU,YAAY;AAC9C,SAAO,kBAAkB,UAAU;AAAA;AAKhC,mBAAmB,KAAK;AAC3B,SAAO,OAAO,QAAQ;AAAA;AAEnB,kBAAkB,KAAK;AAC1B,SAAO,OAAO,QAAQ;AAAA;AAEnB,kBAAkB,KAAK;AAC1B,SAAO,OAAO,QAAQ;AAAA;AAEnB,oBAAoB,KAAK;AAC5B,SAAO,OAAO,QAAQ;AAAA;AAEnB,kBAAkB,KAAK;AAC1B,SAAO,OAAO,QAAQ,YAAY,QAAQ;AAAA;AAEvC,iBAAiB,KAAK;AACzB,SAAO,MAAM,QAAQ;AAAA;;;AC9UzB,IAAM,mBAAmB;AAAzB,IAA0D,gBAAgB,IAAI;AACvE,yBAAyB,SAAS;AACrC,gBAAc,IAAI,QAAQ,KAAK;AAAA;AAEnC,iBAAiB,GAAG,GAAG,GAAG;AACtB,MAAI,IAAI,GAAG;AACP,SAAK;AAAA;AAET,MAAI,IAAI,GAAG;AACP,SAAK;AAAA;AAET,MAAI,IAAI,IAAI,GAAG;AACX,WAAO,IAAK,KAAI,KAAK,IAAI;AAAA;AAE7B,MAAI,IAAI,IAAI,GAAG;AACX,WAAO;AAAA;AAEX,MAAI,IAAI,IAAI,GAAG;AACX,WAAO,IAAK,KAAI,KAAM,KAAI,IAAI,KAAK;AAAA;AAEvC,SAAO;AAAA;AAEX,sBAAsB,OAAO;AACzB,aAAW,CAAC,EAAE,YAAY,eAAe;AACrC,QAAI,MAAM,WAAW,QAAQ,eAAe;AACxC,aAAO,QAAQ,YAAY;AAAA;AAAA;AAGnC,QAAM,iBAAiB,8CAA8C,WAAW,MAAM,QAAQ,gBAAgB,CAAC,GAAG,GAAG,GAAG,GAAG,MAAM;AAC7H,WAAO,IAAI,IAAI,IAAI,IAAI,IAAI,IAAK,OAAM,SAAY,IAAI,IAAI;AAAA,MAC1D,QAAQ,0DAA0D,SAAS,MAAM,KAAK;AAC1F,SAAO,SACD;AAAA,IACE,GAAG,OAAO,OAAO,SAAY,SAAS,OAAO,IAAI,MAAM,MAAO;AAAA,IAC9D,GAAG,SAAS,OAAO,IAAI;AAAA,IACvB,GAAG,SAAS,OAAO,IAAI;AAAA,IACvB,GAAG,SAAS,OAAO,IAAI;AAAA,MAEzB;AAAA;AAEH,yBAAyB,OAAO,OAAO,WAAW,MAAM;AAC3D,MAAI,CAAC,OAAO;AACR;AAAA;AAEJ,QAAM,QAAQ,SAAS,SAAS,EAAE,OAAO,UAAU;AACnD,MAAI,SAAS,MAAM,QAAQ;AACvB,WAAO,WAAW,MAAM,OAAO,OAAO;AAAA;AAE1C,MAAI,QAAQ,MAAM,QAAQ;AACtB,WAAO,gBAAgB;AAAA,MACnB,OAAO,cAAc,MAAM,OAAO,OAAO;AAAA;AAAA;AAGjD,aAAW,CAAC,EAAE,YAAY,eAAe;AACrC,UAAM,MAAM,QAAQ,iBAAiB;AACrC,QAAI,KAAK;AACL,aAAO;AAAA;AAAA;AAAA;AAIZ,oBAAoB,OAAO,OAAO,WAAW,MAAM;AACtD,MAAI,CAAC,OAAO;AACR;AAAA;AAEJ,QAAM,QAAQ,SAAS,SAAS,EAAE,OAAO,UAAU;AACnD,MAAI,SAAS,MAAM,QAAQ;AACvB,WAAO,MAAM,UAAU,mBAAmB,sBAAsB,YAAY,MAAM;AAAA;AAEtF,MAAI,QAAQ,MAAM,QAAQ;AACtB,WAAO,WAAW;AAAA,MACd,OAAO,cAAc,MAAM,OAAO,OAAO;AAAA;AAAA;AAGjD,aAAW,CAAC,EAAE,YAAY,eAAe;AACrC,UAAM,MAAM,QAAQ,YAAY;AAChC,QAAI,KAAK;AACL,aAAO;AAAA;AAAA;AAAA;AAQZ,yBAAyB,OAAO,OAAO,WAAW,MAAM;AAC3D,QAAM,MAAM,gBAAgB,OAAO,OAAO;AAC1C,SAAO,MAAM,SAAS,OAAO;AAAA;AAE1B,kBAAkB,OAAO;AAC5B,QAAM,KAAK,MAAM,IAAI,KAAK,KAAK,MAAM,IAAI,KAAK,KAAK,MAAM,IAAI,KAAK,MAAM,KAAK,IAAI,IAAI,IAAI,KAAK,MAAM,KAAK,IAAI,IAAI,IAAI,KAAK,MAAM;AAAA,IAC5H,GAAG;AAAA,IACH,GAAI,OAAM,OAAO;AAAA,IACjB,GAAG;AAAA;AAEP,MAAI,QAAQ,KAAK;AACb,QAAI,IAAI,IAAI,IAAI,MAAO,OAAM,OAAQ,OAAM,OAAQ,OAAM,OAAQ,KAAM,MAAM;AAC7E,QAAI,IACA,OAAO,MACA,MAAK,MAAO,OAAM,OAClB,IAAI,IAAI,OAAO,MAAM,IAAO,MAAK,MAAO,OAAM,OAAO,IAAO,MAAK,MAAO,OAAM;AAAA;AAE7F,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,IAAI,IAAI,GAAG;AACX,QAAI,KAAK;AAAA;AAEb,MAAI,IAAI,KAAK,KAAK;AACd,QAAI,KAAK;AAAA;AAEb,SAAO;AAAA;AAKJ,qBAAqB,OAAO;AAC/B,SAAO,aAAa;AAAA;AAEjB,kBAAkB,KAAK;AAC1B,QAAM,SAAS,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,aAAa;AAAA,IAC9C,GAAG,IAAI,IAAI;AAAA,IACX,GAAG,IAAI,IAAI;AAAA,IACX,GAAG,IAAI,IAAI;AAAA;AAEf,MAAI,CAAC,WAAW,GAAG;AACf,WAAO,IAAI,OAAO,IAAI,OAAO,IAAI,WAAW;AAAA,SAE3C;AACD,UAAM,IAAI,WAAW,IAAI,MACnB,WAAW,IAAK,KAAI,WAAW,KAC/B,WAAW,IAAI,WAAW,IAAI,WAAW,IAAI,WAAW,GAAG,IAAI,IAAI,WAAW,IAAI;AACxF,WAAO,IAAI,QAAQ,GAAG,GAAG,WAAW,IAAI,IAAI;AAC5C,WAAO,IAAI,QAAQ,GAAG,GAAG,WAAW;AACpC,WAAO,IAAI,QAAQ,GAAG,GAAG,WAAW,IAAI,IAAI;AAAA;AAEhD,SAAO,IAAI,KAAK,MAAM,OAAO,IAAI;AACjC,SAAO,IAAI,KAAK,MAAM,OAAO,IAAI;AACjC,SAAO,IAAI,KAAK,MAAM,OAAO,IAAI;AACjC,SAAO;AAAA;AAEJ,oBAAoB,MAAM;AAC7B,QAAM,YAAY,SAAS;AAC3B,SAAO;AAAA,IACH,GAAG,KAAK;AAAA,IACR,GAAG,UAAU;AAAA,IACb,GAAG,UAAU;AAAA,IACb,GAAG,UAAU;AAAA;AAAA;AAGd,2BAA2B,KAAK;AACnC,QAAM,WAAW,oBAAO;AACxB,SAAO;AAAA,IACH,GAAG,KAAK,MAAM,cAAc,cAAc,UAAU;AAAA,IACpD,GAAG,KAAK,MAAM,cAAc,cAAc,UAAU;AAAA,IACpD,GAAG,KAAK,MAAM,cAAc,cAAc,UAAU;AAAA;AAAA;AAGrD,yBAAyB,OAAO,SAAS;AAC5C,SAAO,QAAQ,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,4BAAW;AAAA;AAE3D,yBAAyB,OAAO,SAAS;AAC5C,SAAO,QAAQ,MAAM,MAAM,MAAM,OAAO,MAAM,OAAO,4BAAW;AAAA;AA0D7D,6BAA6B,WAAW;AAC3C,SAAO,cAAc,SACf;AAAA,IACE,GAAG,UAAU,EAAE;AAAA,IACf,GAAG,UAAU,EAAE;AAAA,IACf,GAAG,UAAU,EAAE;AAAA,MAEjB;AAAA;;;ACtNH,mBAAmB,SAAS,WAAW,WAAW;AACrD,UAAQ,YAAY,gCAAa;AACjC,UAAQ,SAAS,GAAG,GAAG,UAAU,OAAO,UAAU;AAAA;AAE/C,oBAAoB,SAAS,WAAW,OAAO,SAAS;AAC3D,MAAI,CAAC,OAAO;AACR;AAAA;AAEJ,UAAQ,cAAc;AACtB,UAAQ,UAAU,OAAO,GAAG,GAAG,UAAU,OAAO,UAAU;AAC1D,UAAQ,cAAc;AAAA;AAEnB,eAAe,SAAS,WAAW;AACtC,UAAQ,UAAU,GAAG,GAAG,UAAU,OAAO,UAAU;AAAA;AAEhD,sBAAsB,MAAM;AA7BnC;AA8BI,QAAM,EAAE,WAAW,SAAS,UAAU,OAAO,aAAa,gBAAgB,WAAW,QAAQ,SAAS,QAAQ,cAAe;AAC7H,QAAM,MAAM,SAAS,eAAe,QAAQ,SAAS,WAAY,UAAS,eAAe,SAAS,SAAS,QAAQ,IAAI,aAAa;AAAA,IAChI,KAAK,KAAK,IAAI;AAAA,IACd,KAAK,KAAK,IAAI;AAAA,KACf,gBAAgB;AAAA,IACf,GAAG,WAAW,MAAO,iBAAU,MAAV,YAAe;AAAA,IACpC,GAAG,WAAW,MAAO,iBAAU,MAAV,YAAe;AAAA,IACpC,GAAG,CAAC,WAAW,MAAO,iBAAU,MAAV,YAAe;AAAA,IACrC,GAAG,WAAW,MAAO,iBAAU,MAAV,YAAe;AAAA;AAExC,UAAQ,aAAa,cAAc,GAAG,cAAc,GAAG,cAAc,GAAG,cAAc,GAAG,IAAI,GAAG,IAAI;AACpG,UAAQ;AACR,MAAI,gBAAgB;AAChB,YAAQ,2BAA2B;AAAA;AAEvC,QAAM,cAAc,SAAS;AAC7B,MAAI,OAAO,UAAU,aAAa;AAC9B,YAAQ,aAAa,OAAO;AAC5B,YAAQ,cAAc,gBAAgB;AACtC,YAAQ,gBAAgB,OAAO,OAAO;AACtC,YAAQ,gBAAgB,OAAO,OAAO;AAAA;AAE1C,MAAI,YAAY,MAAM;AAClB,YAAQ,YAAY,YAAY;AAAA;AAEpC,QAAM,cAAc,eAAS,gBAAT,YAAwB;AAC5C,UAAQ,YAAY;AACpB,MAAI,YAAY,QAAQ;AACpB,YAAQ,cAAc,YAAY;AAAA;AAEtC,YAAU,WAAW,SAAS,UAAU,QAAQ,SAAS;AACzD,MAAI,cAAc,GAAG;AACjB,YAAQ;AAAA;AAEZ,MAAI,SAAS,OAAO;AAChB,YAAQ;AAAA;AAEZ,MAAI,SAAS,MAAM;AACf,YAAQ;AAAA;AAEZ,uBAAqB,WAAW,SAAS,UAAU,QAAQ,SAAS;AACpE,UAAQ,2BAA2B;AACnC,UAAQ,aAAa,GAAG,GAAG,GAAG,GAAG,GAAG;AAAA;AAEjC,mBAAmB,WAAW,SAAS,UAAU,QAAQ,SAAS,OAAO;AAC5E,MAAI,CAAC,SAAS,OAAO;AACjB;AAAA;AAEJ,QAAM,SAAS,UAAU,QAAQ,IAAI,SAAS;AAC9C,MAAI,CAAC,QAAQ;AACT;AAAA;AAEJ,SAAO,KAAK,SAAS,UAAU,QAAQ,SAAS,OAAO,UAAU,OAAO;AAAA;AAErE,8BAA8B,WAAW,SAAS,UAAU,QAAQ,SAAS,OAAO;AACvF,MAAI,CAAC,SAAS,OAAO;AACjB;AAAA;AAEJ,QAAM,SAAS,UAAU,QAAQ,IAAI,SAAS;AAC9C,MAAI,CAAC,UAAU,CAAC,OAAO,aAAa;AAChC;AAAA;AAEJ,SAAO,YAAY,SAAS,UAAU,QAAQ,SAAS,OAAO,UAAU,OAAO;AAAA;AAE5E,oBAAoB,SAAS,QAAQ,OAAO;AAC/C,MAAI,CAAC,OAAO,MAAM;AACd;AAAA;AAEJ,SAAO,KAAK,SAAS;AAAA;AAElB,4BAA4B,SAAS,QAAQ,UAAU,OAAO;AACjE,MAAI,CAAC,OAAO,cAAc;AACtB;AAAA;AAEJ,SAAO,aAAa,SAAS,UAAU;AAAA;AAEpC,kBAAkB,OAAO,MAAM,OAAO;AACzC,SAAO;AAAA,IACH,GAAG,MAAM;AAAA,IACT,GAAG,MAAM;AAAA,IACT,GAAG,MAAM,IAAK,UAAS,WAAW,KAAK,KAAK;AAAA;AAAA;;;AC1GpD,2BAA2B,QAAQ,WAAW,KAAK;AAJnD;AAKI,QAAM,WAAW,UAAU;AAC3B,MAAI,aAAa,QAAW;AACxB,WAAO,OAAQ,cAAO,SAAP,YAAe,KAAK;AAAA;AAAA;AAGpC,mBAAa;AAAA,EAChB,YAAY,WAAW;AACnB,SAAK,YAAY;AACjB,SAAK,yBAAyB,CAAC,aAAa;AACxC,iBAAW,WAAW,KAAK,mBAAmB;AAC1C,gBAAQ,aAAa,QAAQ,UAAU;AAAA;AAAA;AAG/C,SAAK,wBAAwB,CAAC,KAAK,UAAU,QAAQ,UAAU,aAAa,cAAc;AACtF,iBAAW,WAAW,KAAK,kBAAkB;AACzC,YAAI,QAAQ,gBAAgB;AACxB,gBAAM,EAAE,MAAM,WAAW,QAAQ,eAAe,UAAU,KAAK,QAAQ;AACvE,cAAI,MAAM;AACN,wBAAY,OAAO;AAAA;AAEvB,cAAI,QAAQ;AACR,wBAAY,SAAS;AAAA;AAAA;AAG7B,YAAI,QAAQ,oBAAoB;AAC5B,gBAAM,mBAAmB,QAAQ,mBAAmB;AACpD,qBAAW,OAAO,kBAAkB;AAChC,8BAAkB,WAAW,kBAAkB;AAAA;AAAA;AAGvD,gBAAQ,cAAc,QAAQ,WAAW;AAAA;AAAA;AAGjD,SAAK,sBAAsB,MAAM;AAC7B,iBAAW,UAAU,KAAK,gBAAgB;AACtC,eAAO,UAAU,OAAO;AAAA;AAAA;AAGhC,SAAK,2BAA2B,CAAC,aAAa;AAC1C,UAAI,QAAQ;AACZ,iBAAW,UAAU,KAAK,eAAe;AACrC,YAAI,CAAC,UAAU,OAAO,mBAAmB;AACrC,mBAAS,gBAAgB,OAAO,kBAAkB;AAAA;AAEtD,YAAI,CAAC,UAAU,OAAO,qBAAqB;AACvC,mBAAS,gBAAgB,OAAO,oBAAoB;AAAA;AAExD,YAAI,UAAU,QAAQ;AAClB;AAAA;AAAA;AAGR,aAAO,CAAC,QAAQ;AAAA;AAEpB,SAAK,aAAa,MAAM;AACpB,YAAM,UAAU,KAAK,UAAU,eAAe,QAAQ,QAAQ,eAAe,OAAO,QAAQ,MAAM,OAAO,WAAW,gBAAgB;AACpI,UAAI,UAAU;AACV,cAAM,aAAa,iCACZ,WADY;AAAA,UAEf,GAAG,MAAM;AAAA;AAEb,aAAK,mBAAmB,gBAAgB,YAAY,WAAW;AAAA;AAAA;AAGvE,SAAK,aAAa,MAAM;AACpB,YAAM,UAAU,KAAK,SAAS,UAAU,KAAK,UAAU;AACvD,UAAI,CAAC,SAAS;AACV;AAAA;AAEJ,UAAI,KAAK,aAAa;AAClB,aAAK,iBAAiB,WAAW,IAAI,QAAQ;AAC7C,aAAK;AAAA,aAEJ;AACD,aAAK;AAAA;AAET,iBAAW,OAAO,QAAQ,OAAO;AAC7B,YAAI,CAAC,OAAO,CAAC,QAAQ,OAAO;AACxB;AAAA;AAEJ,cAAM,QAAQ,QAAQ,MAAM;AAC5B,YAAI,CAAC,OAAO;AACR;AAAA;AAEJ,gBAAQ,MAAM,YAAY,KAAK,OAAO;AAAA;AAAA;AAG9C,SAAK,aAAa,YAAY;AAC1B,YAAM,UAAU,KAAK,UAAU,eAAe,QAAQ,QAAQ,UAAU,KAAK,OAAO,YAAY,MAAM;AACtG,UAAI,CAAC,MAAM,QAAQ;AACf;AAAA;AAEJ,UAAI,UAAU,OAAO;AACjB,cAAM,YAAY,gBAAgB,UAAU;AAC5C,YAAI,CAAC,WAAW;AACZ;AAAA;AAEJ,cAAM,SAAQ,QAAQ,UAAU,KAAK;AACrC,aAAK,aAAa;AAAA,UACd,OAAO,mBACA;AAAA,UAEP,SAAS,IAAI,OAAM;AAAA;AAAA,aAGtB;AACD,cAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AACnC,cAAI,CAAC,UAAU,OAAO;AAClB;AAAA;AAEJ,gBAAM,MAAM,SAAS,cAAc;AACnC,cAAI,iBAAiB,QAAQ,MAAM;AAC/B,iBAAK,aAAa;AAAA,cACd,OAAO;AAAA,cACP,SAAS,IAAI,MAAM;AAAA;AAEvB;AAAA;AAEJ,cAAI,iBAAiB,SAAS,CAAC,QAAQ;AACnC,mBAAO,IAAI;AAAA;AAEf,cAAI,MAAM,UAAU;AAAA;AAAA;AAAA;AAIhC,SAAK,aAAa,CAAC,cAAc;AAC7B,WAAK,KAAK,CAAC,QAAQ,UAAU,KAAK,KAAK,MAAM;AAAA;AAEjD,SAAK,cAAc,CAAC,OAAO,YAAY;AACnC,WAAK,KAAK,CAAC,QAAQ,WAAW,KAAK,KAAK,MAAM,OAAO;AAAA;AAEzD,SAAK,eAAe,MAAM;AACtB,YAAM,UAAU,KAAK;AACrB,UAAI,CAAC,SAAS;AACV;AAAA;AAEJ,WAAK,sBAAsB,CAAC,aAAa,SAAS;AAClD,WAAK;AACL,WAAK;AACL,WAAK,sBAAsB,CAAC,aAAa,SAAS,QAAQ,SAAS,EAAE,YAAY;AAAA;AAErF,SAAK,sBAAsB,MAAM;AAC7B,YAAM,UAAU,KAAK,SAAS,gBAAgB,KAAK;AACnD,UAAI,CAAE,YAAW,gBAAgB;AAC7B;AAAA;AAEJ,YAAM,QAAQ,QAAQ;AACtB,YAAM,WAAW,cAAc;AAC/B,YAAM,SAAS,cAAc;AAC7B,YAAM,MAAM,cAAc;AAC1B,YAAM,OAAO,cAAc;AAC3B,YAAM,QAAQ,cAAc;AAC5B,YAAM,SAAS,cAAc;AAAA;AAEjC,SAAK,wBAAwB,CAAC,aAAa;AACvC,UAAI,CAAC,KAAK,mBAAmB;AACzB;AAAA;AAEJ,eAAS,KAAK;AAAA;AAElB,SAAK,sBAAsB,MAAM;AAC7B,YAAM,UAAU,KAAK;AACrB,UAAI,CAAC,SAAS;AACV;AAAA;AAEJ,YAAM,WAAW,aAAa,QAAQ,QAAQ;AAC9C,YAAM,YAAY,YAAY,SAAS;AACvC,YAAM,YAAY,WAAW,KAAK,UAAU,cAAc,WAAW,OAAO,SAAS,KAAK;AAC1F,YAAM,YAAY,OAAO,KAAK;AAC9B,YAAM,YAAY,QAAQ,KAAK;AAC/B,YAAM,YAAY,SAAS,QAAQ;AACnC,YAAM,YAAY,UAAU,QAAQ;AAAA;AAExC,SAAK,OAAO;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA;AAEX,SAAK,WAAW;AAChB,SAAK,aAAa;AAClB,SAAK,mBAAmB;AACxB,SAAK,oBAAoB;AACzB,SAAK,iBAAiB;AACtB,SAAK,gBAAgB;AAAA;AAAA,MAErB,cAAc;AACd,WAAO,KAAK,UAAU,cAAc,WAAW;AAAA;AAAA,EAEnD,QAAQ;AACJ,UAAM,UAAU,KAAK,UAAU,eAAe,QAAQ,QAAQ,UAAU,KAAK,OAAO,YAAY,KAAK;AACrG,QAAI,QAAQ,eAAe,QAAQ;AAC/B,WAAK;AAAA,eAEA,MAAM,UAAU,MAAM,SAAS,KAAK,WAAW;AACpD,UAAI,UAAU,OAAO;AACjB,aAAK,WAAW,gBAAgB,UAAU,OAAO,UAAU;AAAA,iBAEtD,UAAU,OAAO;AACtB,aAAK,YAAY,UAAU,OAAO,UAAU;AAAA;AAAA,WAG/C;AACD,WAAK,KAAK,CAAC,QAAQ;AACf,cAAM,KAAK,KAAK;AAAA;AAAA;AAAA;AAAA,EAI5B,UAAU;AACN,SAAK;AACL,QAAI,KAAK,YAAY;AACjB,YAAM,UAAU,KAAK;AACrB,iBAAW,QAAQ;AAAA,WAElB;AACD,WAAK;AAAA;AAET,SAAK,mBAAmB;AACxB,SAAK,oBAAoB;AACzB,SAAK,iBAAiB;AACtB,SAAK,gBAAgB;AAAA;AAAA,EAEzB,KAAK,IAAI;AACL,UAAM,MAAM,KAAK;AACjB,QAAI,CAAC,KAAK;AACN;AAAA;AAEJ,WAAO,GAAG;AAAA;AAAA,EAEd,aAAa,UAAU,OAAO;AAvOlC;AAwOQ,QAAI,SAAS,YAAY,SAAS,WAAW;AACzC;AAAA;AAEJ,UAAM,SAAS,SAAS;AACxB,QAAI,UAAU,GAAG;AACb;AAAA;AAEJ,UAAM,UAAU,SAAS,gBAAgB,UAAU,eAAS,qBAAT,YAA6B;AAChF,QAAI,CAAC,QAAQ,UAAU,KAAK,yBAAyB;AACrD,QAAI,CAAC,QAAQ;AACT,eAAS;AAAA;AAEb,QAAI,CAAC,QAAQ;AACT,eAAS;AAAA;AAEb,QAAI,CAAC,UAAU,CAAC,QAAQ;AACpB;AAAA;AAEJ,SAAK,KAAK,CAAC,QAAQ;AA1P3B;AA2PY,YAAM,YAAY,KAAK,WAAW,UAAU,UAAU,eAAe,gBAAgB,SAAS,QAAQ,QAAQ,iBAAkB,KAAI,SAAS,iBAAiB,cAAc,aAAa,UAAU,qBAAS,OAAO,YAAhB,YAA2B,gBAAS,YAAT,oBAAkB,UAA7C,YAAsD,GAAG,gBAAgB,eAAS,kBAAT,YAA0B,SAAS,WAAW,UAAU,gBAAgB,iBAAiB,gBAAgB,gBAAgB,YAAY,IAAI,cAAc;AAAA,QAC/Z,MAAM,SAAS,gBAAgB,QAAQ,YAAY;AAAA;AAEvD,kBAAY,SAAS,SAAS,gBAAgB,QAAQ,kBAAkB,YAAY;AACpF,WAAK,sBAAsB,KAAK,UAAU,QAAQ,UAAU,aAAa;AACzE,mBAAa;AAAA,QACT;AAAA,QACA,SAAS;AAAA,QACT;AAAA,QACA;AAAA,QACA;AAAA,QACA,gBAAgB,QAAQ,eAAe;AAAA,QACvC,WAAW,QAAQ,eAAe;AAAA,QAClC,QAAQ,SAAU,KAAI,SAAS,iBAAiB,cAAc;AAAA,QAC9D,SAAS;AAAA,QACT,QAAQ,SAAS,QAAQ;AAAA,QACzB;AAAA;AAEJ,WAAK,uBAAuB;AAAA;AAAA;AAAA,EAGpC,mBAAmB,QAAQ,UAAU,OAAO;AACxC,SAAK,KAAK,CAAC,QAAQ,mBAAmB,KAAK,QAAQ,UAAU;AAAA;AAAA,EAEjE,WAAW,QAAQ,OAAO;AACtB,SAAK,KAAK,CAAC,QAAQ,WAAW,KAAK,QAAQ;AAAA;AAAA,QAEzC,OAAO;AACT,SAAK,sBAAsB,CAAC,QAAQ,IAAI;AACxC,SAAK,oBAAoB,qBAAqB,CAAC,YAAY;AACvD,iBAAW,UAAU,SAAS;AAC1B,YAAI,OAAO,SAAS,gBAAgB,OAAO,kBAAkB,SAAS;AAClE,eAAK;AAAA;AAAA;AAAA;AAIjB,SAAK;AACL,SAAK;AACL,SAAK;AACL,QAAI;AACA,YAAM,KAAK;AAAA,aAER,GAAP;AACI,kBAAY,MAAM;AAAA;AAEtB,SAAK;AACL,SAAK,sBAAsB,CAAC,QAAQ;AAChC,UAAI,CAAC,KAAK,SAAS;AACf;AAAA;AAEJ,UAAI,QAAQ,KAAK,SAAS,EAAE,YAAY;AAAA;AAE5C,SAAK;AACL,SAAK;AACL,SAAK;AAAA;AAAA,EAET,iBAAiB;AACb,UAAM,UAAU,KAAK,UAAU,eAAe,aAAa,QAAQ,YAAY,UAAU,KAAK;AAC9F,QAAI,CAAC,SAAS;AACV;AAAA;AAEJ,UAAM,eAAe,QAAQ;AAC7B,QAAI,CAAC,cAAc;AACf;AAAA;AAEJ,QAAI,WAAW,OAAO;AAClB,YAAM,QAAQ,gBAAgB,WAAW;AACzC,mBAAa,kBAAkB,QAAQ,gBAAgB,OAAO,WAAW,WAAW;AAAA,WAEnF;AACD,mBAAa,kBAAkB;AAAA;AAEnC,iBAAa,kBAAkB,WAAW,SAAS;AACnD,iBAAa,qBAAqB,WAAW,YAAY;AACzD,iBAAa,mBAAmB,WAAW,UAAU;AACrD,iBAAa,iBAAiB,WAAW,QAAQ;AAAA;AAAA,EAErD,cAAc;AACV,SAAK,iBAAiB;AACtB,eAAW,CAAC,EAAE,WAAW,KAAK,UAAU,SAAS;AAC7C,UAAI,OAAO,QAAQ;AACf,aAAK,eAAe,KAAK;AAAA;AAE7B,UAAI,OAAO,qBAAqB,OAAO,qBAAqB;AACxD,aAAK,cAAc,KAAK;AAAA;AAAA;AAAA;AAAA,EAIpC,eAAe;AACX,SAAK,mBAAmB;AACxB,SAAK,oBAAoB;AACzB,eAAW,WAAW,KAAK,UAAU,UAAU,UAAU;AACrD,UAAI,QAAQ,WAAW;AACnB,aAAK,kBAAkB,KAAK;AAAA;AAEhC,UAAI,QAAQ,kBAAkB,QAAQ,sBAAsB,QAAQ,YAAY;AAC5E,aAAK,iBAAiB,KAAK;AAAA;AAAA;AAAA;AAAA,EAIvC,WAAW,QAAQ;AACf,QAAI,KAAK,cAAc,KAAK,SAAS;AACjC,WAAK,QAAQ;AAAA;AAEjB,SAAK,aACD,OAAO,WAAW,sBAAsB,OAAO,UACzC,OAAO,QAAQ,wBAAwB,SACvC,KAAK;AACf,SAAK,UAAU;AACf,SAAK,QAAQ,aAAa;AAC1B,SAAK,iBAAiB,WAAW,IAAI,KAAK,QAAQ;AAClD,SAAK,KAAK,SAAS,OAAO;AAC1B,SAAK,KAAK,QAAQ,OAAO;AACzB,SAAK,WAAW,KAAK,QAAQ,WAAW;AACxC,SAAK,sBAAsB,CAAC,QAAQ;AAChC,UAAI,CAAC,KAAK,SAAS;AACf;AAAA;AAEJ,UAAI,QAAQ,KAAK,SAAS,EAAE,YAAY;AAAA;AAE5C,SAAK,UAAU,OAAO;AACtB,SAAK;AAAA;AAAA,EAET,QAAQ;AACJ,UAAM,UAAU,KAAK,UAAU;AAC/B,SAAK,KAAK,CAAC,QAAQ;AACf,UAAI,QAAQ,eAAe,UAAU,QAAQ,eAAe,OAAO;AAC/D,cAAM,KAAK,KAAK;AAChB,aAAK,WAAW,KAAK;AAAA,aAEpB;AACD,aAAK;AAAA;AAAA;AAAA;AAAA,EAIjB,SAAS;AACL,QAAI,CAAC,KAAK,SAAS;AACf,aAAO;AAAA;AAEX,UAAM,YAAY,KAAK,WAAW,UAAU,UAAU,OAAO,YAAY,OAAO,UAAU,OAAO,MAAM,UAAU;AAAA,MAC7G,OAAO,KAAK,QAAQ,cAAc;AAAA,MAClC,QAAQ,KAAK,QAAQ,eAAe;AAAA;AAExC,QAAI,QAAQ,WAAW,KAAK,UACxB,QAAQ,UAAU,KAAK,SACvB,QAAQ,WAAW,KAAK,QAAQ,UAChC,QAAQ,UAAU,KAAK,QAAQ,OAAO;AACtC,aAAO;AAAA;AAEX,UAAM,UAAU,mBAAK;AACrB,SAAK,QAAQ,QAAQ,KAAK,QAAQ,KAAK,QAAQ,cAAc;AAC7D,SAAK,QAAQ,SAAS,KAAK,SAAS,KAAK,QAAQ,eAAe;AAChE,QAAI,KAAK,UAAU,SAAS;AACxB,WAAK,eAAe;AAAA,QAChB,OAAO,KAAK,QAAQ,QAAQ;AAAA,QAC5B,QAAQ,KAAK,SAAS,QAAQ;AAAA;AAAA;AAGtC,WAAO;AAAA;AAAA,EAEX,OAAO;AACH,SAAK,sBAAsB,CAAC,QAAQ,IAAI;AACxC,SAAK,oBAAoB;AACzB,SAAK,KAAK,CAAC,QAAQ,MAAM,KAAK,KAAK;AAAA;AAAA,QAEjC,eAAe;AACjB,QAAI,CAAC,KAAK,WAAW,CAAC,KAAK,UAAU;AACjC;AAAA;AAEJ,UAAM,YAAY,KAAK,WAAW,eAAe,UAAU;AAC3D,cAAU,UAAU;AACpB,SAAK;AACL,QAAI,cAAc;AACd,YAAM,UAAU;AAAA;AAAA;AAAA;;;ACta5B,wBAAwB,SAAS,OAAO,SAAS,KAAK,SAAS;AAC3D,MAAI,KAAK;AACL,QAAI,aAAa,EAAE,SAAS;AAC5B,QAAI,UAAU,UAAU;AACpB,iBAAW,UAAU;AAAA,eAEhB,YAAY,QAAW;AAC5B,mBAAa;AAAA;AAEjB,YAAQ,iBAAiB,OAAO,SAAS;AAAA,SAExC;AACD,UAAM,gBAAgB;AACtB,YAAQ,oBAAoB,OAAO,SAAS;AAAA;AAAA;AAG7C,2BAAqB;AAAA,EACxB,YAAY,WAAW;AACnB,SAAK,YAAY;AACjB,SAAK,qBAAqB,CAAC,MAAM;AAC7B,YAAM,aAAY,KAAK,WAAW,UAAU,WAAU;AACtD,UAAI,KAAK,UAAU;AACf,cAAM,qBAAqB,WAAU,cAAc,OAAO,WAAW,mBAAmB;AACxF,YAAI,CAAC,UAAU;AACX;AAAA;AAEJ,2BAAmB,gBAAgB,mBAAK;AACxC,2BAAmB,YAAY,IAAI,OAAO;AAC1C,cAAM,UAAU,QAAQ,cAAc,OAAO;AAC7C,kCAA0B,QAAQ,MAAM,CAAC,SAAS,KAAK,UAAU,gBAAgB;AAAA;AAErF,UAAI,EAAE,SAAS,YAAY;AACvB,mBAAW,MAAM,KAAK,qBAAqB;AAAA;AAAA;AAGnD,SAAK,qBAAqB,CAAC,MAAM;AAC7B,YAAM,aAAa,GAAG,aAAY,KAAK,WAAW,UAAU,WAAU,SAAS,gBAAgB,QAAQ,eAAe,YAAY,WAAW,UAAU,cAAc,OAAO,cAAc,OAAO,QAAQ,QAAQ,OAAO,KAAK,CAAC,WAAU,OAAM,SAAS;AACvP,UAAI,SAAS,MAAM,QAAQ,MAAM;AAC7B,mBAAU,UAAU;AAAA;AAAA;AAG5B,SAAK,0BAA0B,MAAM;AACjC,YAAM,aAAY,KAAK,WAAW,UAAU,WAAU;AACtD,WAAK;AACL,UAAI,CAAC,QAAQ,aAAa;AACtB;AAAA;AAEJ,UAAI,YAAY,SAAS,QAAQ;AAC7B,mBAAU,aAAa;AACvB,mBAAU;AAAA,aAET;AACD,mBAAU,aAAa;AACvB,YAAI,WAAU,sBAAsB;AAChC,qBAAU,KAAK;AAAA,eAEd;AACD,qBAAU,KAAK;AAAA;AAAA;AAAA;AAI3B,SAAK,sBAAsB,YAAY;AACnC,UAAI,KAAK,gBAAgB;AACrB,qBAAa,KAAK;AAClB,eAAO,KAAK;AAAA;AAEhB,WAAK,iBAAiB,WAAW,YAAY;AACzC,cAAM,SAAS,KAAK,UAAU;AAC9B,kBAAW,MAAM,OAAO;AAAA,SACzB,KAAK,UAAU,cAAc,cAAc,OAAO,OAAO,QAAQ;AAAA;AAExE,SAAK,gCAAgC,CAAC,oBAAoB,QAAQ;AAC9D,YAAM,WAAW,KAAK,WAAW,aAAY,KAAK,WAAW,UAAU,WAAU;AACjF,YAAM,kBAAkB,WAAU,cAAc;AAChD,UAAI,CAAC,iBAAiB;AAClB;AAAA;AAEJ,YAAM,OAAO,iBAAiB,WAAW,WAAU,OAAO;AAC1D,UAAI,UAAU;AACV,iBAAS,MAAM,gBAAgB,SAAS,WAAW,YAAY;AAAA;AAEnE,UAAI,CAAE,SAAQ,cAAc,OAAO,QAAQ,UAAU,QAAQ,cAAc,OAAO,QAAQ,SAAS;AAC/F;AAAA;AAEJ,qBAAe,iBAAiB,gBAAgB,SAAS,WAAW;AACpE,qBAAe,iBAAiB,iBAAiB,SAAS,YAAY;AACtE,qBAAe,iBAAiB,gBAAgB,SAAS,WAAW;AACpE,UAAI,CAAC,QAAQ,cAAc,OAAO,QAAQ,QAAQ;AAC9C,uBAAe,iBAAiB,eAAe,SAAS,UAAU;AAAA,aAEjE;AACD,uBAAe,iBAAiB,eAAe,SAAS,eAAe;AACvE,uBAAe,iBAAiB,cAAc,SAAS,SAAS;AAChE,uBAAe,iBAAiB,gBAAgB,SAAS,WAAW;AAAA;AAExE,qBAAe,iBAAiB,oBAAoB,SAAS,YAAY;AACzE,qBAAe,iBAAiB,kBAAkB,SAAS,aAAa;AAAA;AAE5E,SAAK,mBAAmB,CAAC,QAAQ;AApGzC;AAqGY,YAAM,WAAW,KAAK,WAAW,aAAY,KAAK,WAAW,UAAU,WAAU,eAAe,aAAa,QAAQ,cAAc,WAAW,WAAW,WAAU,OAAO;AAC1K,UAAI,qBAAqB;AACzB,UAAI,eAAe,UAAU;AACzB,mBAAU,cAAc,UAAU;AAClC,6BAAqB;AAAA,iBAEhB,eAAe,YAAY,UAAU;AAC1C,mBAAU,cAAc,UAAU,eAAS,kBAAT,YAA0B,SAAS;AAAA,aAEpE;AACD,mBAAU,cAAc,UAAU;AAAA;AAEtC,WAAK,kBAAkB;AACvB,WAAK,cAAc;AACnB,WAAK,8BAA8B,oBAAoB;AACvD,UAAI,UAAU;AACV,uBAAe,UAAU,uBAAuB,SAAS,kBAAkB,KAAK;AAAA;AAAA;AAGxF,SAAK,oBAAoB,CAAC,QAAQ;AAC9B,YAAM,WAAW,KAAK,WAAW,aAAa,eAAe;AAC7D,UAAI,CAAC,YAAY;AACb;AAAA;AAEJ,UAAI,WAAW,qBAAqB,QAAW;AAC3C,uBAAe,YAAY,UAAU,SAAS,aAAa;AAC3D;AAAA;AAEJ,UAAI,WAAW,gBAAgB,QAAW;AACtC;AAAA;AAEJ,UAAI,KAAK;AACL,mBAAW,YAAY,SAAS;AAAA,aAE/B;AACD,mBAAW,eAAe,SAAS;AAAA;AAAA;AAG3C,SAAK,gBAAgB,CAAC,QAAQ;AAC1B,YAAM,WAAW,KAAK,WAAW,aAAY,KAAK,WAAW,UAAU,WAAU;AACjF,UAAI,CAAC,QAAQ,cAAc,OAAO,QAAQ;AACtC;AAAA;AAEJ,UAAI,OAAO,mBAAmB,aAAa;AACvC,uBAAe,QAAQ,aAAa,SAAS,QAAQ;AACrD;AAAA;AAEJ,YAAM,WAAW,WAAU,OAAO;AAClC,UAAI,KAAK,mBAAmB,CAAC,KAAK;AAC9B,YAAI,UAAU;AACV,eAAK,gBAAgB,UAAU;AAAA;AAEnC,aAAK,gBAAgB;AACrB,eAAO,KAAK;AAAA,iBAEP,CAAC,KAAK,mBAAmB,OAAO,UAAU;AAC/C,aAAK,kBAAkB,IAAI,eAAe,OAAO,YAAY;AACzD,gBAAM,QAAQ,QAAQ,KAAK,CAAC,MAAM,EAAE,WAAW;AAC/C,cAAI,CAAC,OAAO;AACR;AAAA;AAEJ,gBAAM,KAAK;AAAA;AAEf,aAAK,gBAAgB,QAAQ;AAAA;AAAA;AAGrC,SAAK,aAAa,MAAM;AACpB,YAAM,EAAE,kBAAkB,KAAK;AAC/B,UAAI,CAAC,eAAe;AAChB;AAAA;AAEJ,YAAM,EAAE,UAAU;AAClB,YAAM,WAAW;AACjB,YAAM,eAAe,MAAM;AAAA;AAE/B,SAAK,mBAAmB,CAAC,MAAM;AAC3B,YAAM,aAAY,KAAK,WAAW,UAAU,WAAU,eAAe,EAAE,UAAU,WAAU;AAC3F,YAAM,SAAS;AACf,UAAI,UAAU;AACd,YAAM,gBAAgB,MAAM;AAC5B,UAAI,CAAC,iBAAiB,CAAC,QAAQ,cAAc,OAAO,QAAQ,QAAQ;AAChE;AAAA;AAEJ,iBAAW,CAAC,EAAE,WAAW,WAAU,SAAS;AACxC,YAAI,CAAC,OAAO,oBAAoB;AAC5B;AAAA;AAEJ,kBAAU,OAAO,mBAAmB;AACpC,YAAI,SAAS;AACT;AAAA;AAAA;AAGR,UAAI,CAAC,SAAS;AACV,aAAK,mBAAmB;AAAA;AAE5B,YAAM,WAAW;AAAA;AAErB,SAAK,oBAAoB,MAAM;AAC3B,YAAM,gBAAgB,KAAK,UAAU;AACrC,UAAI,CAAC,eAAe;AAChB;AAAA;AAEJ,YAAM,QAAQ,cAAc;AAC5B,aAAO,MAAM;AACb,aAAO,MAAM;AACb,aAAO,MAAM;AACb,oBAAc,SAAS;AACvB,YAAM,SAAS;AACf,YAAM,WAAW;AAAA;AAErB,SAAK,kBAAkB,CAAC,MAAM;AAnNtC;AAoNY,YAAM,aAAY,KAAK,WAAW,UAAU,WAAU,eAAe,gBAAgB,WAAU,eAAe,WAAW,WAAU,OAAO;AAC1I,UAAI,CAAC,iBAAiB,CAAC,cAAc,SAAS;AAC1C;AAAA;AAEJ,oBAAc,MAAM,SAAS;AAC7B,UAAI;AACJ,UAAI,EAAE,KAAK,WAAW,YAAY;AAC9B,aAAK,WAAW;AAChB,cAAM,aAAa;AACnB,YAAI,cAAc,YAAY,QAAQ;AAClC,cAAI,UAAU;AACV,kBAAM,aAAa,SAAS;AAC5B,kBAAM;AAAA,cACF,GAAG,WAAW,UAAU,WAAW;AAAA,cACnC,GAAG,WAAW,UAAU,WAAW;AAAA;AAAA;AAAA,mBAItC,QAAQ,cAAc,cAAc,UAAU;AACnD,gBAAM,SAAS,WAAW,QAAQ,SAAS,WAAW;AACtD,cAAI,UAAU,UAAU,UAAU;AAC9B,kBAAM,aAAa,OAAO,yBAAyB,aAAa,OAAO,yBAAyB,aAAa,SAAS;AACtH,kBAAM;AAAA,cACF,GAAG,WAAW,UAAU,IAAI,WAAW,OAAQ,YAAW,OAAO,WAAW;AAAA,cAC5E,GAAG,WAAW,UAAU,IAAI,WAAW,MAAO,YAAW,MAAM,WAAW;AAAA;AAAA,iBAG7E;AACD,kBAAM;AAAA,cACF,GAAG,iBAAW,YAAX,YAAsB,WAAW;AAAA,cACpC,GAAG,iBAAW,YAAX,YAAsB,WAAW;AAAA;AAAA;AAAA,mBAIvC,WAAW,WAAW,UAAU;AACrC,gBAAM;AAAA,YACF,GAAG,iBAAW,YAAX,YAAsB,WAAW;AAAA,YACpC,GAAG,iBAAW,YAAX,YAAsB,WAAW;AAAA;AAAA;AAAA,aAI3C;AACD,aAAK,WAAW,EAAE,SAAS;AAC3B,YAAI,UAAU;AACV,gBAAM,aAAa,GAAG,YAAY,WAAW,QAAQ,WAAW,QAAQ,SAAS,IAAI,aAAa,SAAS;AAC3G,gBAAM;AAAA,YACF,GAAG,UAAU,UAAW,kBAAW,SAAX,YAAmB;AAAA,YAC3C,GAAG,UAAU,UAAW,kBAAW,QAAX,YAAkB;AAAA;AAAA;AAAA;AAItD,YAAM,UAAU,WAAU,OAAO;AACjC,UAAI,KAAK;AACL,YAAI,KAAK;AACT,YAAI,KAAK;AAAA;AAEb,oBAAc,MAAM,WAAW;AAC/B,oBAAc,SAAS;AAAA;AAE3B,SAAK,YAAY,CAAC,MAAM;AACpB,YAAM,MAAM,GAAG,UAAU,MAAM,KAAK,IAAI;AACxC,iBAAW,SAAS,SAAS;AACzB,aAAK,SAAS,OAAO,MAAM;AAAA;AAE/B,WAAK;AAAA;AAET,SAAK,iBAAiB,CAAC,MAAM;AACzB,YAAM,MAAM,GAAG,UAAU,MAAM,KAAK,IAAI;AACxC,iBAAW,SAAS,SAAS;AACzB,aAAK,SAAS,OAAO,MAAM;AAAA;AAE/B,WAAK,iBAAiB;AAAA;AAE1B,SAAK,cAAc,CAAC,MAAM;AACtB,YAAM,MAAM,GAAG,UAAU,MAAM,KAAK,IAAI;AACxC,iBAAW,SAAS,SAAS;AACzB,aAAK,SAAS,IAAI,MAAM,YAAY,YAAY;AAAA;AAEpD,WAAK,gBAAgB;AAAA;AAEzB,SAAK,WAAW;AAChB,SAAK,WAAW,IAAI;AACpB,SAAK,YAAY;AAAA,MACb,WAAW,MAAM,KAAK;AAAA,MACtB,YAAY,MAAM,KAAK;AAAA,MACvB,WAAW,CAAC,MAAM,KAAK,gBAAgB;AAAA,MACvC,SAAS,CAAC,MAAM,KAAK,iBAAiB;AAAA,MACtC,YAAY,CAAC,MAAM,KAAK,YAAY;AAAA,MACpC,WAAW,CAAC,MAAM,KAAK,gBAAgB;AAAA,MACvC,UAAU,CAAC,MAAM,KAAK,UAAU;AAAA,MAChC,aAAa,CAAC,MAAM,KAAK,UAAU;AAAA,MACnC,eAAe,CAAC,MAAM,KAAK,eAAe;AAAA,MAC1C,kBAAkB,MAAM,KAAK;AAAA,MAC7B,aAAa,CAAC,MAAM,KAAK,mBAAmB;AAAA,MAC5C,gBAAgB,CAAC,MAAM,KAAK,mBAAmB;AAAA,MAC/C,QAAQ,MAAM;AACV,aAAK;AAAA;AAAA;AAAA;AAAA,EAIjB,eAAe;AACX,SAAK,iBAAiB;AAAA;AAAA,EAE1B,kBAAkB;AACd,SAAK,iBAAiB;AAAA;AAAA;;;AC3TvB,yBAAmB;AAAA,EACtB,cAAc;AACV,SAAK,QAAQ;AAAA;AAAA,SAEV,OAAO,QAAQ,MAAM;AACxB,UAAM,QAAQ,IAAI;AAClB,UAAM,KAAK;AACX,QAAI,SAAS,QAAW;AACpB,UAAI,SAAS,SAAS,QAAQ,OAAO;AACjC,cAAM,KAAK,EAAE,OAAO;AAAA,aAEnB;AACD,cAAM,KAAK;AAAA;AAAA;AAGnB,WAAO;AAAA;AAAA,EAEX,KAAK,MAAM;AACP,QAAI,8BAAM,WAAU,QAAW;AAC3B;AAAA;AAEJ,SAAK,QAAQ,KAAK;AAAA;AAAA;;;ACrBnB,uBAAiB;AAAA,EACpB,cAAc;AACV,SAAK,QAAQ,IAAI;AACjB,SAAK,MAAM,QAAQ;AACnB,SAAK,QAAQ;AACb,SAAK,WAAW;AAChB,SAAK,SAAS;AACd,SAAK,OAAO;AACZ,SAAK,UAAU;AAAA;AAAA,EAEnB,KAAK,MAAM;AACP,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,aAAa,OAAO,KAAK,OAAO,KAAK;AAAA;AAEtD,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,KAAK;AAAA;AAEtB,QAAI,KAAK,aAAa,QAAW;AAC7B,WAAK,WAAW,KAAK;AAAA;AAEzB,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA;AAEvB,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA;AAErB,QAAI,KAAK,YAAY,QAAW;AAC5B,WAAK,UAAU,KAAK;AAAA;AAAA;AAAA;;;AC9BzB,gCAA0B;AAAA,EAC7B,cAAc;AACV,SAAK,QAAQ,IAAI;AACjB,SAAK,MAAM,QAAQ;AACnB,SAAK,UAAU;AAAA;AAAA,EAEnB,KAAK,MAAM;AACP,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,aAAa,OAAO,KAAK,OAAO,KAAK;AAAA;AAEtD,QAAI,KAAK,YAAY,QAAW;AAC5B,WAAK,UAAU,KAAK;AAAA;AAAA;AAAA;;;ACbzB,2BAAqB;AAAA,EACxB,cAAc;AACV,SAAK,YAAY;AACjB,SAAK,QAAQ,IAAI;AACjB,SAAK,SAAS;AAAA;AAAA,EAElB,KAAK,MAAM;AACP,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,cAAc,QAAW;AAC9B,WAAK,YAAY,KAAK;AAAA;AAE1B,QAAI,KAAK,UAAU,QAAW;AAC1B,YAAM,QAAQ,KAAK;AACnB,YAAM,QAAS,SAAS,KAAK,SAAS,EAAE,OAAO,KAAK,UAAU,KAAK;AACnE,WAAK,MAAM,KAAK,MAAM,UAAU,SAAY,QAAQ,EAAE;AAAA;AAE1D,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA;AAAA;AAAA;;;ACrBxB,uBAAiB;AAAA,EACpB,cAAc;AACV,SAAK,SAAS;AACd,SAAK,SAAS;AAAA;AAAA,EAElB,KAAK,MAAM;AACP,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA;AAEvB,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA;AAAA;AAAA;;;ACbxB,uBAAiB;AAAA,EACpB,cAAc;AACV,SAAK,SAAS;AACd,SAAK,OAAO;AAAA;AAAA,EAEhB,KAAK,MAAM;AACP,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA;AAEvB,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA;AAAA;AAAA;;;ACZtB,qBAAe;AAAA,EAClB,cAAc;AACV,SAAK,YAAY;AACjB,SAAK,SAAS;AACd,SAAK,OAAO;AACZ,SAAK,OAAO;AAAA;AAAA,MAEZ,KAAK;AACL,WAAO,KAAK;AAAA;AAAA,MAEZ,GAAG,OAAO;AACV,SAAK,YAAY;AAAA;AAAA,MAEjB,YAAY;AACZ,WAAO,KAAK;AAAA;AAAA,MAEZ,UAAU,OAAO;AACjB,SAAK,MAAM;AAAA;AAAA,MAEX,MAAM;AACN,WAAO,0BAA0B,KAAK,WAAW,CAAC,MAAM,EAAE,QAAQ,KAAK;AAAA;AAAA,MAEvE,IAAI,OAAO;AACX,SAAK,YAAY,0BAA0B,OAAO,CAAC,MAAM,IAAI;AAAA;AAAA,EAEjE,KAAK,MAAM;AA1Bf;AA2BQ,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,UAAM,MAAM,iBAAK,QAAL,YAAY,KAAK,cAAjB,YAA8B,KAAK;AAC/C,QAAI,QAAQ,QAAW;AACnB,WAAK,MAAM;AAAA;AAEf,QAAI,KAAK,cAAc,QAAW;AAC9B,WAAK,YAAY,KAAK;AAAA;AAE1B,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA;AAEvB,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA;AAErB,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA;AAAA;AAAA;;;AC5CtB,qBAAe;AAAA,EAClB,cAAc;AACV,SAAK,SAAS;AACd,SAAK,QAAQ;AACb,SAAK,SAAS;AAAA;AAAA,EAElB,KAAK,MAAM;AACP,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA;AAEvB,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,KAAK;AAAA;AAEtB,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA;AAAA;AAAA;;;AChBxB,uBAAiB;AAAA,EACpB,cAAc;AACV,SAAK,SAAS;AACd,SAAK,OAAO;AACZ,SAAK,WAAW,IAAI;AAAA;AAAA,EAExB,KAAK,MAAM;AACP,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA;AAEvB,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA;AAErB,SAAK,SAAS,KAAK,KAAK;AAAA;AAAA;;;ACjBzB,wBAAkB;AAAA,EACrB,cAAc;AACV,SAAK,QAAQ;AACb,SAAK,SAAS;AAAA;AAAA,EAElB,KAAK,MAAM;AACP,QAAI,SAAS,QAAW;AACpB;AAAA;AAEJ,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,KAAK;AAAA;AAEtB,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA;AAAA;AAAA;;;ACRxB,mBAAa;AAAA,EAChB,cAAc;AACV,SAAK,UAAU,IAAI;AACnB,SAAK,QAAQ,IAAI;AACjB,SAAK,UAAU,IAAI;AACnB,SAAK,SAAS,IAAI;AAAA;AAAA,MAElB,UAAU;AACV,WAAO,KAAK;AAAA;AAAA,MAEZ,QAAQ,OAAO;AACf,SAAK,UAAU;AAAA;AAAA,MAEf,QAAQ;AACR,WAAO,KAAK;AAAA;AAAA,MAEZ,MAAM,OAAO;AACb,SAAK,QAAQ;AAAA;AAAA,MAEb,UAAU;AACV,WAAO,KAAK;AAAA;AAAA,MAEZ,QAAQ,OAAO;AACf,SAAK,UAAU;AAAA;AAAA,EAEnB,KAAK,MAAM;AA9Bf;AA+BQ,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,SAAK,QAAQ,KAAK,WAAK,YAAL,YAAgB,KAAK;AACvC,UAAM,QAAQ,WAAK,UAAL,YAAc,KAAK;AACjC,QAAI,UAAU,QAAW;AACrB,WAAK,QAAQ,0BAA0B,OAAO,CAAC,MAAM;AACjD,cAAM,MAAM,IAAI;AAChB,YAAI,KAAK;AACT,eAAO;AAAA;AAAA;AAGf,SAAK,QAAQ,KAAK,WAAK,YAAL,YAAgB,KAAK;AACvC,QAAI,UAAU,KAAK,SAAS;AACxB,WAAK,OAAO,SAAS,KAAK;AAAA,WAEzB;AACD,WAAK,OAAO,KAAK,KAAK;AAAA;AAAA;AAAA;;;AChD3B,kBAAY;AAAA,EACf,YAAY,QAAQ,WAAW;AAC3B,SAAK,UAAU;AACf,SAAK,aAAa;AAAA;AAAA,EAEtB,KAAK,MAAM;AACP,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,CAAC,KAAK,YAAY;AAClB;AAAA;AAEJ,UAAM,cAAc,KAAK,QAAQ,QAAQ,YAAY,IAAI,KAAK;AAC9D,QAAI,CAAC,aAAa;AACd;AAAA;AAEJ,eAAW,cAAc,aAAa;AAClC,UAAI,CAAC,WAAW,iBAAiB;AAC7B;AAAA;AAEJ,iBAAW,gBAAgB,MAAM;AAAA;AAAA;AAAA;;;AClBtC,0BAAoB;AAAA,EACvB,YAAY,QAAQ,WAAW;AAC3B,SAAK,YAAY;AACjB,SAAK,SAAS,IAAI;AAClB,SAAK,QAAQ,IAAI,MAAM,QAAQ;AAAA;AAAA,MAE/B,YAAY;AACZ,WAAO,KAAK;AAAA;AAAA,MAEZ,UAAU,OAAO;AACjB,SAAK,YAAY;AAAA;AAAA,EAErB,KAAK,MAAM;AAdf;AAeQ,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,UAAM,YAAY,WAAK,cAAL,YAAkB,KAAK;AACzC,QAAI,cAAc,QAAW;AACzB,WAAK,YAAY;AAAA;AAErB,SAAK,OAAO,KAAK,KAAK;AACtB,SAAK,MAAM,KAAK,KAAK;AAAA;AAAA;;;ACtBtB,2BAAqB;AAAA,EACxB,KAAK,MAAM;AAFf;AAGQ,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,UAAU;AACf,WAAK,WAAW;AAAA,QACZ,GAAG,WAAK,SAAS,MAAd,YAAmB;AAAA,QACtB,GAAG,WAAK,SAAS,MAAd,YAAmB;AAAA,QACtB,MAAM,WAAK,SAAS,SAAd,YAAsB;AAAA;AAAA;AAGpC,QAAI,KAAK,SAAS;AACd,WAAK,UAAU,WAAW,IAAI,KAAK;AAAA;AAAA;AAAA;;;ACbxC,uBAAiB;AAAA,EACpB,cAAc;AACV,SAAK,WAAW;AAChB,SAAK,UAAU;AACf,SAAK,OAAO;AAAA;AAAA,EAEhB,KAAK,MAAM;AACP,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,aAAa,QAAW;AAC7B,WAAK,WAAW,KAAK;AAAA;AAEzB,QAAI,KAAK,SAAS,QAAW;AACzB,UAAI,KAAK,SAAS,UAAU;AACxB,aAAK,OAAO;AAAA,aAEX;AACD,aAAK,OAAO;AAAA;AAAA;AAGpB,QAAI,KAAK,YAAY,QAAW;AAC5B,WAAK,UAAU,WAAW,IAAI,KAAK;AAAA;AAAA;AAAA;;;ACvBxC,yBAAmB;AAAA,EACtB,cAAc;AACV,SAAK,OAAO;AACZ,SAAK,OAAO;AACZ,SAAK,QAAQ;AAAA;AAAA,EAEjB,KAAK,MAAM;AACP,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA;AAErB,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA;AAErB,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,KAAK;AAAA;AAAA;AAAA;;;ACfvB,kBAAY;AAAA,EACf,cAAc;AACV,SAAK,OAAO;AACZ,SAAK,UAAU,IAAI;AAAA;AAAA,EAEvB,KAAK,MAAM;AACP,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA;AAErB,SAAK,QAAQ,KAAK,KAAK;AACvB,QAAI,KAAK,YAAY,QAAW;AAC5B,WAAK,UAAU,WAAW,IAAI,KAAK;AAAA;AAAA;AAAA;;;ACfxC,2BAAqB;AAAA,EACxB,cAAc;AACV,SAAK,QAAQ;AACb,SAAK,SAAS;AACd,SAAK,SAAS;AACd,SAAK,QAAQ;AACb,SAAK,QAAQ;AACb,SAAK,QAAQ;AACb,SAAK,OAAO;AAAA;AAAA,EAEhB,KAAK,MAAM;AACP,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,cAAc,KAAK;AAAA;AAEpC,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA;AAEvB,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,cAAc,KAAK;AAAA;AAErC,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,cAAc,KAAK;AAAA;AAEpC,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,cAAc,KAAK;AAAA;AAEpC,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,cAAc,KAAK;AAAA;AAEpC,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA;AAAA;AAAA;;;ACjCtB,yBAAmB;AAAA,EACtB,cAAc;AACV,SAAK,IAAI,IAAI;AACb,SAAK,IAAI,IAAI;AACb,SAAK,IAAI,IAAI;AAAA;AAAA,EAEjB,KAAK,MAAM;AACP,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,SAAK,EAAE,KAAK,KAAK;AACjB,SAAK,EAAE,KAAK,KAAK;AACjB,SAAK,EAAE,KAAK,KAAK;AAAA;AAAA;;;ACVlB,oCAA8B,aAAa;AAAA,EAC9C,cAAc;AACV;AACA,SAAK,YAAY,IAAI;AAAA;AAAA,SAElB,OAAO,QAAQ,MAAM;AACxB,UAAM,QAAQ,IAAI;AAClB,UAAM,KAAK;AACX,QAAI,SAAS,QAAW;AACpB,UAAI,SAAS,SAAS,QAAQ,OAAO;AACjC,cAAM,KAAK,EAAE,OAAO;AAAA,aAEnB;AACD,cAAM,KAAK;AAAA;AAAA;AAGnB,WAAO;AAAA;AAAA,EAEX,KAAK,MAAM;AACP,UAAM,KAAK;AACX,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,UAAM,iBAAiB,KAAK;AAC5B,QAAI,mBAAmB,QAAW;AAC9B,UAAI,eAAe,WAAW,QAAW;AACrC,aAAK,UAAU,EAAE,KAAK;AAAA,aAErB;AACD,aAAK,UAAU,KAAK,KAAK;AAAA;AAAA;AAAA;AAAA;;;AChClC,6BAAuB;AAAA,EAC1B,cAAc;AACV,SAAK,QAAQ;AAAA;AAAA,EAEjB,KAAK,MAAM;AACP,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,KAAK;AAAA;AAAA;AAAA;;;ACTvB,8BAAwB;AAAA,EAC3B,cAAc;AACV,SAAK,SAAS;AACd,SAAK,UAAU;AAAA;AAAA,EAEnB,KAAK,MAAM;AACP,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA;AAEvB,QAAI,KAAK,YAAY,QAAW;AAC5B,WAAK,UAAU,KAAK;AAAA;AAAA;AAAA;;;ACZzB,6BAAuB;AAAA,EAC1B,cAAc;AACV,SAAK,QAAQ;AACb,SAAK,SAAS;AACd,SAAK,QAAQ;AACb,SAAK,QAAQ;AACb,SAAK,QAAQ;AACb,SAAK,OAAO;AAAA;AAAA,EAEhB,KAAK,MAAM;AACP,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,cAAc,KAAK;AAAA;AAEpC,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA;AAEvB,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,cAAc,KAAK;AAAA;AAEpC,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,cAAc,KAAK;AAAA;AAEpC,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,cAAc,KAAK;AAAA;AAEpC,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA;AAAA;AAAA;AAItB,2CAAqC,iBAAiB;AAAA,EACzD,cAAc;AACV;AACA,SAAK,OAAO;AACZ,SAAK,aAAa;AAAA;AAAA,EAEtB,KAAK,MAAM;AACP,UAAM,KAAK;AACX,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,iBAAiB,QAAW;AACjC,WAAK,eAAe,KAAK;AAAA;AAE7B,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA;AAErB,QAAI,KAAK,eAAe,QAAW;AAC/B,WAAK,aAAa,KAAK;AAAA;AAAA;AAAA;;;ACpD5B,mBAAa;AAAA,EAChB,cAAc;AACV,SAAK,SAAS;AACd,SAAK,eAAe;AAAA;AAAA,EAExB,KAAK,MAAM;AACP,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA;AAEvB,QAAI,KAAK,iBAAiB,QAAW;AACjC,WAAK,eAAe,KAAK;AAAA;AAAA;AAAA;;;ACT9B,4BAAsB;AAAA,EACzB,cAAc;AACV,SAAK,SAAS,IAAI;AAClB,SAAK,QAAQ;AAAA;AAAA,EAEjB,KAAK,MAAM;AACP,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,UAAU,KAAK,SAAS;AACxB,WAAK,OAAO,SAAS,KAAK;AAAA,WAEzB;AACD,WAAK,OAAO,KAAK,KAAK;AAAA;AAE1B,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,cAAc,KAAK,OAAO,KAAK,OAAO,SAAS,KAAK,OAAO,eAAe;AAAA;AAAA;AAAA;;;ACnB5F,0CAAoC,gBAAgB;AAAA,EACvD,cAAc;AACV;AACA,SAAK,OAAO,eAAe;AAC3B,SAAK,QAAQ;AAAA;AAAA;;;ACJd,4BAAsB;AAAA,EACzB,cAAc;AACV,SAAK,aAAa,IAAI;AACtB,SAAK,WAAW,IAAI;AAAA;AAAA,EAExB,KAAK,MAAM;AACP,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,SAAK,WAAW,KAAK,KAAK;AAC1B,SAAK,SAAS,KAAK,KAAK;AAAA;AAAA;;;ACPzB,uBAAiB;AAAA,EACpB,cAAc;AACV,SAAK,SAAS,IAAI;AAClB,SAAK,SAAS,IAAI;AAClB,SAAK,SAAS;AACd,SAAK,WAAW;AAChB,SAAK,OAAO;AACZ,SAAK,UAAU,IAAI;AAAA;AAAA,EAEvB,KAAK,MAAM;AACP,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,SAAK,OAAO,KAAK,KAAK;AACtB,SAAK,OAAO,KAAK,KAAK;AACtB,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA;AAEvB,QAAI,KAAK,aAAa,QAAW;AAC7B,WAAK,WAAW,cAAc,KAAK;AAAA;AAEvC,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA;AAErB,SAAK,QAAQ,KAAK,KAAK;AAAA;AAAA;;;AC3BxB,sBAAgB;AAAA,EACnB,cAAc;AACV,SAAK,SAAS;AACd,SAAK,QAAQ;AAAA;AAAA,EAEjB,KAAK,MAAM;AACP,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,cAAc,KAAK;AAAA;AAErC,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,cAAc,KAAK;AAAA;AAAA;AAAA;;;ACbrC,wBAAkB;AAAA,EACrB,cAAc;AACV,SAAK,WAAW;AAChB,SAAK,SAAS;AACd,SAAK,SAAS;AAAA,MACV,GAAG;AAAA,MACH,GAAG;AAAA;AAAA;AAAA,MAGP,UAAU;AACV,WAAO,KAAK,OAAO;AAAA;AAAA,MAEnB,QAAQ,OAAO;AACf,SAAK,OAAO,IAAI;AAAA;AAAA,MAEhB,UAAU;AACV,WAAO,KAAK,OAAO;AAAA;AAAA,MAEnB,QAAQ,OAAO;AACf,SAAK,OAAO,IAAI;AAAA;AAAA,EAEpB,KAAK,MAAM;AAtBf;AAuBQ,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,aAAa,QAAW;AAC7B,WAAK,WAAW,cAAc,KAAK;AAAA;AAEvC,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA;AAEvB,UAAM,UAAU,iBAAK,WAAL,mBAAa,MAAb,YAAkB,KAAK;AACvC,QAAI,YAAY,QAAW;AACvB,WAAK,OAAO,IAAI;AAAA;AAEpB,UAAM,UAAU,iBAAK,WAAL,mBAAa,MAAb,YAAkB,KAAK;AACvC,QAAI,YAAY,QAAW;AACvB,WAAK,OAAO,IAAI;AAAA;AAAA;AAAA;;;ACtCrB,uBAAiB;AAAA,EACpB,cAAc;AACV,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,OAAO;AACZ,SAAK,SAAS;AAAA;AAAA,EAElB,KAAK,MAAM;AACP,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,MAAM,QAAW;AACtB,WAAK,IAAI,KAAK;AAAA;AAElB,QAAI,KAAK,MAAM,QAAW;AACtB,WAAK,IAAI,KAAK;AAAA;AAElB,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA;AAErB,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA;AAAA;AAAA;;;ACpBxB,wBAAkB;AAAA,EACrB,cAAc;AACV,SAAK,eAAe;AACpB,SAAK,SAAS;AACd,SAAK,UAAU;AACf,SAAK,WAAW;AAAA;AAAA,EAEpB,KAAK,MAAM;AACP,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,iBAAiB,QAAW;AACjC,WAAK,eAAe,cAAc,KAAK;AAAA;AAE3C,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA;AAEvB,QAAI,KAAK,YAAY,QAAW;AAC5B,WAAK,UAAU,KAAK;AAAA;AAExB,QAAI,KAAK,aAAa,QAAW;AAC7B,WAAK,WAAW,cAAc,KAAK;AAAA;AAAA;AAAA;;;ACpBxC,qBAAe;AAAA,EAClB,cAAc;AACV,SAAK,QAAQ;AACb,SAAK,QAAQ,IAAI;AACjB,SAAK,SAAS;AACd,SAAK,UAAU;AAAA;AAAA,EAEnB,KAAK,MAAM;AACP,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,KAAK;AAAA;AAEtB,SAAK,MAAM,KAAK,KAAK;AACrB,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA;AAEvB,SAAK,YAAY,KAAK;AACtB,QAAI,KAAK,SAAS;AACd,WAAK,UAAU,WAAW,KAAK,SAAS,KAAK;AAAA;AAAA;AAAA;;;ACrBlD,0BAAoB;AAAA,EACvB,KAAK,MAAM;AACP,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,aAAa,OAAO,KAAK,OAAO,KAAK;AAAA;AAEtD,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,KAAK;AAAA;AAAA;AAAA;;;ACTvB,sBAAgB;AAAA,EACnB,cAAc;AACV,SAAK,SAAS;AACd,SAAK,SAAS;AACd,SAAK,OAAO,IAAI;AAAA;AAAA,MAEhB,YAAY;AACZ,WAAO,KAAK,KAAK;AAAA;AAAA,MAEjB,UAAU,OAAO;AACjB,SAAK,KAAK,KAAK,EAAE,OAAO;AAAA;AAAA,EAE5B,KAAK,MAAM;AACP,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA;AAEvB,QAAI,KAAK,SAAS,UAAa,KAAK,cAAc,QAAW;AACzD,WAAK,KAAK,KAAK,KAAK,QAAQ,EAAE,OAAO,KAAK;AAAA;AAE9C,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA;AAAA;AAAA;;;ACxBxB,qBAAe;AAAA,EAClB,cAAc;AACV,SAAK,UAAU;AAAA;AAAA,EAEnB,KAAK,MAAM;AAJf;AAKQ,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,YAAY,QAAW;AAC5B,WAAK,UAAU,KAAK;AAAA;AAExB,SAAK,SAAS,WAAK,WAAL,YAAe,KAAK;AAClC,SAAK,OAAO,WAAK,SAAL,YAAa,KAAK;AAC9B,SAAK,QAAQ,WAAK,UAAL,YAAc,KAAK;AAChC,SAAK,MAAM,WAAK,QAAL,YAAY,KAAK;AAAA;AAAA;;;ACZ7B,iBAAW;AAAA,EACd,cAAc;AACV,SAAK,eAAe;AACpB,SAAK,SAAS;AAAA;AAAA,EAElB,KAAK,MAAM;AACP,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,iBAAiB,QAAW;AACjC,WAAK,eAAe,cAAc,KAAK;AAAA;AAE3C,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA;AAEvB,QAAI,KAAK,UAAU;AACf,WAAK,WAAW,WAAW,IAAI,KAAK;AAAA;AAAA;AAAA;;;ACRzC,iBAAW;AAAA,EACd,cAAc;AACV,SAAK,QAAQ,IAAI;AACjB,SAAK,UAAU,IAAI;AACnB,SAAK,SAAS,IAAI;AAClB,SAAK,QAAQ;AACb,SAAK,WAAW;AAChB,SAAK,YAAY;AACjB,SAAK,QAAQ;AACb,SAAK,SAAS;AACd,SAAK,UAAU,IAAI;AACnB,SAAK,OAAO,IAAI;AAChB,SAAK,WAAW,IAAI;AACpB,SAAK,SAAS;AACd,SAAK,OAAO;AACZ,SAAK,QAAQ;AACb,SAAK,OAAO,IAAI;AAChB,SAAK,WAAW;AAChB,SAAK,QAAQ,IAAI;AACjB,SAAK,UAAU;AACf,SAAK,OAAO;AAAA;AAAA,MAEZ,SAAS;AACT,WAAO,KAAK;AAAA;AAAA,MAEZ,OAAO,OAAO;AACd,SAAK,aAAa;AAAA;AAAA,MAElB,aAAa;AACb,WAAO;AAAA;AAAA,MAEP,WAAW,GAAG;AAAA;AAAA,MAEd,QAAQ;AACR,WAAO,KAAK;AAAA;AAAA,MAEZ,MAAM,OAAO;AACb,SAAK,OAAO;AAAA;AAAA,MAEZ,UAAU;AACV,WAAO,KAAK,SAAS;AAAA;AAAA,MAErB,QAAQ,OAAO;AACf,SAAK,SAAS,UAAU;AAAA;AAAA,MAExB,WAAW;AACX,WAAO,KAAK;AAAA;AAAA,MAEZ,SAAS,OAAO;AAChB,SAAK,UAAU;AAAA;AAAA,EAEnB,KAAK,MAAM;AA7Df;AA8DQ,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,SAAK,MAAM,KAAK,SAAS,KAAK,SAAS,EAAE,OAAO,KAAK,UAAU,KAAK;AACpE,SAAK,QAAQ,KAAK,KAAK;AACvB,SAAK,OAAO,KAAK,KAAK;AACtB,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,cAAc,KAAK;AAAA;AAEpC,QAAI,KAAK,cAAc,QAAW;AAC9B,WAAK,YAAY,KAAK;AAAA;AAE1B,QAAI,KAAK,aAAa,QAAW;AAC7B,WAAK,WAAW,SAAS,KAAK,YACxB;AAAA,QACE,YAAY,KAAK;AAAA,QACjB,UAAU,KAAK;AAAA,UAEjB,mBAAK,KAAK;AAAA;AAEpB,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,cAAc,KAAK;AAAA;AAEpC,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA;AAEvB,SAAK,QAAQ,KAAK,KAAK;AACvB,UAAM,WAAW,iBAAK,aAAL,YAAiB,KAAK,YAAtB,YAAiC,KAAK;AACvD,QAAI,aAAa,QAAW;AACxB,UAAI,SAAS,WAAW;AACpB,aAAK,SAAS,KAAK;AAAA,aAElB;AACD,aAAK,SAAS,KAAK;AAAA,UACf,SAAS;AAAA;AAAA;AAAA;AAIrB,SAAK,KAAK,KAAK,WAAK,SAAL,YAAa,KAAK;AACjC,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA;AAEvB,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA;AAErB,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,cAAc,KAAK;AAAA;AAEpC,SAAK,KAAK,KAAK,KAAK;AACpB,QAAI,KAAK,aAAa,QAAW;AAC7B,WAAK,WAAW,KAAK;AAAA;AAEzB,SAAK,MAAM,KAAK,KAAK;AACrB,QAAI,KAAK,YAAY,QAAW;AAC5B,WAAK,UAAU,KAAK;AAAA;AAExB,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA;AAAA;AAAA;;;ACtHtB,qCAA+B,uBAAuB;AAAA,EACzD,cAAc;AACV;AACA,SAAK,UAAU;AACf,SAAK,QAAQ;AAAA;AAAA,MAEb,cAAc;AACd,WAAO,KAAK;AAAA;AAAA,MAEZ,YAAY,OAAO;AACnB,SAAK,eAAe;AAAA;AAAA,EAExB,KAAK,MAAM;AACP,QAAI,8BAAM,iBAAgB,UAAa,KAAK,iBAAiB,QAAW;AACpE,WAAK,eAAe,KAAK;AAAA;AAE7B,UAAM,KAAK;AACX,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,YAAY,QAAW;AAC5B,WAAK,UAAU,KAAK;AAAA;AAAA;AAAA;;;ACnBzB,4BAAsB,gBAAgB;AAAA,EACzC,cAAc;AACV;AACA,SAAK,YAAY,IAAI;AACrB,SAAK,OAAO,eAAe;AAC3B,SAAK,QAAQ;AAAA;AAAA,MAEb,OAAO;AACP,WAAO,KAAK;AAAA;AAAA,MAEZ,KAAK,OAAO;AACZ,SAAK,YAAY;AAAA;AAAA,EAErB,KAAK,MAAM;AAhBf;AAiBQ,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,UAAM,KAAK;AACX,UAAM,YAAY,WAAK,cAAL,YAAkB,KAAK;AACzC,QAAI,cAAc,QAAW;AACzB,WAAK,UAAU,KAAK;AACpB,WAAK,QAAQ,cAAc,KAAK,OAAO,KAAK,UAAU,SAAS,KAAK,UAAU,eAAe;AAAA;AAAA;AAAA;;;ACxBlG,6BAAuB;AAAA,EAC1B,cAAc;AACV,SAAK,SAAS;AACd,SAAK,QAAQ;AACb,SAAK,SAAS;AAAA;AAAA,MAEd,OAAO;AACP,WAAO,KAAK;AAAA;AAAA,MAEZ,KAAK,OAAO;AACZ,SAAK,QAAQ;AAAA;AAAA,MAEb,SAAS;AACT,WAAO,KAAK;AAAA;AAAA,MAEZ,OAAO,OAAO;AACd,SAAK,SAAS;AAAA;AAAA,MAEd,aAAa;AACb,WAAO,KAAK;AAAA;AAAA,MAEZ,WAAW,OAAO;AAClB,SAAK,OAAO;AAAA;AAAA,EAEhB,KAAK,MAAM;AAxBf;AAyBQ,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA;AAEvB,UAAM,QAAQ,iBAAK,UAAL,YAAc,KAAK,SAAnB,YAA2B,KAAK;AAC9C,QAAI,UAAU,QAAW;AACrB,WAAK,QAAQ;AAAA;AAEjB,UAAM,SAAS,WAAK,WAAL,YAAe,KAAK;AACnC,QAAI,WAAW,QAAW;AACtB,WAAK,SAAS;AAAA;AAAA;AAAA;;;ACpCnB,4BAAsB;AAAA,EACzB,cAAc;AACV,SAAK,UAAU,IAAI;AACnB,SAAK,QAAQ;AACb,SAAK,QAAQ;AAAA;AAAA,MAEb,MAAM;AACN,WAAO,KAAK;AAAA;AAAA,MAEZ,IAAI,OAAO;AACX,SAAK,QAAQ;AAAA;AAAA,EAEjB,KAAK,MAAM;AAbf;AAcQ,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,SAAK,QAAQ,KAAK,KAAK;AACvB,UAAM,QAAQ,WAAK,UAAL,YAAc,KAAK;AACjC,QAAI,UAAU,QAAW;AACrB,WAAK,QAAQ;AAAA;AAEjB,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,KAAK;AAAA;AAAA;AAAA;;;ACtBvB,mBAAa;AAAA,EAChB,cAAc;AACV,SAAK,OAAO;AACZ,SAAK,QAAQ,IAAI;AACjB,SAAK,SAAS;AACd,SAAK,SAAS;AAAA,MACV,GAAG;AAAA,MACH,GAAG;AAAA;AAEP,SAAK,MAAM,QAAQ;AAAA;AAAA,EAEvB,KAAK,MAAM;AACP,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA;AAErB,SAAK,QAAQ,aAAa,OAAO,KAAK,OAAO,KAAK;AAClD,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA;AAEvB,QAAI,KAAK,WAAW,QAAW;AAC3B;AAAA;AAEJ,QAAI,KAAK,OAAO,MAAM,QAAW;AAC7B,WAAK,OAAO,IAAI,KAAK,OAAO;AAAA;AAEhC,QAAI,KAAK,OAAO,MAAM,QAAW;AAC7B,WAAK,OAAO,IAAI,KAAK,OAAO;AAAA;AAAA;AAAA;;;AC7BxC,IAAM,UAAU;AAAhB,IAA6B,aAAa;AAA1C,IAAkD,WAAW;AAA7D,IAAsE,cAAc;AAApF,IAA8F,aAAa;AAA3G,IAAsH,gBAAgB;AAC/H,kBAAY;AAAA,EACf,cAAc;AACV,SAAK,YAAY,CAAC,MAAM,SAAS,QAAQ,gBAAgB;AAJjE;AAKY,UAAI,CAAC,MAAM;AACP;AAAA;AAEJ,YAAM,cAAc,QAAQ,OAAO,aAAa,cAAc,KAAK,IAAI,sBAAsB,gBAAgB,QAAQ,KAAK,QAAQ,WAAW,qBAAqB,gBAAgB,QAAQ,KAAK,QAAQ;AACvM,UAAI,qBAAqB;AACrB,aAAK,QAAQ,WAAW;AAAA;AAE5B,UAAI,sBAAsB,aAAa;AACnC,aAAK,QAAQ,UAAU;AAAA;AAE3B,WAAK,QAAQ,WAAW,WAAW,WAAK,QAAQ,aAAb,YAAyB,YAAY;AACxE,UAAI,CAAC,KAAK,QAAQ,WAAW,aAAa;AACtC,aAAK,QAAQ,UAAU,WAAW,WAAK,QAAQ,YAAb,YAAwB,YAAY;AAAA;AAAA;AAG9E,SAAK,QAAQ;AACb,SAAK,OAAO;AACZ,SAAK,UAAU;AACf,SAAK,OAAO;AAAA;AAAA,MAEZ,YAAY;AAzBpB;AA0BQ,WAAQ,WAAK,QAAQ,aAAb,YAAyB,KAAK,QAAQ;AAAA;AAAA,MAE9C,UAAU,OAAO;AACjB,SAAK,QAAQ,cAAc,KAAK,QAAQ,WAAW;AAAA;AAAA,MAEnD,SAAS;AACT,WAAO,KAAK;AAAA;AAAA,MAEZ,OAAO,OAAO;AACd,SAAK,UAAU;AAAA;AAAA,MAEf,QAAQ;AArChB;AAsCQ,WAAQ,WAAK,QAAQ,cAAb,YAA0B,KAAK,QAAQ;AAAA;AAAA,MAE/C,MAAM,OAAO;AACb,SAAK,QAAQ,eAAe,KAAK,QAAQ,YAAY;AAAA;AAAA,MAErD,SAAS;AACT,WAAO,KAAK;AAAA;AAAA,MAEZ,OAAO,OAAO;AACd,SAAK,QAAQ;AAAA;AAAA,MAEb,UAAU;AAjDlB;AAkDQ,WAAQ,WAAK,QAAQ,gBAAb,YAA4B,KAAK,QAAQ;AAAA;AAAA,MAEjD,QAAQ,OAAO;AACf,SAAK,QAAQ,iBAAiB,KAAK,QAAQ,cAAc;AAAA;AAAA,MAEzD,SAAS;AACT,WAAO;AAAA;AAAA,MAEP,OAAO,QAAQ;AAAA;AAAA,EAEnB,KAAK,MAAM;AA5Df;AA6DQ,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,UAAM,UAAU,WAAK,YAAL,YAAgB,KAAK;AACrC,QAAI,YAAY,QAAW;AACvB,iBAAW,SAAS,SAAS;AACzB,cAAM,OAAO,QAAQ;AACrB,YAAI,MAAM;AACN,eAAK,QAAQ,SAAS,WAAW,WAAK,QAAQ,WAAb,YAAuB,IAAI;AAAA;AAAA;AAAA;AAIxE,SAAK,UAAU,KAAK,WAAW,SAAS,YAAY;AACpD,SAAK,UAAU,KAAK,SAAS,YAAY,eAAe;AACxD,SAAK,UAAU,WAAK,UAAL,YAAc,KAAK,QAAQ,UAAU,aAAa;AACjE,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,KAAK;AAAA;AAEtB,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA;AAErB,QAAI,KAAK,SAAS,QAAW;AACzB,WAAK,OAAO,KAAK;AAAA;AAAA;AAAA;;;AClFtB,kCAA4B,uBAAuB;AAAA,EACtD,cAAc;AACV;AACA,SAAK,UAAU;AACf,SAAK,QAAQ;AAAA;AAAA,MAEb,WAAW;AACX,WAAO,KAAK;AAAA;AAAA,MAEZ,SAAS,OAAO;AAChB,SAAK,eAAe;AAAA;AAAA,EAExB,KAAK,MAAM;AACP,QAAI,8BAAM,cAAa,UAAa,KAAK,iBAAiB,QAAW;AACjE,WAAK,eAAe,KAAK;AAAA;AAE7B,UAAM,KAAK;AACX,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,YAAY,QAAW;AAC5B,WAAK,UAAU,KAAK;AAAA;AAAA;AAAA;;;ACnBzB,yBAAmB,gBAAgB;AAAA,EACtC,cAAc;AACV;AACA,SAAK,YAAY,IAAI;AACrB,SAAK,OAAO,eAAe;AAC3B,SAAK,QAAQ;AAAA;AAAA,MAEb,OAAO;AACP,WAAO,KAAK;AAAA;AAAA,MAEZ,KAAK,OAAO;AACZ,SAAK,YAAY;AAAA;AAAA,EAErB,KAAK,MAAM;AAhBf;AAiBQ,UAAM,KAAK;AACX,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,UAAM,YAAY,WAAK,cAAL,YAAkB,KAAK;AACzC,QAAI,cAAc,QAAW;AACzB,WAAK,UAAU,KAAK;AACpB,WAAK,QAAQ,cAAc,KAAK,OAAO,KAAK,UAAU,SAAS,KAAK,UAAU,eAAe;AAAA;AAAA;AAAA;;;ACtBlG,mBAAa;AAAA,EAChB,cAAc;AACV,SAAK,QAAQ;AAAA;AAAA,EAEjB,KAAK,MAAM;AACP,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,gBAAgB,OAAO,KAAK,OAAO,KAAK;AAAA;AAEzD,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,cAAc,KAAK;AAAA;AAEpC,QAAI,KAAK,YAAY,QAAW;AAC5B,WAAK,UAAU,cAAc,KAAK;AAAA;AAAA;AAAA;;;AChBvC,2BAAqB,gBAAgB;AAAA,EACxC,cAAc;AACV;AACA,SAAK,cAAc;AACnB,SAAK,WAAW;AAChB,SAAK,eAAe;AAAA;AAAA,EAExB,KAAK,MAAM;AACP,UAAM,KAAK;AACX,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,gBAAgB,QAAW;AAChC,WAAK,cAAc,KAAK;AAAA;AAE5B,QAAI,KAAK,aAAa,QAAW;AAC7B,WAAK,WAAW,KAAK;AAAA;AAEzB,QAAI,KAAK,iBAAiB,QAAW;AACjC,WAAK,eAAe,KAAK;AAAA;AAAA;AAAA;;;ACR9B,6BAAuB;AAAA,EAC1B,YAAY,QAAQ,WAAW;AAC3B,SAAK,UAAU;AACf,SAAK,aAAa;AAClB,SAAK,SAAS,IAAI;AAClB,SAAK,aAAa,IAAI;AACtB,SAAK,QAAQ,IAAI;AACjB,SAAK,MAAM,QAAQ;AACnB,SAAK,SAAS;AACd,SAAK,OAAO,IAAI;AAChB,SAAK,SAAS,IAAI;AAClB,SAAK,UAAU,IAAI;AACnB,SAAK,mBAAmB;AACxB,SAAK,SAAS,IAAI;AAClB,SAAK,QAAQ,IAAI;AACjB,SAAK,OAAO,IAAI;AAChB,SAAK,SAAS,IAAI;AAClB,SAAK,SAAS,IAAI;AAAA;AAAA,EAEtB,KAAK,MAAM;AA/Bf;AAgCQ,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,SAAK,OAAO,KAAK,KAAK;AACtB,SAAK,MAAM,KAAK,gBAAgB,OAAO,KAAK,OAAO,KAAK;AACxD,QAAI,KAAK,WAAW,QAAW;AAC3B,iBAAW,SAAS,KAAK,QAAQ;AAC7B,cAAM,OAAO,KAAK,OAAO;AACzB,YAAI,SAAS,QAAW;AACpB,eAAK,OAAO,SAAS,WAAW,WAAK,OAAO,WAAZ,YAAsB,IAAI;AAAA;AAAA;AAAA;AAItE,SAAK,KAAK,KAAK,KAAK;AACpB,SAAK,OAAO,KAAK,KAAK;AACtB,SAAK,QAAQ,KAAK,KAAK;AACvB,QAAI,KAAK,qBAAqB,QAAW;AACrC,WAAK,mBAAmB,KAAK;AAAA;AAEjC,SAAK,MAAM,KAAK,KAAK;AACrB,SAAK,KAAK,KAAK,KAAK;AACpB,SAAK,OAAO,KAAK,KAAK;AACtB,SAAK,OAAO,KAAK,KAAK;AACtB,UAAM,aAAa,iBAAK,SAAL,mBAAW,eAAX,YAAyB,WAAK,SAAL,mBAAW;AACvD,QAAI,eAAe,QAAW;AAC1B,WAAK,WAAW,SAAS;AAAA;AAE7B,SAAK,WAAW,KAAK,KAAK;AAC1B,QAAI,KAAK,kBAAkB,QAAW;AAClC,WAAK,gBAAgB,WAAW,IAAI,KAAK;AAAA;AAE7C,UAAM,eAAe,WAAK,WAAL,YAAe,WAAK,UAAL,mBAAY;AAChD,QAAI,cAAc;AACd,WAAK,SAAS,0BAA0B,cAAc,CAAC,MAAM;AACzD,cAAM,MAAM,IAAI;AAChB,YAAI,KAAK;AACT,eAAO;AAAA;AAAA;AAGf,QAAI,KAAK,YAAY;AACjB,YAAM,WAAW,KAAK,QAAQ,QAAQ,SAAS,IAAI,KAAK;AACxD,UAAI,UAAU;AACV,mBAAW,WAAW,UAAU;AAC5B,cAAI,QAAQ,aAAa;AACrB,oBAAQ,YAAY,MAAM;AAAA;AAAA;AAAA;AAItC,YAAM,cAAc,KAAK,QAAQ,QAAQ,YAAY,IAAI,KAAK;AAC9D,UAAI,aAAa;AACb,mBAAW,cAAc,aAAa;AAClC,cAAI,WAAW,sBAAsB;AACjC,uBAAW,qBAAqB,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACnFvD,qBAAqB,YAAY,kBAAkB;AACtD,aAAW,iBAAiB,kBAAkB;AAC1C,YAAQ,KAAK;AAAA;AAAA;AAGd,8BAA8B,QAAQ,cAAc,kBAAkB;AACzE,QAAM,UAAU,IAAI,iBAAiB,QAAQ;AAC7C,cAAY,SAAS,GAAG;AACxB,SAAO;AAAA;;;ACCJ,oBAAc;AAAA,EACjB,YAAY,QAAQ,WAAW;AAC3B,SAAK,oBAAoB,CAAC,SAAS;AAZ3C;AAaY,aAAQ,WAAK,OAAO,KAAK,CAAC,UAAU,MAAM,QAAQ,SAAS,MAAM,QAAQ,SAAS,UAA1E,YACJ,KAAK,OAAO,KAAK,CAAC,UAAU,MAAM,QAAQ,SAAS,MAAM,QAAQ,SAAS;AAAA;AAElF,SAAK,gBAAgB,CAAC,WAAW;AAC7B,WAAK,KAAK,KAAK,QAAQ,QAAQ,UAAU;AAAA;AAE7C,SAAK,UAAU;AACf,SAAK,aAAa;AAClB,SAAK,WAAW;AAChB,SAAK,aAAa,IAAI;AACtB,SAAK,iBAAiB,IAAI;AAC1B,SAAK,gBAAgB;AACrB,SAAK,QAAQ;AACb,SAAK,aAAa,IAAI;AACtB,SAAK,eAAe;AACpB,SAAK,WAAW;AAChB,SAAK,WAAW;AAChB,SAAK,gBAAgB,IAAI,cAAc,QAAQ;AAC/C,SAAK,kBAAkB;AACvB,SAAK,YAAY,qBAAqB,KAAK,SAAS,KAAK;AACzD,SAAK,cAAc;AACnB,SAAK,yBAAyB;AAC9B,SAAK,aAAa;AAClB,SAAK,SAAS;AACd,SAAK,QAAQ;AACb,SAAK,SAAS;AACd,SAAK,UAAU;AAAA;AAAA,MAEf,iBAAiB;AACjB,WAAO,KAAK;AAAA;AAAA,MAEZ,eAAe,OAAO;AACtB,SAAK,WAAW,KAAK;AAAA;AAAA,MAErB,YAAY;AACZ,WAAO,KAAK;AAAA;AAAA,MAEZ,UAAU,OAAO;AACjB,SAAK,WAAW;AAAA;AAAA,MAEhB,gBAAgB;AAChB,WAAO,KAAK;AAAA;AAAA,MAEZ,cAAc,OAAO;AACrB,SAAK,eAAe;AAAA;AAAA,EAExB,KAAK,MAAM;AA3Df;AA4DQ,QAAI,CAAC,MAAM;AACP;AAAA;AAEJ,QAAI,KAAK,WAAW,QAAW;AAC3B,gCAA0B,KAAK,QAAQ,CAAC,WAAW,KAAK,cAAc;AAAA;AAE1E,QAAI,KAAK,aAAa,QAAW;AAC7B,WAAK,WAAW,KAAK;AAAA;AAEzB,QAAI,KAAK,UAAU,QAAW;AAC1B,WAAK,QAAQ,cAAc,KAAK;AAAA;AAEpC,UAAM,eAAe,WAAK,iBAAL,YAAqB,KAAK;AAC/C,QAAI,iBAAiB,QAAW;AAC5B,WAAK,eAAe;AAAA;AAExB,QAAI,KAAK,aAAa,QAAW;AAC7B,WAAK,WAAW,cAAc,KAAK;AAAA;AAEvC,UAAM,WAAW,WAAK,aAAL,YAAiB,KAAK;AACvC,QAAI,aAAa,QAAW;AACxB,WAAK,WAAW;AAAA;AAEpB,QAAI,KAAK,gBAAgB,QAAW;AAChC,WAAK,cAAc,KAAK;AAAA;AAE5B,QAAI,KAAK,2BAA2B,QAAW;AAC3C,WAAK,yBAAyB,KAAK;AAAA;AAEvC,QAAI,KAAK,YAAY,QAAW;AAC5B,WAAK,UAAU,KAAK;AAAA;AAExB,SAAK,WAAW,KAAK,KAAK;AAC1B,UAAM,aAAa,WAAK,eAAL,YAAmB,KAAK;AAC3C,QAAI,UAAU,aAAa;AACvB,WAAK,WAAW,SAAS;AAAA,WAExB;AACD,WAAK,WAAW,KAAK;AAAA;AAEzB,SAAK,eAAe,KAAK,KAAK;AAC9B,SAAK,cAAc,KAAK,KAAK;AAC7B,QAAI,KAAK,iBAAiB;AACtB,WAAK,kBAAkB,KAAK,gBAAgB,IAAI,CAAC,MAAM;AACnD,cAAM,MAAM,IAAI;AAChB,YAAI,KAAK;AACT,eAAO;AAAA;AAAA;AAGf,SAAK,UAAU,KAAK,KAAK;AACzB,SAAK,QAAQ,WAAW,KAAK,OAAO,KAAK;AACzC,SAAK,QAAQ,QAAQ,YAAY,MAAM;AACvC,QAAI,KAAK,WAAW,QAAW;AAC3B,WAAK,SAAS,KAAK;AAAA;AAEvB,UAAM,cAAc,KAAK,QAAQ,QAAQ,YAAY,IAAI,KAAK;AAC9D,QAAI,aAAa;AACb,iBAAW,cAAc,aAAa;AAClC,YAAI,WAAW,aAAa;AACxB,qBAAW,YAAY,MAAM;AAAA;AAAA;AAAA;AAIzC,QAAI,KAAK,eAAe,QAAW;AAC/B,iBAAW,cAAc,KAAK,YAAY;AACtC,cAAM,gBAAgB,IAAI;AAC1B,sBAAc,KAAK;AACnB,aAAK,WAAW,KAAK;AAAA;AAAA;AAG7B,SAAK,WAAW,KAAK,CAAC,GAAG,MAAM,EAAE,WAAW,EAAE;AAC9C,QAAI,KAAK,WAAW,QAAW;AAC3B,iBAAW,SAAS,KAAK,QAAQ;AAC7B,cAAM,gBAAgB,KAAK,OAAO,KAAK,CAAC,MAAM,EAAE,SAAS,MAAM;AAC/D,YAAI,CAAC,eAAe;AAChB,gBAAM,WAAW,IAAI;AACrB,mBAAS,KAAK;AACd,eAAK,OAAO,KAAK;AAAA,eAEhB;AACD,wBAAc,KAAK;AAAA;AAAA;AAAA;AAI/B,SAAK,cAAc,OAAO,WAAK,kBAAkB,YAAvB,mBAAgC;AAC1D,SAAK,cAAc,QAAQ,WAAK,kBAAkB,aAAvB,mBAAiC;AAAA;AAAA,EAEhE,cAAc,OAAO,SAAS,gBAAgB;AAC1C,SAAK,KAAK;AACV,UAAM,oBAAoB,KAAK,WAAW,KAAK,CAAC,MAAM,EAAE,SAAS,YAAY,SAAS,EAAE,WAAW,OAAO,aAAa,EAAE,WAAW,UAAU;AAC9I,SAAK,KAAK,uDAAmB;AAC7B,WAAO,uDAAmB;AAAA;AAAA,EAE9B,SAAS,MAAM;AACX,QAAI,MAAM;AACN,YAAM,cAAc,KAAK,OAAO,KAAK,CAAC,UAAU,MAAM,SAAS;AAC/D,UAAI,aAAa;AACb,aAAK,KAAK,YAAY;AAAA;AAAA,WAGzB;AACD,YAAM,aAAa,eAAe,iCAAiC,iBAAiB,cAAc,WAAW,SAAS,eAAe,KAAK,kBAAkB,iBAAiB,SAAS;AACtL,UAAI,cAAc;AACd,aAAK,KAAK,aAAa;AAAA;AAAA;AAAA;AAAA;;;ACnKhC,+BAAyB;AAAA,EAC5B,YAAY,QAAQ,WAAW;AAC3B,SAAK,YAAY;AACjB,SAAK,UAAU;AACf,SAAK,eAAe,OAAO,QAAQ,eAAe,KAAK,WAAW;AAClE,SAAK,uBAAuB;AAC5B,SAAK,uBAAuB;AAAA;AAAA,QAE1B,iBAAiB,OAAO;AAC1B,eAAW,cAAc,KAAK,sBAAsB;AAChD,iBAAW,eAAgB,MAAM,WAAW,SAAS;AAAA;AAAA;AAAA,EAG7D,gBAAgB,MAAM;AAClB,eAAW,cAAc,KAAK,sBAAsB;AAChD,iBAAW,mBAAmB,WAAW,gBAAgB;AAAA;AAAA;AAAA,EAGjE,OAAO;AACH,SAAK,uBAAuB;AAC5B,SAAK,uBAAuB;AAC5B,eAAW,cAAc,KAAK,cAAc;AACxC,cAAQ,WAAW;AAAA,aACV;AACD,eAAK,qBAAqB,KAAK;AAC/B;AAAA,aACC;AACD,eAAK,qBAAqB,KAAK;AAC/B;AAAA;AAER,iBAAW;AAAA;AAAA;AAAA,QAGb,kBAAkB,UAAU,OAAO;AACrC,eAAW,cAAc,KAAK,sBAAsB;AAChD,iBAAW,MAAM,UAAU;AAAA;AAE/B,eAAW,cAAc,KAAK,sBAAsB;AAChD,iBAAW,UAAU,aAAc,MAAM,WAAW,SAAS,UAAU;AAAA;AAAA;AAAA,QAGzE,MAAM,UAAU;AAClB,eAAW,cAAc,KAAK,sBAAsB;AAChD,iBAAW,eAAe,WAAW,MAAM;AAAA;AAE/C,eAAW,cAAc,KAAK,sBAAsB;AAChD,iBAAW,UAAU,aAAa,WAAW,MAAM;AAAA;AAAA;AAAA;;;ACrC/D,IAAM,aAAa,CAAC,SAAS;AACzB,MAAI,CAAC,UAAU,KAAK,SAAS,KAAK,aAAa;AAC3C;AAAA;AAEJ,QAAM,WAAW,KAAK,SAAS;AAC/B,MAAI,KAAK,QAAQ,KAAK,WAAW,UAAU;AACvC,SAAK,MAAM,CAAC,KAAK;AAAA,aAEZ,KAAK,QAAQ,UAAU;AAC5B,SAAK,MAAM,KAAK;AAAA;AAAA;AAGjB,qBAAe;AAAA,EAClB,YAAY,QAAQ,IAAI,WAAW,UAAU,iBAAiB,OAAO;AACjE,SAAK,YAAY;AACjB,SAAK,gBAAgB,CAAC,YAAW,WAAU,QAAQ,WAAW,MAAM;AAxB5E;AAyBY,iBAAW,CAAC,EAAE,WAAW,WAAU,SAAS;AACxC,cAAM,YAAY,OAAO,qBAAqB,SAAY,OAAO,iBAAiB,WAAU,QAAQ;AACpG,YAAI,WAAW;AACX,iBAAO,SAAS,OAAO,UAAU,GAAG,UAAU,GAAG;AAAA;AAAA;AAGzD,YAAM,aAAa,WAAU,OAAO,MAAM,gBAAgB,kCAAkC;AAAA,QACxF,MAAM;AAAA,QACN,UAAU;AAAA,UACV,MAAM,SAAS,OAAO,cAAc,GAAG,cAAc,GAAG,SAAS,SAAS,KAAK,aAAa,WAAW,KAAK,QAAQ,KAAK,UAAU,gBAAgB,CAAC,YAAY;AAChK,mBAAW;AAAA,UACP;AAAA,UACA,YAAY,CAAC,UAAU;AAAA,UACvB,OAAO,IAAI;AAAA,UACX,UAAU,WAAU,OAAO,KAAK;AAAA,UAChC,OAAO,CAAC,UAAW,IAAI,KAAK;AAAA,UAC5B;AAAA;AAAA,SAEL,cAAc,CAAC,YAAY;AAC1B,mBAAW;AAAA,UACP;AAAA,UACA,YAAY,CAAC,UAAU;AAAA,UACvB,OAAO,IAAI;AAAA,UACX,UAAU,WAAU,OAAO,KAAK;AAAA,UAChC,OAAO,CAAC,UAAW,IAAI,KAAK;AAAA,UAC5B;AAAA;AAAA;AAGR,oBAAc,eAAS,SAAT,YAAiB,SAAS;AACxC,oBAAc,eAAS,UAAT,YAAkB,SAAS;AACzC,kBAAY,eAAS,QAAT,YAAgB,SAAS;AACrC,kBAAY,eAAS,WAAT,YAAmB,SAAS;AACxC,UAAI,KAAK,cAAc,KAAK,WAAW;AACnC,eAAO,KAAK,cAAc,YAAW,QAAW,QAAQ,WAAW;AAAA;AAEvE,aAAO;AAAA;AAEX,SAAK,qBAAqB,MAAM;AAC5B,YAAM,eAAe,wBAAwB,KAAK,YAAY,MAAM,aAAa,QAAQ,cAAc,KAAK,QAAQ;AACpH,UAAI,YAAY,cAAc,YAAY,YAAY,cAAc,WAAW;AAC3E,eAAO;AAAA;AAEX,YAAM,MAAO,KAAK,KAAK,MAAO,cAAc,YAAY,MAAM,QAAQ,YAAa,KAAK,KAAK,MAAO,cAAc,YAAY,MAAM,SAAS,QAAQ;AAAA,QACjJ,MAAM,YAAY,MAAM;AAAA,QACxB,OAAO,YAAY,MAAM;AAAA;AAE7B,UAAI,CAAC,YAAY,UAAU;AACvB,YAAI,SAAS,cAAc,cAAc,MAAM,MAAM,MAAM;AAAA;AAE/D,UAAI,YAAY,UAAU,OAAO,YAAY,UAAU,UAAU;AAC7D,YAAI,UAAU;AAAA;AAElB,aAAO;AAAA;AAEX,SAAK,gBAAgB,CAAC,KAAK,WAAW,MAAM;AACxC,YAAM,oBAAoB,KAAK,QAAQ,YAAY,SAAS,KAAK;AACjE,UAAI,CAAC,kBAAkB,QAAQ;AAC3B,eAAO;AAAA;AAEX,YAAM,iBAAiB,kBAAkB;AACzC,UAAI,eAAe,QAAQ;AACvB,eAAO;AAAA;AAEX,YAAM,UAAU,eAAe;AAC/B,UAAI,WAAW,KAAK,WAAW,SAAS;AACpC,cAAM,IAAI,MAAM,GAAG;AAAA;AAEvB,aAAO,CAAC,CAAC,KAAK,UAAU,UAAU,KAAK,CAAC,aAAa,YAAY,KAAK,SAAS,YAAY,SAAS,SAAS;AAAA;AAEjH,SAAK,gBAAgB,CAAC,UAAU;AA9FxC;AA+FY,UAAI,CAAC,SAAS,CAAC,KAAK,QAAS,CAAC,KAAK,aAAa,CAAC,KAAK,KAAK,OAAQ;AAC/D,eAAO;AAAA;AAEX,YAAM,aAAa,KAAK,KAAK,cAAc,KAAK,KAAK,WAAW,IAAI,GAAG,UAAU,KAAK,KAAK,aAAa,KAAK,KAAK,IAAI,GAAG,SAAS,KAAK,MAAQ,aAAK,KAAK,UAAV,YAAmB,KAAK,WAAY,MAAK,KAAK,eAAe;AAC5M,UAAI,CAAC,QAAQ;AACT,eAAO;AAAA;AAEX,UAAI,KAAK,WAAW;AAChB,eAAO,KAAK;AAAA;AAEhB,UAAI,KAAK,KAAK,OAAO;AACjB,eAAO,SAAS,OAAO,KAAK,KAAK,MAAM,MAAM,KAAK,KAAK,MAAM;AAAA;AAEjE,aAAO;AAAA;AAEX,SAAK,gBAAgB,CAAC,cAAa;AA9G3C;AA+GY,YAAM,aAAY,KAAK,WAAW,cAAc,cAAc,KAAK,QAAQ,OAAO;AAClF,WAAK,WAAW,KAAK,cAAc,YAAW,WAAU,MAAM,aAAa,GAAG,WAAU;AACxF,WAAK,kBAAkB,KAAK,SAAS;AACrC,YAAM,aAAa,WAAU,OAAO;AACpC,WAAK,aAAa,iCACX,YAAY,KAAK,QAAQ,KAAK,QAAQ,cAD3B;AAAA,QAEd,QAAQ,WAAK,QAAQ,KAAK,OAAO,WAAzB,YAAmC;AAAA,QAC3C,MAAM,WAAK,QAAQ,KAAK,OAAO,SAAzB,YAAiC;AAAA;AAE3C,WAAK,YAAY,0BAA0B,KAAK,QAAQ,KAAK,WAAW,KAAK,UAAU,KAAK;AAC5F,cAAQ,KAAK,QAAQ,KAAK;AAAA,aACjB;AACD,eAAK,UAAU;AACf;AAAA,aACC;AACD,eAAK,UAAU;AACf;AAAA;AAER,WAAK,SAAS,OAAO;AAAA;AAEzB,SAAK,iBAAiB,CAAC,cAAc,qBAAqB;AACtD,YAAM,YAAY,aAAa,QAAQ,KAAK;AAC5C,UAAI,CAAC,WAAW;AACZ;AAAA;AAEJ,aAAO,WAAW;AAAA,QACd,OAAO,aAAa;AAAA,QACpB,MAAM,aAAa;AAAA,SACpB,yBAAyB,WAAW,KAAK,IAAI;AAAA;AAEpD,SAAK,UAAU;AACf,SAAK,KAAK,IAAI,UAAU,iBAAiB;AAAA;AAAA,EAE7C,QAAQ,UAAU;AACd,QAAI,KAAK,eAAe,KAAK,WAAW;AACpC;AAAA;AAEJ,SAAK,YAAY;AACjB,SAAK,OAAO,UAAU;AACtB,SAAK,KAAK,UAAU;AACpB,UAAM,YAAY,KAAK,WAAW,gBAAgB,KAAK;AACvD,eAAW,CAAC,EAAE,WAAW,UAAU,SAAS;AACxC,UAAI,OAAO,mBAAmB;AAC1B,eAAO,kBAAkB,MAAM;AAAA;AAAA;AAGvC,eAAW,WAAW,UAAU,UAAU,UAAU;AAChD,UAAI,QAAQ,mBAAmB;AAC3B,gBAAQ,kBAAkB,MAAM;AAAA;AAAA;AAGxC,QAAI,eAAe;AACf,oBAAc,MAAM;AAAA;AAAA;AAAA,EAG5B,KAAK,OAAO;AACR,UAAM,YAAY,KAAK;AACvB,eAAW,CAAC,EAAE,WAAW,UAAU,SAAS;AACxC,gBAAU,OAAO,mBAAmB,QAAQ,MAAM;AAAA;AAEtD,cAAU,OAAO,aAAa,MAAM;AAAA;AAAA,EAExC,eAAe;AA7KnB;AA8KQ,WAAO,KAAK,cAAc,WAAK,OAAO,UAAZ,YAAqB,oBAAoB,KAAK;AAAA;AAAA,EAE5E,UAAU;AACN,WAAQ,KAAK,eAAe,IAAI,KAAK,KAAM;AAAA;AAAA,EAE/C,cAAc;AACV,WAAO;AAAA,MACH,GAAG,KAAK,SAAS,IAAI,KAAK,OAAO;AAAA,MACjC,GAAG,KAAK,SAAS,IAAI,KAAK,OAAO;AAAA,MACjC,GAAG,KAAK,SAAS;AAAA;AAAA;AAAA,EAGzB,YAAY;AA1LhB;AA2LQ,WAAO,WAAK,OAAO,WAAZ,YAAsB,KAAK,KAAK;AAAA;AAAA,EAE3C,iBAAiB;AA7LrB;AA8LQ,WAAO,KAAK,cAAc,WAAK,OAAO,UAAZ,YAAqB,oBAAoB,KAAK;AAAA;AAAA,EAE5E,KAAK,IAAI,UAAU,iBAAiB,OAAO;AAhM/C;AAiMQ,UAAM,YAAY,KAAK,WAAW,SAAS,KAAK;AAChD,SAAK,KAAK;AACV,SAAK,QAAQ;AACb,SAAK,OAAO;AACZ,SAAK,eAAe;AACpB,SAAK,QAAQ;AACb,SAAK,eAAe;AACpB,SAAK,YAAY;AACjB,SAAK,cAAc;AACnB,SAAK,WAAW;AAChB,SAAK,YAAY;AACjB,SAAK,SAAS;AAAA,MACV,aAAa;AAAA;AAEjB,SAAK,UAAU;AACf,SAAK,qBAAqB;AAC1B,UAAM,UAAU,UAAU,OAAO,YAAY,cAAc,UAAU,eAAe,mBAAmB,qBAAqB,KAAK,SAAS,WAAW,YAAY,YAAY,YAAY,iBAAiB,MAAM,MAAM,EAAE,qBAAqB;AAC7O,SAAK,QAAQ,yBAAyB,WAAW,KAAK,IAAI;AAC1D,UAAM,eAAe,iBAAiB;AACtC,QAAI,mBAAmB,gBAAgB,SAAS,gBAAgB,MAAM,MAAM;AACxE,YAAM,oBAAoB,gBAAgB,MAAM,MAAM,QAAQ,yBAAyB,mBAAmB,KAAK,IAAI;AACnH,UAAI,OAAO;AACP,aAAK,QAAQ;AACb,qBAAa,KAAK,gBAAgB;AAAA;AAAA;AAG1C,SAAK,YAAY,KAAK,eAAe,cAAc;AACnD,qBAAiB,KAAK;AACtB,UAAM,YAAY,KAAK;AACvB,QAAI,WAAW;AACX,uBAAiB,KAAK,UAAU;AAAA;AAEpC,UAAM,gBAAgB,IAAI,cAAc,QAAQ;AAChD,kBAAc,KAAK,UAAU,cAAc;AAC3C,kBAAc,KAAK,iBAAiB;AACpC,SAAK,gBAAgB;AACrB,SAAK,OAAO,6CAAW,SAAX,YAAmB,iBAAiB,MAAM;AACtD,SAAK,QAAQ,6CAAW,UAAX,YAAoB,iBAAiB,MAAM;AACxD,SAAK,UAAU;AACf,UAAM,cAAc,KAAK,QAAQ,KAAK;AACtC,SAAK,YAAY,SAAS,YAAY,SAAS;AAC/C,QAAI,YAAY,WAAW;AACvB,WAAK,gBAAgB,KAAK,QAAQ,QAAQ,iBAAiB,YAAY;AACvE,UAAI,KAAK,iBAAiB,UAAU,QAAQ,YAAY,WAAW,KAAK,gBAAgB;AACpF,aAAK,cAAc,KAAK;AAAA;AAAA;AAGhC,cAAU,OAAO,aAAa;AAC9B,SAAK,OAAO,kCAAkC,KAAK,QAAQ,MAAM;AACjE,SAAK,SAAS;AAAA,MACV,SAAS;AAAA;AAEb,SAAK,OAAO;AAAA,MACR,SAAS;AAAA,MACT,QAAQ;AAAA;AAEZ,SAAK,cAAc;AACnB,SAAK,kBAAkB,KAAK;AAC5B,SAAK,WAAW,KAAK,gBAAgB;AACrC,SAAK,YAAY,IAAI,cAAc,KAAK,QAAQ,KAAK;AACrD,UAAM,YAAY,UAAU;AAC5B,cAAU,YAAY,UAAU,aAAa,UAAU,aAAa,KAAK,SAAS;AAClF,cAAU,aAAa,KAAK,SAAS;AACrC,SAAK,eAAe,KAAK,SAAS,IAAI,UAAU;AAChD,SAAK,QAAQ;AACb,QAAI,SAAS,UAAU,QAAQ,IAAI,KAAK;AACxC,QAAI,CAAC,QAAQ;AACT,eAAS,KAAK,QAAQ,QAAQ,eAAe,KAAK;AAClD,UAAI,QAAQ;AACR,kBAAU,QAAQ,IAAI,KAAK,OAAO;AAAA;AAAA;AAG1C,QAAI,UAAU,OAAO,WAAW;AAC5B,aAAO,UAAU;AAAA;AAErB,UAAM,gBAAgB,iCAAQ;AAC9B,QAAI,eAAe;AACf,WAAK,QAAQ,cAAc;AAAA;AAE/B,SAAK,WAAW;AAChB,SAAK,cAAc,gBAAgB,KAAK,QAAQ,OAAO;AACvD,eAAW,WAAW,UAAU,UAAU,UAAU;AAChD,cAAQ,KAAK;AAAA;AAEjB,eAAW,SAAS,UAAU,UAAU,QAAQ;AAC5C,YAAM,QAAQ,MAAM,KAAK;AAAA;AAE7B,QAAI,UAAU,OAAO,cAAc;AAC/B,aAAO,aAAa,WAAW;AAAA;AAEnC,eAAW,CAAC,EAAE,WAAW,UAAU,SAAS;AACxC,aAAO,mBAAmB,OAAO,gBAAgB;AAAA;AAAA;AAAA,EAGzD,iBAAiB;AACb,UAAM,SAAS,KAAK,aAAa,aAAa,KAAK,UAAU,OAAO,MAAM,WAAW,KAAK;AAC1F,WAAQ,SAAS,KAAK,CAAC,UACnB,SAAS,KAAK,CAAC,UACf,SAAS,KAAK,WAAW,SAAS,UAClC,SAAS,KAAK,WAAW,QAAQ;AAAA;AAAA,EAEzC,YAAY;AACR,WAAO,CAAC,KAAK,aAAa,CAAC,KAAK,YAAY,KAAK;AAAA;AAAA,EAErD,QAAQ;AACJ,eAAW,WAAW,KAAK,UAAU,UAAU,UAAU;AACrD,cAAQ,SAAS,QAAQ,MAAM;AAAA;AAAA;AAAA;;;AC3SpC,kBAAY;AAAA,EACf,YAAY,UAAU,UAAU;AAC5B,SAAK,WAAW;AAChB,SAAK,WAAW;AAAA;AAAA;;;ACHjB,kBAAY;AAAA,EACf,YAAY,GAAG,GAAG;AACd,SAAK,WAAW;AAAA,MACZ;AAAA,MACA;AAAA;AAAA;AAAA;;;ACFL,8BAAwB,MAAM;AAAA,EACjC,YAAY,GAAG,GAAG,OAAO,QAAQ;AAC7B,UAAM,GAAG;AACT,SAAK,OAAO;AAAA,MACR;AAAA,MACA;AAAA;AAAA;AAAA,EAGR,SAAS,OAAO;AACZ,UAAM,IAAI,KAAK,KAAK,OAAO,IAAI,KAAK,KAAK,QAAQ,MAAM,KAAK;AAC5D,WAAO,MAAM,KAAK,IAAI,KAAK,MAAM,KAAK,IAAI,IAAI,KAAK,MAAM,KAAK,IAAI,KAAK,MAAM,KAAK,IAAI,IAAI;AAAA;AAAA,EAE9F,WAAW,OAAO;AACd,QAAI,iBAAiB,QAAQ;AACzB,YAAM,WAAW;AAAA;AAErB,UAAM,IAAI,KAAK,KAAK,OAAO,IAAI,KAAK,KAAK,QAAQ,OAAO,KAAK,UAAU,OAAO,MAAM,UAAU,QAAQ,iBAAiB,YAAY,MAAM,OAAO,EAAE,OAAO,GAAG,QAAQ,KAAK,KAAK,MAAM,OAAO,KAAK,MAAM;AACtM,WAAO,KAAK,IAAI,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,KAAK,KAAK,IAAI,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK;AAAA;AAAA;;;AChBjG,2BAAqB,MAAM;AAAA,EAC9B,YAAY,GAAG,GAAG,QAAQ;AACtB,UAAM,GAAG;AACT,SAAK,SAAS;AAAA;AAAA,EAElB,SAAS,OAAO;AACZ,WAAO,YAAY,OAAO,KAAK,aAAa,KAAK;AAAA;AAAA,EAErD,WAAW,OAAO;AACd,UAAM,OAAO,KAAK,UAAU,OAAO,MAAM,UAAU,UAAU,EAAE,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,MAAM,IAAI,KAAK;AACtI,QAAI,iBAAiB,QAAQ;AACzB,YAAM,OAAO,IAAI,MAAM,QAAQ,OAAO,KAAK,KAAK,QAAQ,KAAK,IAAI,QAAQ,KAAK;AAC9E,aAAO,OAAO;AAAA,eAET,iBAAiB,WAAW;AACjC,YAAM,EAAE,OAAO,WAAW,MAAM,MAAM,QAAQ,KAAK,IAAI,QAAQ,IAAI,OAAO,KAAK,KAAK,IAAI,QAAQ,IAAI,QAAQ;AAC5G,aAAQ,SAAS,KAAK,KACjB,QAAQ,KAAK,IAAI,SAAS,QAAQ,KAAK,IAAI,UAC5C,QAAQ,KAAK,SACb,QAAQ,KAAK;AAAA;AAErB,WAAO;AAAA;AAAA;;;ACrBR,qBAAe;AAAA,EAClB,YAAY,WAAW,UAAU;AAC7B,SAAK,YAAY;AACjB,SAAK,WAAW;AAChB,SAAK,aAAa,MAAM;AACpB,YAAM,EAAE,GAAG,MAAM,KAAK,UAAU,UAAU,EAAE,OAAO,WAAW,KAAK,UAAU,MAAM,EAAE,wBAAa;AAClG,eAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,aAAK,MAAM,KAAK,IAAI,SAAS,IAAI,UAAU,IAAK,QAAQ,IAAM,KAAI,IAAI,IAAK,SAAS,IAAM,MAAK,MAAM,IAAI,KAAM,IAAI,IAAK,QAAQ,GAAG,SAAS,IAAI;AAAA;AAEpJ,WAAK,WAAW;AAAA;AAEpB,SAAK,UAAU;AACf,SAAK,WAAW;AAChB,SAAK,QAAQ;AAAA;AAAA,EAEjB,OAAO,OAAO;AACV,QAAI,CAAC,KAAK,UAAU,SAAS,MAAM,WAAW;AAC1C,aAAO;AAAA;AAEX,QAAI,KAAK,QAAQ,SAAS,KAAK,UAAU;AACrC,WAAK,QAAQ,KAAK;AAClB,aAAO;AAAA;AAEX,QAAI,CAAC,KAAK,UAAU;AAChB,WAAK;AAAA;AAET,WAAO,KAAK,MAAM,KAAK,CAAC,QAAQ,IAAI,OAAO;AAAA;AAAA,EAE/C,MAAM,OAAO,OAAO,OAAO;AACvB,UAAM,MAAM,SAAS;AACrB,QAAI,CAAC,MAAM,WAAW,KAAK,YAAY;AACnC,aAAO;AAAA;AAEX,eAAW,KAAK,KAAK,SAAS;AAC1B,UAAI,CAAC,MAAM,SAAS,EAAE,aAClB,YAAY,MAAM,UAAU,EAAE,YAAY,EAAE,SAAS,eACpD,EAAC,SAAS,MAAM,EAAE,YAAY;AAC/B;AAAA;AAEJ,UAAI,KAAK,EAAE;AAAA;AAEf,QAAI,KAAK,UAAU;AACf,iBAAW,OAAO,KAAK,OAAO;AAC1B,YAAI,MAAM,OAAO,OAAO;AAAA;AAAA;AAGhC,WAAO;AAAA;AAAA,EAEX,YAAY,UAAU,QAAQ,OAAO;AACjC,WAAO,KAAK,MAAM,IAAI,OAAO,SAAS,GAAG,SAAS,GAAG,SAAS;AAAA;AAAA,EAElE,eAAe,UAAU,MAAM,OAAO;AAClC,WAAO,KAAK,MAAM,IAAI,UAAU,SAAS,GAAG,SAAS,GAAG,KAAK,OAAO,KAAK,SAAS;AAAA;AAAA;;;AChD1F,IAAM,gBAAgB;AACtB,IAAM,iBAAiB,CAAC,eAAe;AACnC,SAAO,IAAI,UAAU,CAAC,WAAW,QAAQ,GAAG,CAAC,WAAW,SAAS,GAAI,WAAW,QAAQ,IAAK,GAAI,WAAW,SAAS,IAAK;AAAA;AAEvH,sBAAgB;AAAA,EACnB,YAAY,QAAQ,WAAW;AAC3B,SAAK,gBAAgB,CAAC,SAAS,aAAa,UAAU;AAb9D;AAcY,UAAI,CAAC,eAAQ,OAAO,YAAf,mBAAwB,SAAQ;AACjC;AAAA;AAEJ,YAAM,gBAAgB,QAAQ,QAAQ,gBAAgB,KAAK,mBAAmB,cAAc,UAAU,qBAAqB,cAAc,OAAO,oBAAoB,cAAc,QAAQ,IAAI,cAAc,QAAQ,oBAAoB,kBAAkB,KAAK,IAAI,oBAAoB,qBAAqB,gBAAgB,aAAa,iBAAiB,KAAK,IAAI,KAAK,OAAO,KAAK,OAAO,CAAC,MAAM,EAAE,UAAU,OAAO;AACrZ,WAAK,QAAQ,cAAc,QAAQ;AACnC,UAAI,iBAAiB,iBAAiB;AAClC,aAAK,KAAK,KAAK,IAAI,kBAAkB,iBAAiB,QAAW,SAAS;AAAA,iBAErE,iBAAiB,iBAAiB;AACvC,aAAK,eAAe,iBAAiB,iBAAiB;AAAA;AAAA;AAG9D,SAAK,qBAAqB,CAAC,mBAAmB;AAC1C,YAAM,aAAY,KAAK;AACvB,UAAI,CAAC,WAAU,OAAO,WAAW,CAAC,eAAe,QAAQ;AACrD,eAAO;AAAA;AAEX,YAAM,SAAS,WAAU,OAAO,SAAS,UAAU,WAAU,OAAO;AACpE,aAAQ,OAAO,QAAQ,OAAO,SAAW,gBAAe,SAAS,WAAW,IAAI,eAAe;AAAA;AAEnG,SAAK,gBAAgB,CAAC,UAAU,iBAAiB,OAAO,gBAAgB;AACpE,UAAI;AACA,YAAI,WAAW,KAAK,KAAK;AACzB,YAAI,UAAU;AACV,mBAAS,KAAK,KAAK,SAAS,UAAU,iBAAiB;AAAA,eAEtD;AACD,qBAAW,IAAI,SAAS,KAAK,SAAS,KAAK,SAAS,KAAK,YAAY,UAAU,iBAAiB;AAAA;AAEpG,YAAI,SAAS;AACb,YAAI,aAAa;AACb,mBAAS,YAAY;AAAA;AAEzB,YAAI,CAAC,QAAQ;AACT;AAAA;AAEJ,aAAK,OAAO,KAAK;AACjB,aAAK,QAAQ,KAAK;AAClB,aAAK;AACL,aAAK,QAAQ,cAAc,iBAAiB;AAAA,UACxC,WAAW,KAAK;AAAA,UAChB,MAAM;AAAA,YACF;AAAA;AAAA;AAGR,eAAO;AAAA,eAEJ,GAAP;AACI,oBAAY,QAAQ,GAAG,gCAAgC;AACvD;AAAA;AAAA;AAGR,SAAK,kBAAkB,CAAC,OAAO,OAAO,aAAa;AAC/C,YAAM,WAAW,KAAK,OAAO;AAC7B,UAAI,CAAC,YAAY,SAAS,UAAU,OAAO;AACvC,eAAO;AAAA;AAEX,eAAS,QAAQ;AACjB,YAAM,OAAO,KAAK,QAAQ,QAAQ;AAClC,WAAK,OAAO,OAAO,OAAO;AAC1B,WAAK,QAAQ,OAAO,MAAM;AAC1B,WAAK,KAAK,KAAK;AACf,WAAK,QAAQ,cAAc,mBAAmB;AAAA,QAC1C,WAAW,KAAK;AAAA,QAChB,MAAM;AAAA,UACF;AAAA;AAAA;AAGR,aAAO;AAAA;AAEX,SAAK,UAAU;AACf,SAAK,aAAa;AAClB,SAAK,UAAU;AACf,SAAK,SAAS;AACd,SAAK,UAAU;AACf,SAAK,OAAO;AACZ,SAAK,QAAQ;AACb,SAAK,YAAY;AACjB,SAAK,aAAa;AAClB,SAAK,sBAAsB,IAAI,mBAAmB,QAAQ;AAC1D,UAAM,aAAa,UAAU,OAAO;AACpC,SAAK,WAAW,IAAI,SAAS,eAAe,aAAa;AACzD,SAAK,SAAS,KAAK,QAAQ,QAAQ,UAAU,WAAW;AACxD,SAAK,WAAW,KAAK,QAAQ,QAAQ,YAAY,WAAW;AAAA;AAAA,MAE5D,QAAQ;AACR,WAAO,KAAK,OAAO;AAAA;AAAA,EAEvB,qBAAqB;AACjB,UAAM,YAAY,KAAK,YAAY,UAAU,UAAU;AACvD,eAAW,YAAY,QAAQ,iBAAiB;AAC5C,WAAK,YAAY,SAAS,WAAW,YAAY,SAAS,UAAU,UAAU,OAAO,QAAQ,QAAW,SAAS;AAAA;AAAA;AAAA,EAGzH,YAAY,UAAU,iBAAiB,OAAO,aAAa;AACvD,UAAM,YAAY,KAAK,YAAY,UAAU,UAAU,eAAe,QAAQ,QAAQ,UAAU,OAAO;AACvG,QAAI,QAAQ,GAAG;AACX,YAAM,gBAAgB,KAAK,QAAQ,IAAI;AACvC,UAAI,gBAAgB,GAAG;AACnB,aAAK,eAAe;AAAA;AAAA;AAG5B,WAAO,KAAK,cAAc,UAAU,iBAAiB,OAAO;AAAA;AAAA,EAEhE,QAAQ;AACJ,SAAK,SAAS;AACd,SAAK,UAAU;AAAA;AAAA,EAEnB,UAAU;AACN,SAAK,SAAS;AACd,SAAK,UAAU;AACf,SAAK,SAAS;AACd,SAAK,WAAW;AAAA;AAAA,QAEd,KAAK,OAAO;AACd,UAAM,YAAY,KAAK;AACvB,cAAU,OAAO;AACjB,UAAM,KAAK,OAAO;AAClB,eAAW,CAAC,EAAE,WAAW,UAAU,SAAS;AACxC,gBAAU,OAAO,WAAW,QAAQ;AAAA;AAExC,eAAW,KAAK,KAAK,SAAS;AAC1B,QAAE,KAAK;AAAA;AAAA;AAAA,EAGf,OAAO,WAAW;AACd,WAAO,KAAK,OAAO,OAAO;AAAA;AAAA,EAE9B,KAAK,WAAW;AACZ,WAAO,KAAK,OAAO,KAAK;AAAA;AAAA,EAE5B,gBAAgB,MAAM;AAClB,SAAK,oBAAoB,gBAAgB;AAAA;AAAA,EAE7C,OAAO;AApJX;AAqJQ,UAAM,YAAY,KAAK,YAAY,UAAU,UAAU;AACvD,SAAK,aAAa;AAClB,SAAK,YAAY;AACjB,QAAI,UAAU;AACd,SAAK,WAAW,KAAK,QAAQ,QAAQ,YAAY,WAAW;AAC5D,SAAK,oBAAoB;AACzB,eAAW,CAAC,EAAE,WAAW,UAAU,SAAS;AACxC,UAAI,OAAO,4BAA4B,QAAW;AAC9C,kBAAU,OAAO;AAAA;AAErB,UAAI,SAAS;AACT;AAAA;AAAA;AAGR,SAAK,oBAAoB;AACzB,eAAW,CAAC,EAAE,kBAAkB,UAAU,gBAAgB;AACtD,oBAAc,KAAK;AAAA;AAEvB,SAAK;AACL,QAAI,CAAC,SAAS;AACV,iBAAW,SAAS,QAAQ,UAAU,QAAQ;AAC1C,cAAM,eAAe,QAAQ,UAAU,OAAO;AAC9C,iBAAS,IAAI,KAAK,OAAO,IAAI,GAAG,IAAI,oBAAa,WAAb,mBAAqB,UAAS,IAAI,QAAQ,UAAU,OAAO,OAAO,KAAK,KAAK;AAC5G,eAAK,YAAY,QAAW,cAAc;AAAA;AAAA;AAGlD,eAAS,IAAI,KAAK,OAAO,IAAI,QAAQ,UAAU,OAAO,OAAO,KAAK;AAC9D,aAAK;AAAA;AAAA;AAAA;AAAA,EAIjB,KAAK,IAAI,OAAO,iBAAiB,OAAO;AACpC,SAAK,UAAU;AACf,aAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AACzB,WAAK,YAAY,+BAAO,UAAU,iBAAiB;AAAA;AAEvD,SAAK,UAAU;AAAA;AAAA,QAEb,SAAS;AACX,SAAK;AACL,SAAK;AACL,UAAM,KAAK,KAAK,EAAE,OAAO,GAAG,QAAQ;AAAA;AAAA,EAExC,OAAO,UAAU,OAAO,UAAU;AAC9B,SAAK,SAAS,KAAK,OAAO,QAAQ,WAAW,QAAW,OAAO;AAAA;AAAA,EAEnE,SAAS,OAAO,WAAW,GAAG,OAAO,UAAU;AAC3C,QAAI,QAAQ,KAAK,QAAQ,KAAK,OAAO;AACjC;AAAA;AAEJ,QAAI,UAAU;AACd,aAAS,IAAI,OAAO,UAAU,YAAY,IAAI,KAAK,OAAO,KAAK;AAC3D,WAAK,gBAAgB,KAAK,OAAO,aAAa;AAAA;AAAA;AAAA,EAGtD,eAAe,UAAU,OAAO;AAC5B,SAAK,SAAS,GAAG,UAAU;AAAA;AAAA,EAE/B,aAAa;AACT,UAAM,UAAU,KAAK,WAAW,eAAe,SAAS,QAAQ,UAAU;AAC1E,eAAW,SAAS,QAAQ;AACxB,WAAK,cAAc,OAAO,QAAQ,GAAG;AAAA;AAEzC,SAAK,cAAc,QAAQ,WAAW,QAAQ,gBAAgB;AAAA;AAAA,QAE5D,OAAO,OAAO;AAChB,UAAM,YAAY,KAAK,YAAY,oBAAoB,IAAI;AAC3D,SAAK,WAAW,IAAI,SAAS,eAAe,UAAU,OAAO,OAAO;AACpE,eAAW,CAAC,EAAE,kBAAkB,UAAU,gBAAgB;AACtD,oBAAc;AAAA;AAElB,eAAW,CAAC,EAAE,WAAW,UAAU,SAAS;AACxC,aAAO,UAAU,OAAO,OAAO;AAAA;AAEnC,eAAW,YAAY,KAAK,QAAQ;AAChC,YAAM,eAAe,UAAU,OAAO;AACtC,UAAI,gBAAgB,CAAC,SAAS,oBAAoB;AAC9C,iBAAS,SAAS,KAAK,aAAa;AACpC,iBAAS,SAAS,KAAK,aAAa;AACpC,iBAAS,gBAAgB,KAAK,aAAa;AAC3C,iBAAS,gBAAgB,KAAK,aAAa;AAAA;AAE/C,eAAS,qBAAqB;AAC9B,YAAM,KAAK,oBAAoB,MAAM;AACrC,iBAAW,CAAC,EAAE,WAAW,KAAK,WAAW,SAAS;AAC9C,YAAI,SAAS,WAAW;AACpB;AAAA;AAEJ,YAAI,OAAO,gBAAgB;AACvB,iBAAO,eAAe,UAAU;AAAA;AAAA;AAGxC,iBAAW,SAAS,KAAK,QAAQ;AAC7B,cAAM,UAAU,aAAa,MAAM,KAAK,UAAU;AAAA;AAEtD,UAAI,SAAS,WAAW;AACpB,0BAAkB,IAAI;AACtB;AAAA;AAEJ,WAAK,SAAS,OAAO,IAAI,MAAM,SAAS,eAAe;AAAA;AAE3D,QAAI,kBAAkB,MAAM;AACxB,YAAM,cAAc,CAAC,MAAM,CAAC,kBAAkB,IAAI;AAClD,WAAK,SAAS,KAAK,OAAO;AAC1B,WAAK,UAAU,KAAK,QAAQ,OAAO;AACnC,WAAK,KAAK,KAAK,GAAG;AAAA;AAEtB,UAAM,KAAK,oBAAoB,iBAAiB;AAChD,eAAW,YAAY,KAAK,QAAQ;AAChC,iBAAW,WAAW,KAAK,UAAU;AACjC,gBAAQ,OAAO,UAAU;AAAA;AAE7B,UAAI,CAAC,SAAS,aAAa,CAAC,SAAS,UAAU;AAC3C,cAAM,KAAK,oBAAoB,kBAAkB,UAAU;AAAA;AAAA;AAGnE,WAAO,UAAU,OAAO;AACxB,QAAI,KAAK,WAAW;AAChB,YAAM,SAAS,KAAK;AACpB,aAAO,KAAK,CAAC,GAAG,MAAM,EAAE,SAAS,IAAI,EAAE,SAAS,KAAK,EAAE,KAAK,EAAE;AAC9D,WAAK,aAAa,OAAO,OAAO,SAAS,GAAG,SAAS;AACrD,WAAK,YAAY;AAAA;AAAA;AAAA;;;AC5QtB,mBAAa;AAAA,EAChB,YAAY,WAAW;AACnB,SAAK,YAAY;AACjB,SAAK,aAAa;AAClB,SAAK,eAAe;AAAA;AAAA,EAExB,OAAO;AACH,UAAM,YAAY,KAAK,WAAW,UAAU,UAAU;AACtD,SAAK,aAAa,CAAC,QAAQ,gBAAgB,UAAU,IAAI,OAAO;AAChE,SAAK,eAAe;AACpB,UAAM,QAAQ,KAAK;AACnB,QAAI,UAAU,OAAO,SAAS;AAC1B,YAAM,UAAU,UAAU,OAAO;AACjC,gBAAU,OAAO,KAAK,QAAQ,QAAQ,cAAc;AACpD,gBAAU,OAAO,KAAK,SAAS,QAAQ,eAAe;AAAA;AAE1D,UAAM,YAAY,QAAQ,WAAW,cAAc,UAAU;AAC7D,SAAK,kBAAkB,cAAc,YAAY,QAAQ,YAAY;AACrE,SAAK,WAAW,cAAc,YAAY,QAAQ,YAAY;AAC9D,SAAK,qBAAqB,cAAc,UAAU,KAAK,UAAU,SAAS;AAAA;AAAA,EAE9E,aAAa,UAAU;AACnB,UAAM,UAAU,SAAS,SAAS,QAAQ,KAAK,YAAY,cAAc,QAAQ,MAAM,eAAe,YAAY,UAAU,QAAQ,SAAS;AAC7I,UAAM,kBAAkB,cAAc,YAAY,QAAQ,YAAY;AACtE,UAAM,YAAY,cAAc,YAAY,SAAS;AACrD,UAAM,YAAY,cAAc,YAAY,SAAS;AACrD,UAAM,qBAAqB,cAAc,QAAQ,KAAK,UAAU,SAAS;AACzE,UAAM,cAAc,MAAM;AAC1B,gBAAY,aAAa,aAAa,eAAe,SAAY,aAAa,aAAa,QAAQ;AACnG,gBAAY,WAAW,aAAa,aAAa,SAAY,aAAa,WAAW,QAAQ;AAC7F,UAAM,WAAW,cAAc,YAAY,QAAQ,YAAY;AAAA;AAAA;;;ACvBvE,oBAAoB,WAAW;AAC3B,SAAO,aAAa,CAAC,UAAU;AAAA;AAEnC,mBAAmB,OAAO,WAAW,IAAI,SAAS,OAAO;AACrD,SAAO;AAAA,IACH;AAAA,IACA,QAAQ,SAAS,KAAK,WAAY,KAAK,QAAS;AAAA;AAAA;AAGxD,8BAA8B,QAAQ,cAAc,kBAAkB;AAClE,QAAM,UAAU,IAAI,QAAQ,QAAQ;AACpC,cAAY,SAAS,GAAG;AACxB,SAAO;AAAA;AAEX,IAAM,0BAA0B;AAAhC,IAA2C,uBAAuB;AAAA,EAC9D,UAAU,CAAC,MAAM,EAAE;AAAA,EACnB,MAAM,MAAM;AAAA;AAAA,EAEZ,QAAQ,MAAM;AAAA;AAAA,EAEd,OAAO,MAAM;AAAA;AAAA;AAGV,sBAAgB;AAAA,EACnB,YAAY,QAAQ,IAAI,eAAe;AACnC,SAAK,KAAK;AACV,SAAK,uBAAuB,CAAC,YAAY;AACrC,UAAI,CAAC,WAAW,SAAS,CAAC,KAAK,cAAc,wBAAwB;AACjE;AAAA;AAEJ,iBAAW,SAAS,SAAS;AACzB,YAAI,MAAM,WAAW,KAAK,cAAc,SAAS;AAC7C;AAAA;AAEJ,QAAC,OAAM,iBAAiB,KAAK,OAAO,KAAK;AAAA;AAAA;AAGjD,SAAK,aAAa,OAAO,cAAc;AA9C/C;AA+CY,UAAI;AACA,YAAI,CAAC,KAAK,UACN,KAAK,kBAAkB,UACvB,YAAY,KAAK,gBAAgB,MAAO,KAAK,UAAU;AACvD,eAAK,KAAK;AACV;AAAA;AAEJ,mBAAK,kBAAL,iBAAK,gBAAkB;AACvB,cAAM,QAAQ,UAAU,YAAY,KAAK,eAAe,KAAK,UAAU,KAAK;AAC5E,aAAK,YAAY,MAAM;AACvB,aAAK,gBAAgB;AACrB,YAAI,MAAM,QAAQ,KAAM;AACpB,eAAK,KAAK;AACV;AAAA;AAEJ,cAAM,KAAK,UAAU,KAAK;AAC1B,YAAI,CAAC,KAAK,SAAS;AACf,eAAK;AACL;AAAA;AAEJ,YAAI,KAAK,sBAAsB;AAC3B,eAAK,KAAK;AAAA;AAAA,eAGX,GAAP;AACI,oBAAY,MAAM,GAAG,iCAAiC;AAAA;AAAA;AAG9D,SAAK,UAAU;AACf,SAAK,WAAW;AAChB,SAAK,SAAS;AACd,SAAK,SAAS;AACd,SAAK,YAAY;AACjB,SAAK,YAAY;AACjB,SAAK,cAAc;AACnB,SAAK,UAAU;AACf,SAAK,YAAY;AACjB,SAAK,UAAU;AACf,SAAK,gBAAgB;AACrB,SAAK,UAAU;AACf,SAAK,aAAa;AAClB,SAAK,iBAAiB;AACtB,SAAK,wBAAwB;AAC7B,SAAK,SAAS,IAAI,OAAO;AACzB,SAAK,SAAS,IAAI,OAAO;AACzB,SAAK,YAAY,IAAI,UAAU,KAAK,SAAS;AAC7C,SAAK,iBAAiB,IAAI;AAC1B,SAAK,gBAAgB;AAAA,MACjB,OAAO;AAAA,QACH,UAAU;AAAA,QACV,QAAQ;AAAA;AAAA;AAGhB,SAAK,UAAU,IAAI;AACnB,SAAK,UAAU,IAAI;AACnB,SAAK,WAAW,qBAAqB,KAAK,SAAS;AACnD,SAAK,gBAAgB,qBAAqB,KAAK,SAAS;AACxD,SAAK,kBAAkB,IAAI,eAAe;AAC1C,QAAI,OAAO,yBAAyB,eAAe,sBAAsB;AACrE,WAAK,wBAAwB,IAAI,qBAAqB,CAAC,YAAY,KAAK,qBAAqB;AAAA;AAEjG,SAAK,QAAQ,cAAc,kBAAkB,EAAE,WAAW;AAAA;AAAA,MAE1D,UAAU;AACV,WAAO,KAAK;AAAA;AAAA,MAEZ,gBAAgB;AAChB,WAAO,KAAK;AAAA;AAAA,EAEhB,gBAAgB,UAAU;AACtB,QAAI,CAAC,WAAW,OAAO;AACnB;AAAA;AAEJ,UAAM,KAAK,KAAK,cAAc;AAC9B,QAAI,CAAC,IAAI;AACL;AAAA;AAEJ,UAAM,sBAAsB,CAAC,GAAG,KAAK,WAAW;AAC5C,UAAI,CAAC,WAAW,OAAO;AACnB;AAAA;AAEJ,YAAM,UAAU,KAAK,OAAO,YAAY,YAAY;AAAA,QAChD,GAAG,IAAI,IAAI;AAAA,QACX,GAAG,IAAI,IAAI;AAAA,SACZ,YAAY,KAAK,UAAU,SAAS,YAAY,WAAW,SAAS;AACvE,eAAS,GAAG;AAAA;AAEhB,UAAM,eAAe,CAAC,MAAM;AACxB,UAAI,CAAC,WAAW,OAAO;AACnB;AAAA;AAEJ,YAAM,aAAa,GAAG,MAAM;AAAA,QACxB,GAAG,WAAW,WAAW,WAAW;AAAA,QACpC,GAAG,WAAW,WAAW,WAAW;AAAA;AAExC,0BAAoB,GAAG,KAAK;AAAA;AAEhC,UAAM,oBAAoB,MAAM;AAC5B,UAAI,CAAC,WAAW,OAAO;AACnB;AAAA;AAEJ,gBAAU;AACV,mBAAa;AAAA;AAEjB,UAAM,mBAAmB,MAAM;AAC3B,UAAI,CAAC,WAAW,OAAO;AACnB;AAAA;AAEJ,mBAAa;AAAA;AAEjB,UAAM,kBAAkB,CAAC,MAAM;AAC3B,UAAI,CAAC,WAAW,OAAO;AACnB;AAAA;AAEJ,UAAI,WAAW,CAAC,YAAY;AACxB,cAAM,aAAa;AACnB,YAAI,YAAY,WAAW,QAAQ,WAAW,QAAQ,SAAS;AAC/D,YAAI,CAAC,WAAW;AACZ,sBAAY,WAAW,eAAe,WAAW,eAAe,SAAS;AACzE,cAAI,CAAC,WAAW;AACZ;AAAA;AAAA;AAGR,cAAM,UAAU,KAAK,OAAO,SAAS,aAAa,UAAU,QAAQ,0BAA0B,QAAW,MAAM;AAAA,UAC3G,GAAG,UAAU,UAAW,cAAa,WAAW,OAAO;AAAA,UACvD,GAAG,UAAU,UAAW,cAAa,WAAW,MAAM;AAAA;AAE1D,4BAAoB,GAAG,KAAK,KAAK,IAAI,UAAU,SAAS,UAAU;AAAA;AAEtE,gBAAU;AACV,mBAAa;AAAA;AAEjB,UAAM,qBAAqB,MAAM;AAC7B,UAAI,CAAC,WAAW,OAAO;AACnB;AAAA;AAEJ,gBAAU;AACV,mBAAa;AAAA;AAEjB,QAAI,UAAU,OAAO,aAAa;AAClC,OAAG,iBAAiB,SAAS;AAC7B,OAAG,iBAAiB,cAAc;AAClC,OAAG,iBAAiB,aAAa;AACjC,OAAG,iBAAiB,YAAY;AAChC,OAAG,iBAAiB,eAAe;AAAA;AAAA,EAEvC,YAAY,OAAO;AACf,SAAK,aAAa;AAAA;AAAA,EAEtB,QAAQ,KAAK,WAAW,WAAW,OAAO;AACtC,QAAI,CAAC,WAAW,SAAU,CAAC,YAAY,KAAK,eAAe,IAAI,MAAO;AAClE,aAAO;AAAA;AAEX,SAAK,eAAe,IAAI,KAAK,gCAAa;AAC1C,WAAO;AAAA;AAAA,EAEX,QAAQ;AACJ,WAAO,CAAC,KAAK,aAAa,KAAK,aAAa,KAAK;AAAA;AAAA,EAErD,UAAU;AACN,QAAI,CAAC,WAAW,OAAO;AACnB;AAAA;AAEJ,SAAK;AACL,SAAK,UAAU;AACf,SAAK,OAAO;AACZ,eAAW,CAAC,EAAE,WAAW,KAAK,SAAS;AACnC,aAAO,WAAW,OAAO,QAAQ;AAAA;AAErC,eAAW,OAAO,KAAK,QAAQ,QAAQ;AACnC,WAAK,QAAQ,OAAO;AAAA;AAExB,SAAK,QAAQ,QAAQ,QAAQ;AAC7B,SAAK,YAAY;AACjB,UAAM,UAAU,KAAK,QAAQ,OAAO,MAAM,QAAQ,UAAU,CAAC,MAAM,MAAM;AACzE,QAAI,OAAO,GAAG;AACV,cAAQ,OAAO,KAAK;AAAA;AAExB,SAAK,QAAQ,cAAc,sBAAsB,EAAE,WAAW;AAAA;AAAA,EAElE,KAAK,OAAO;AACR,QAAI,CAAC,WAAW,OAAO;AACnB;AAAA;AAEJ,QAAI,cAAc;AAClB,SAAK,sBAAsB,sBAAsB,OAAO,cAAc;AAClE,UAAI,aAAa;AACb,aAAK,gBAAgB;AACrB,sBAAc;AAAA;AAElB,YAAM,KAAK,WAAW;AAAA;AAAA;AAAA,QAGxB,OAAO,MAAM,UAAU,IAAI;AAC7B,eAAW,CAAC,EAAE,WAAW,KAAK,SAAS;AACnC,UAAI,CAAC,OAAO,QAAQ;AAChB;AAAA;AAEJ,YAAM,MAAM,MAAM,OAAO,OAAO,MAAM;AACtC,UAAI,CAAC,IAAI,WAAW;AAChB;AAAA;AAEJ,aAAO,IAAI;AAAA;AAEf,gBAAY,MAAM,GAAG,yCAAyC;AAAA;AAAA,EAElE,qBAAqB;AACjB,WAAO,CAAC,KAAK,WAAW,CAAC,KAAK,cAAc,WAAW;AAAA;AAAA,EAE3D,gBAAgB,MAAM;AAClB,QAAI,CAAC,WAAW,OAAO;AACnB;AAAA;AAEJ,SAAK,UAAU,gBAAgB;AAC/B,eAAW,CAAC,EAAE,WAAW,KAAK,SAAS;AACnC,aAAO,mBAAmB,OAAO,gBAAgB;AAAA;AAAA;AAAA,QAGnD,OAAO;AACT,QAAI,CAAC,WAAW,OAAO;AACnB;AAAA;AAEJ,UAAM,SAAS,KAAK,QAAQ,QAAQ;AACpC,eAAW,QAAQ,QAAQ;AACvB,YAAM,SAAS,KAAK,QAAQ,QAAQ,eAAe;AACnD,UAAI,QAAQ;AACR,aAAK,QAAQ,IAAI,MAAM;AAAA;AAAA;AAG/B,SAAK,WAAW,qBAAqB,KAAK,SAAS,MAAM,KAAK,uBAAuB,KAAK;AAC1F,SAAK,gBAAgB,qBAAqB,KAAK,SAAS,MAAM,KAAK;AACnE,UAAM,mBAAmB,KAAK,QAAQ,QAAQ,oBAAoB;AAClE,eAAW,CAAC,IAAI,WAAW,kBAAkB;AACzC,WAAK,QAAQ,IAAI,IAAI;AAAA;AAEzB,SAAK,OAAO;AACZ,UAAM,KAAK,OAAO;AAClB,SAAK;AACL,SAAK,OAAO;AACZ,SAAK,OAAO;AACZ,SAAK,UAAU,KAAK,cAAc;AAClC,SAAK,YAAY,cAAc,KAAK,cAAc,YAAY;AAC9D,SAAK,SAAS,cAAc,KAAK,cAAc,SAAS;AACxD,SAAK,YAAY;AACjB,SAAK,WAAW,KAAK,cAAc,WAAW,IAAI,KAAK,cAAc,WAAW;AAChF,SAAK,SAAS,KAAK,cAAc;AACjC,eAAW,CAAC,EAAE,WAAW,KAAK,SAAS;AACnC,aAAO,QAAS,MAAM,OAAO,KAAK;AAAA;AAEtC,eAAW,CAAC,EAAE,WAAW,KAAK,SAAS;AACnC,aAAO,QAAS,MAAM,OAAO;AAAA;AAEjC,SAAK,QAAQ,cAAc,iBAAiB,EAAE,WAAW;AACzD,SAAK,UAAU;AACf,SAAK,UAAU;AACf,eAAW,CAAC,EAAE,WAAW,KAAK,SAAS;AACnC,aAAO,kBAAkB,OAAO;AAAA;AAEpC,SAAK,QAAQ,cAAc,kBAAkB,EAAE,WAAW;AAAA;AAAA,QAExD,UAAU,MAAM;AAClB,QAAI,CAAC,WAAW,OAAO;AACnB;AAAA;AAEJ,SAAK,gBAAgB;AACrB,UAAM,KAAK;AAAA;AAAA,EAEf,QAAQ;AACJ,QAAI,CAAC,WAAW,OAAO;AACnB;AAAA;AAEJ,QAAI,KAAK,wBAAwB,QAAW;AACxC,2BAAqB,KAAK;AAC1B,aAAO,KAAK;AAAA;AAEhB,QAAI,KAAK,SAAS;AACd;AAAA;AAEJ,eAAW,CAAC,EAAE,WAAW,KAAK,SAAS;AACnC,aAAO,SAAS,OAAO;AAAA;AAE3B,QAAI,CAAC,KAAK,YAAY;AAClB,WAAK,UAAU;AAAA;AAEnB,SAAK,QAAQ,cAAc,mBAAmB,EAAE,WAAW;AAAA;AAAA,EAE/D,KAAK,OAAO;AACR,QAAI,CAAC,WAAW,OAAO;AACnB;AAAA;AAEJ,UAAM,cAAc,KAAK,WAAW;AACpC,QAAI,KAAK,eAAe,CAAC,KAAK,cAAc,UAAU;AAClD,WAAK,cAAc;AACnB;AAAA;AAEJ,QAAI,KAAK,SAAS;AACd,WAAK,UAAU;AAAA;AAEnB,QAAI,aAAa;AACb,iBAAW,CAAC,EAAE,WAAW,KAAK,SAAS;AACnC,YAAI,OAAO,MAAM;AACb,iBAAO;AAAA;AAAA;AAAA;AAInB,SAAK,QAAQ,cAAc,iBAAiB,EAAE,WAAW;AACzD,SAAK,KAAK,eAAe;AAAA;AAAA,QAEvB,UAAU;AACZ,QAAI,CAAC,WAAW,OAAO;AACnB;AAAA;AAEJ,SAAK;AACL,WAAO,KAAK;AAAA;AAAA,QAEV,QAAQ;AACV,QAAI,CAAC,WAAW,OAAO;AACnB;AAAA;AAEJ,SAAK,wBAAwB;AAC7B,SAAK,WAAW,qBAAqB,KAAK,SAAS;AACnD,SAAK,gBAAgB,qBAAqB,KAAK,SAAS,MAAM,KAAK;AACnE,WAAO,KAAK;AAAA;AAAA,EAEhB,SAAS,kBAAkB,OAAM,QAAQ;AACrC,QAAI,CAAC,WAAW,OAAO;AACnB;AAAA;AAEJ,SAAK,QAAQ,kBAAkB,OAAM;AAAA;AAAA,EAEzC,QAAQ,iBAAiB,OAAM,QAAQ;AACnC,QAAI,CAAC,mBAAmB,CAAC,WAAW,OAAO;AACvC;AAAA;AAEJ,UAAM,gBAAgB,mBAAK;AAC3B,QAAI,WAAW,kBAAkB;AAC7B,oBAAc,WAAW;AACzB,UAAI,OAAM;AACN,sBAAc,OAAO;AAAA;AAEzB,UAAI,QAAQ;AACR,sBAAc,SAAS;AAAA;AAAA,WAG1B;AACD,YAAM,eAAe;AACrB,oBAAc,WAAW,gBAAgB,YAAY,aAAa;AAClE,oBAAc,OAAO,gBAAgB,QAAQ,aAAa;AAC1D,oBAAc,SAAS,gBAAgB,UAAU,aAAa;AAAA;AAElE,SAAK,QAAQ,yBAAyB,eAAe;AAAA;AAAA,QAEnD,QAAQ;AACV,QAAI,CAAC,WAAW,SAAS,KAAK,SAAS;AACnC;AAAA;AAEJ,UAAM,KAAK;AACX,SAAK,UAAU;AACf,UAAM,IAAI,QAAQ,CAAC,YAAY;AAC3B,WAAK,gBAAgB,WAAW,YAAY;AACxC,aAAK,gBAAgB;AACrB,YAAI,KAAK,cAAc,mBAAmB,eAAe,KAAK,uBAAuB;AACjF,eAAK,sBAAsB,QAAQ,KAAK,cAAc;AAAA;AAE1D,mBAAW,CAAC,EAAE,WAAW,KAAK,SAAS;AACnC,iBAAO,SAAU,MAAM,OAAO;AAAA;AAElC,aAAK,QAAQ,cAAc,oBAAoB,EAAE,WAAW;AAC5D,aAAK;AACL;AAAA,SACD,KAAK;AAAA;AAAA;AAAA,EAGhB,OAAO;AACH,QAAI,CAAC,WAAW,SAAS,CAAC,KAAK,SAAS;AACpC;AAAA;AAEJ,QAAI,KAAK,eAAe;AACpB,mBAAa,KAAK;AAClB,aAAO,KAAK;AAAA;AAEhB,SAAK,cAAc;AACnB,SAAK,UAAU;AACf,SAAK,gBAAgB;AACrB,SAAK;AACL,SAAK,UAAU;AACf,SAAK,OAAO;AACZ,QAAI,KAAK,cAAc,mBAAmB,eAAe,KAAK,uBAAuB;AACjF,WAAK,sBAAsB,UAAU,KAAK,cAAc;AAAA;AAE5D,eAAW,CAAC,EAAE,WAAW,KAAK,SAAS;AACnC,aAAO,QAAQ,OAAO;AAAA;AAE1B,eAAW,OAAO,KAAK,QAAQ,QAAQ;AACnC,WAAK,QAAQ,OAAO;AAAA;AAExB,SAAK,iBAAiB,KAAK;AAC3B,SAAK,QAAQ,cAAc,oBAAoB,EAAE,WAAW;AAAA;AAAA,EAEhE,sBAAsB;AAClB,SAAK,cAAc,aAAa;AAChC,UAAM,cAAc,KAAK,cAAc,cAAc,KAAK,OAAO,KAAK,OAAO,KAAK,OAAO,YAAY,KAAK;AAC1G,SAAK,cAAc,SAAS,KAAK;AACjC,QAAI,KAAK,uBAAuB,aAAa;AACzC,aAAO;AAAA;AAEX,SAAK,qBAAqB;AAC1B,WAAO;AAAA;AAAA;;;ACtcR,4BAAsB;AAAA,EACzB,cAAc;AACV,SAAK,aAAa,IAAI;AAAA;AAAA,EAE1B,iBAAiB,MAAM,UAAU;AAC7B,SAAK,oBAAoB,MAAM;AAC/B,QAAI,MAAM,KAAK,WAAW,IAAI;AAC9B,QAAI,CAAC,KAAK;AACN,YAAM;AACN,WAAK,WAAW,IAAI,MAAM;AAAA;AAE9B,QAAI,KAAK;AAAA;AAAA,EAEb,cAAc,MAAM,MAAM;AACtB,UAAM,YAAY,KAAK,WAAW,IAAI;AACtC,iBAAa,UAAU,QAAQ,CAAC,YAAY,QAAQ;AAAA;AAAA,EAExD,iBAAiB,MAAM;AACnB,WAAO,CAAC,CAAC,KAAK,WAAW,IAAI;AAAA;AAAA,EAEjC,wBAAwB,MAAM;AAC1B,QAAI,CAAC,MAAM;AACP,WAAK,aAAa,IAAI;AAAA,WAErB;AACD,WAAK,WAAW,OAAO;AAAA;AAAA;AAAA,EAG/B,oBAAoB,MAAM,UAAU;AAChC,UAAM,MAAM,KAAK,WAAW,IAAI;AAChC,QAAI,CAAC,KAAK;AACN;AAAA;AAEJ,UAAM,SAAS,IAAI,QAAQ,MAAM,IAAI,QAAQ;AAC7C,QAAI,MAAM,GAAG;AACT;AAAA;AAEJ,QAAI,WAAW,GAAG;AACd,WAAK,WAAW,OAAO;AAAA,WAEtB;AACD,UAAI,OAAO,KAAK;AAAA;AAAA;AAAA;;;ACxC5B,iCAAiC,WAAW,KAAK,cAAc,QAAQ,OAAO;AAC1E,MAAI,MAAM,IAAI,IAAI;AAClB,MAAI,CAAC,OAAO,OAAO;AACf,UAAM,CAAC,GAAG,aAAa,UAAU,IAAI,CAAC,MAAM,EAAE;AAC9C,QAAI,IAAI,WAAW;AAAA;AAEvB,SAAO;AAAA;AAEJ,oBAAc;AAAA,EACjB,YAAY,QAAQ;AAChB,SAAK,UAAU;AACf,SAAK,UAAU;AACf,SAAK,gBAAgB;AAAA,MACjB,aAAa,IAAI;AAAA,MACjB,QAAQ,IAAI;AAAA,MACZ,UAAU,IAAI;AAAA;AAElB,SAAK,cAAc,IAAI;AACvB,SAAK,SAAS,IAAI;AAClB,SAAK,WAAW,IAAI;AACpB,SAAK,UAAU,IAAI;AACnB,SAAK,UAAU,IAAI;AACnB,SAAK,iBAAiB,IAAI;AAAA;AAAA,EAE9B,cAAc,MAAM,gBAAgB;AAChC,SAAK,cAAc,YAAY,IAAI,MAAM;AAAA;AAAA,EAE7C,iBAAiB,MAAM,WAAW;AAC9B,SAAK,cAAc,OAAO,IAAI,MAAM;AAAA;AAAA,EAExC,mBAAmB,MAAM,aAAa;AAClC,SAAK,cAAc,SAAS,IAAI,MAAM;AAAA;AAAA,EAE1C,iBAAiB,MAAM,eAAe;AAClC,KAAC,KAAK,iBAAiB,SAAS,KAAK,eAAe,IAAI,MAAM;AAAA;AAAA,EAElE,UAAU,QAAQ;AACd,KAAC,KAAK,UAAU,OAAO,OAAO,KAAK,QAAQ,KAAK;AAAA;AAAA,EAEpD,UAAU,WAAW,SAAS,WAAW,OAAO;AAC5C,IAAC,aAAY,CAAC,KAAK,UAAU,eAAe,KAAK,QAAQ,IAAI,WAAW;AAAA;AAAA,EAE5E,eAAe,OAAO,QAAQ;AAC1B,8BAA0B,OAAO,CAAC,SAAS;AACvC,OAAC,KAAK,eAAe,SAAS,KAAK,QAAQ,IAAI,MAAM;AAAA;AAAA;AAAA,EAG7D,QAAQ,WAAW;AACf,SAAK,SAAS,OAAO;AACrB,SAAK,OAAO,OAAO;AACnB,SAAK,YAAY,OAAO;AAAA;AAAA,EAE5B,oBAAoB,WAAW;AAC3B,UAAM,MAAM,IAAI;AAChB,eAAW,UAAU,KAAK,SAAS;AAC/B,aAAO,YAAY,UAAU,kBAAkB,IAAI,IAAI,OAAO,IAAI,OAAO,UAAU;AAAA;AAEvF,WAAO;AAAA;AAAA,EAEX,eAAe,WAAW,QAAQ,OAAO;AACrC,WAAO,wBAAwB,WAAW,KAAK,aAAa,KAAK,cAAc,aAAa;AAAA;AAAA,EAEhG,UAAU,WAAW,QAAQ,OAAO;AAChC,WAAO,wBAAwB,WAAW,KAAK,QAAQ,KAAK,cAAc,QAAQ;AAAA;AAAA,EAEtF,iBAAiB,MAAM;AACnB,WAAO,KAAK,eAAe,IAAI;AAAA;AAAA,EAEnC,UAAU,QAAQ;AACd,WAAO,KAAK,QAAQ,KAAK,CAAC,MAAM,EAAE,OAAO;AAAA;AAAA,EAE7C,UAAU,QAAQ;AACd,WAAO,KAAK,QAAQ,IAAI;AAAA;AAAA,EAE5B,eAAe,MAAM;AACjB,WAAO,KAAK,QAAQ,IAAI;AAAA;AAAA,EAE5B,qBAAqB;AACjB,WAAO,KAAK,QAAQ;AAAA;AAAA,EAExB,YAAY,WAAW,QAAQ,OAAO;AAClC,WAAO,wBAAwB,WAAW,KAAK,UAAU,KAAK,cAAc,UAAU;AAAA;AAAA,EAE1F,YAAY,SAAS,eAAe;AAChC,eAAW,UAAU,KAAK,SAAS;AAC/B,aAAO,YAAY,SAAS;AAAA;AAAA;AAAA,EAGpC,qBAAqB,WAAW,YAAY,eAAe;AACvD,UAAM,WAAW,KAAK,SAAS,IAAI;AACnC,QAAI,CAAC,UAAU;AACX;AAAA;AAEJ,eAAW,WAAW,UAAU;AAC5B,cAAQ,eAAe,QAAQ,YAAY,SAAS,GAAG;AAAA;AAAA;AAAA;;;ACzFnE,8BAA8B,MAAM;AAChC,QAAM,MAAM,yBAAyB,KAAK,KAAK,KAAK;AACpD,MAAI,CAAC,KAAK;AACN,WAAO,KAAK;AAAA;AAEhB,QAAM,WAAW,MAAM,MAAM;AAC7B,MAAI,SAAS,IAAI;AACb,WAAO,SAAS;AAAA;AAEpB,cAAY,MAAM,GAAG,eAAe,SAAS;AAC7C,SAAO,KAAK;AAAA;AAEhB,uBAAuB,QAAQ;AAC3B,SAAO,CAAC,OAAO,MAAM,CAAC,OAAO,WAAW,CAAC,OAAO,OAAO,CAAC,OAAO;AAAA;AAEnE,kBAAkB,KAAK;AACnB,SAAO,CAAC,cAAc;AAAA;AAEnB,mBAAa;AAAA,EAChB,cAAc;AACV,SAAK,WAAW,IAAI;AACpB,SAAK,YAAY;AACjB,SAAK,mBAAmB,IAAI;AAC5B,SAAK,eAAe;AACpB,SAAK,UAAU,IAAI,QAAQ;AAAA;AAAA,MAE3B,UAAU;AACV,UAAM,MAAM;AACZ,eAAW,CAAC,MAAM,WAAW,KAAK,UAAU;AACxC,UAAI,QAAQ;AAAA;AAEhB,WAAO;AAAA;AAAA,MAEP,UAAU;AACV,WAAO;AAAA;AAAA,EAEX,UAAU,cAAc,QAAQ;AA1CpC;AA2CQ,QAAI,SAAS,eAAe;AACxB,UAAI,QAAQ;AACR,eAAO,OAAO;AACd,aAAK,SAAS,IAAI,cAAc;AAAA;AAAA,WAGnC;AACD,WAAK,SAAS,IAAI,mBAAa,SAAb,YAAqB,WAAW;AAAA;AAAA;AAAA,EAG1D,iBAAiB,MAAM,UAAU;AAC7B,SAAK,iBAAiB,iBAAiB,MAAM;AAAA;AAAA,QAE3C,cAAc,MAAM,uBAAuB,UAAU,MAAM;AAC7D,SAAK,QAAQ,cAAc,MAAM;AACjC,UAAM,KAAK,QAAQ;AAAA;AAAA,QAEjB,SAAS,MAAM,kBAAkB,UAAU,MAAM;AACnD,SAAK,QAAQ,iBAAiB,MAAM;AACpC,UAAM,KAAK,QAAQ;AAAA;AAAA,QAEjB,mBAAmB,MAAM,oBAAoB,UAAU,MAAM;AAC/D,SAAK,QAAQ,mBAAmB,MAAM;AACtC,UAAM,KAAK,QAAQ;AAAA;AAAA,QAEjB,iBAAiB,MAAM,WAAW,UAAU,MAAM;AACpD,SAAK,QAAQ,iBAAiB,MAAM;AACpC,UAAM,KAAK,QAAQ;AAAA;AAAA,QAEjB,UAAU,QAAQ,UAAU,MAAM;AACpC,SAAK,QAAQ,UAAU;AACvB,UAAM,KAAK,QAAQ;AAAA;AAAA,QAEjB,UAAU,QAAQ,SAAS,WAAW,OAAO,UAAU,MAAM;AAC/D,SAAK,QAAQ,UAAU,QAAQ,SAAS;AACxC,UAAM,KAAK,QAAQ;AAAA;AAAA,QAEjB,SAAS,OAAO,QAAQ,eAAe,sBAAsB,kBAAkB,UAAU,MAAM;AACjG,QAAI;AACJ,QAAI,cAAc,SAAS,UAAU,iBAAiB;AACtD,QAAI,UAAU,gBAAgB;AAC1B,oBAAc;AACd,iBAAW;AAAA,WAEV;AACD,iBAAW;AAAA;AAEf,QAAI,UAAU,uBAAuB;AACjC,oBAAc;AACd,wBAAkB;AAAA,WAEjB;AACD,wBAAkB;AAAA;AAEtB,QAAI,UAAU,mBAAmB;AAC7B,oBAAc;AACd,oBAAc;AAAA,WAEb;AACD,oBAAc;AAAA;AAElB,QAAI,WAAW,SAAS;AACpB,qBAAe;AAAA,QACX,aAAa;AAAA,QACb,SAAS;AAAA,QACT,MAAM;AAAA,QACN,MAAM;AAAA;AAAA,WAGT;AACD,qBAAe;AAAA;AAEnB,SAAK,QAAQ,eAAe,OAAO;AACnC,UAAM,KAAK,QAAQ;AAAA;AAAA,EAEvB,cAAc,MAAM,MAAM;AACtB,SAAK,iBAAiB,cAAc,MAAM;AAAA;AAAA,EAE9C,MAAM;AACF,WAAO,KAAK;AAAA;AAAA,EAEhB,QAAQ,OAAO;AACX,UAAM,MAAM,KAAK,OAAO,OAAO,IAAI;AACnC,QAAI,CAAC,QAAQ,KAAK,WAAW;AACzB,UAAI,OAAO,OAAO;AAClB;AAAA;AAEJ,WAAO;AAAA;AAAA,EAEX,OAAO;AACH,QAAI,KAAK,cAAc;AACnB;AAAA;AAEJ,SAAK,eAAe;AAAA;AAAA,QAElB,KAAK,wBAAwB,SAAS;AACxC,WAAO,KAAK,cAAc,wBAAwB;AAAA;AAAA,QAEhD,cAAc,wBAAwB,gBAAgB,OAAO;AAC/D,QAAI;AACJ,QAAI,CAAC,SAAS,yBAAyB;AACnC,eAAS;AACT,UAAI,SAAS,yBAAyB;AAClC,eAAO,KAAK;AAAA,aAEX;AACD,eAAO,UAAU;AAAA;AAErB,UAAI,SAAS,iBAAiB;AAC1B,eAAO,QAAQ;AAAA,aAEd;AACD,eAAO,UAAU,0CAAkB,OAAO;AAAA;AAE9C,aAAO,QAAQ,wBAAS,OAAO;AAAA,WAE9B;AACD,eAAS;AAAA;AAEb,WAAO,KAAK,YAAY;AAAA;AAAA,QAEtB,SAAS,OAAO,gBAAgB,OAAO;AACzC,QAAI,KAAK;AACT,QAAI,SAAS,mBAAmB,mBAAmB,QAAW;AAC1D,YAAM;AAAA,WAEL;AACD,WAAK;AACL,YAAM;AAAA;AAEV,WAAO,KAAK,YAAY,EAAE,IAAQ,KAAK;AAAA;AAAA,QAErC,QAAQ,UAAU,MAAM;AAC1B,QAAI,CAAC,SAAS;AACV;AAAA;AAEJ,SAAK,MAAM,QAAQ,CAAC,MAAM,EAAE;AAAA;AAAA,EAEhC,oBAAoB,MAAM,UAAU;AAChC,SAAK,iBAAiB,oBAAoB,MAAM;AAAA;AAAA,QAE9C,IAAI,IAAI,SAAS,SAAS,OAAO;AACnC,UAAM,SAAS,EAAE;AACjB,QAAI,SAAS,KAAK;AACd,aAAO,KAAK;AAAA,WAEX;AACD,aAAO,UAAU;AAAA;AAErB,QAAI,mBAAmB,aAAa;AAChC,aAAO,UAAU;AAAA,WAEhB;AACD,aAAO,UAAU;AAAA;AAErB,QAAI,SAAS,UAAU;AACnB,aAAO,QAAQ;AAAA,WAEd;AACD,aAAO,UAAU,4BAAW,OAAO;AAAA;AAEvC,WAAO,KAAK,YAAY;AAAA;AAAA,QAEtB,QAAQ,IAAI,SAAS,gBAAgB,OAAO;AAC9C,UAAM,SAAS;AACf,QAAI,cAAc,aAAa;AAC3B,aAAO,UAAU;AACjB,aAAO,MAAM;AACb,aAAO,QAAQ;AAAA,WAEd;AACD,aAAO,KAAK;AACZ,aAAO,UAAU;AACjB,aAAO,MAAM;AACb,aAAO,QAAQ;AAAA;AAEnB,WAAO,KAAK,YAAY;AAAA;AAAA,EAE5B,kBAAkB,UAAU;AACxB,UAAM,MAAM,KAAK;AACjB,QAAI,CAAC,IAAI,QAAQ;AACb,YAAM,IAAI,MAAM,GAAG;AAAA;AAEvB,eAAW,WAAW,KAAK;AACvB,cAAQ,gBAAgB;AAAA;AAAA;AAAA,QAG1B,YAAY,QAAQ;AAtO9B;AAuOQ,UAAM,KAAK,aAAO,OAAP,YAAa,cAAc,KAAK,MAAM,cAAc,QAAU,EAAE,OAAO,QAAQ,QAAQ,UAAU,MAAM,MAAM,eAAe,EAAE,UAAU,OAAO,SAAS,KAAK,WAAW,OAAO;AAC1L,QAAI,eAAe,aAAO,YAAP,YAAkB,SAAS,eAAe;AAC7D,QAAI,CAAC,cAAc;AACf,qBAAe,SAAS,cAAc;AACtC,mBAAa,KAAK;AAClB,eAAS,KAAK,OAAO;AAAA;AAEzB,UAAM,iBAAiB,yBAAyB,SAAS,QAAQ,MAAM,KAAK,OAAO,WAAW,IAAI,UAAU,CAAC,MAAM,EAAE,OAAO;AAC5H,QAAI,YAAY,GAAG;AACf,YAAM,MAAM,KAAK,QAAQ;AACzB,UAAI,OAAO,CAAC,IAAI,WAAW;AACvB,YAAI;AACJ,YAAI,OAAO,UAAU;AAAA;AAAA;AAG7B,QAAI;AACJ,QAAI,aAAa,QAAQ,kBAAkB,UAAU;AACjD,iBAAW;AACX,eAAS,QAAQ,sBAAsB;AAAA,WAEtC;AACD,YAAM,mBAAmB,aAAa,qBAAqB;AAC3D,UAAI,iBAAiB,QAAQ;AACzB,mBAAW,iBAAiB;AAC5B,iBAAS,QAAQ,sBAAsB;AAAA,aAEtC;AACD,mBAAW,SAAS,cAAc;AAClC,iBAAS,QAAQ,sBAAsB;AACvC,qBAAa,YAAY;AAAA;AAAA;AAGjC,QAAI,CAAC,SAAS,MAAM,OAAO;AACvB,eAAS,MAAM,QAAQ;AAAA;AAE3B,QAAI,CAAC,SAAS,MAAM,QAAQ;AACxB,eAAS,MAAM,SAAS;AAAA;AAE5B,UAAM,UAAU,IAAI,UAAU,MAAM,IAAI;AACxC,QAAI,YAAY,GAAG;AACf,UAAI,OAAO,UAAU,GAAG;AAAA,WAEvB;AACD,UAAI,KAAK;AAAA;AAEb,YAAQ,OAAO,WAAW;AAC1B,UAAM,QAAQ;AACd,WAAO;AAAA;AAAA;;;ACpRR,4BAAsB;AAAA,EACzB,cAAc;AACV,SAAK,MAAM;AACX,SAAK,eAAe;AAAA;AAAA,EAExB,YAAY,OAAO;AAPvB;AAQQ,UAAM,aAAa,MAAM,OAAO,WAAW,iBAAW,QAAX,YAAkB,MAAM;AACnE,QAAI,SAAS,MAAM,UAAa,SAAS,MAAM,UAAa,SAAS,MAAM,QAAW;AAClF,aAAO,SAAS;AAAA;AAAA;AAAA,EAGxB,iBAAiB,OAAO;AAb5B;AAcQ,UAAM,aAAa,MAAM,OAAO,WAAW,iBAAW,QAAX,YAAkB,MAAM;AACnE,QAAI,SAAS,MAAM,UAAa,SAAS,MAAM,QAAW;AACtD,aAAO,SAAS;AAAA,QACZ,GAAG,cAAc,SAAS;AAAA,QAC1B,GAAG,cAAc,SAAS;AAAA,QAC1B,GAAG,cAAc,SAAS;AAAA;AAAA;AAAA;AAAA,EAItC,YAAY,OAAO;AACf,QAAI,CAAC,MAAM,WAAW,QAAQ;AAC1B;AAAA;AAEJ,UAAM,QAAQ,sEAAsE,SAAS,MAAM,KAAK;AACxG,WAAO,SACD,WAAW;AAAA,MACT,GAAG,OAAO,SAAS,IAAI,WAAW,OAAO,MAAM;AAAA,MAC/C,GAAG,SAAS,OAAO,IAAI;AAAA,MACvB,GAAG,SAAS,OAAO,IAAI;AAAA,MACvB,GAAG,SAAS,OAAO,IAAI;AAAA,SAEzB;AAAA;AAAA;;;AClCP,4BAAsB;AAAA,EACzB,cAAc;AACV,SAAK,MAAM;AACX,SAAK,eAAe;AAAA;AAAA,EAExB,YAAY,OAAO;AANvB;AAOQ,UAAM,aAAa,MAAM,OAAO,WAAW,iBAAW,QAAX,YAAkB,MAAM;AACnE,QAAI,SAAS,MAAM,QAAW;AAC1B,aAAO;AAAA;AAAA;AAAA,EAGf,iBAAiB,OAAO;AAZ5B;AAaQ,UAAM,aAAa,MAAM,OAAO,WAAW,iBAAW,QAAX,YAAkB,MAAM;AACnE,QAAI,SAAS,MAAM,QAAW;AAC1B,aAAO;AAAA,QACH,GAAG,cAAc,SAAS;AAAA,QAC1B,GAAG,cAAc,SAAS;AAAA,QAC1B,GAAG,cAAc,SAAS;AAAA;AAAA;AAAA;AAAA,EAItC,YAAY,OAAO;AACf,QAAI,CAAC,MAAM,WAAW,KAAK,eAAe;AACtC;AAAA;AAEJ,UAAM,QAAQ,oEAAoE,SAAS,MAAM,KAAK;AACtG,WAAO,SACD;AAAA,MACE,GAAG,OAAO,SAAS,IAAI,WAAW,OAAO,MAAM;AAAA,MAC/C,GAAG,SAAS,OAAO,IAAI;AAAA,MACvB,GAAG,SAAS,OAAO,IAAI;AAAA,MACvB,GAAG,SAAS,OAAO,IAAI;AAAA,QAEzB;AAAA;AAAA;;;AC9BP,gBAAgB;AACnB,QAAM,kBAAkB,IAAI,mBAAmB,kBAAkB,IAAI;AACrE,kBAAgB;AAChB,kBAAgB;AAChB,QAAM,SAAS,IAAI;AACnB,SAAO;AACP,SAAO;AAAA;;;ACRX,IAAM,cAAc;AACpB,IAAI,CAAC,SAAS;AACV,SAAO,cAAc;AAAA;;;ACJzB,IAAM,YAAW,CAAC,QAAQ,OAAO,QAAQ,YAAY,QAAQ;AACtD,qBAAqB,MAAM,MAAM,eAAe,MAAM,OAAO;AAChE,MAAI,CAAC,UAAS,SAAS,CAAC,UAAS,OAAO;AACpC,WAAO,SAAS;AAAA;AAEpB,QAAM,QAAQ,OAAO,KAAK,MAAM,OAAO,SAAO,CAAC,aAAa,OAAO,QAAQ,OAAO,KAAK,MAAM,OAAO,SAAO,CAAC,aAAa;AACzH,MAAI,MAAM,WAAW,MAAM,QAAQ;AAC/B,WAAO;AAAA;AAEX,aAAW,OAAO,OAAO;AACrB,UAAM,SAAS,KAAK,MAAM,SAAS,KAAK;AACxC,QAAI,UAAS,WAAW,UAAS,SAAS;AACtC,UAAI,WAAW,QAAQ,WAAW,MAAM;AACpC;AAAA;AAEJ,UAAI,CAAC,YAAY,QAAQ,QAAQ,eAAe;AAC5C,eAAO;AAAA;AAAA,eAGN,MAAM,QAAQ,WAAW,MAAM,QAAQ,SAAS;AACrD,UAAI,CAAC,kBAAkB,QAAQ,QAAQ,eAAe;AAClD,eAAO;AAAA;AAAA,eAGN,WAAW,QAAQ;AACxB,aAAO;AAAA;AAAA;AAGf,SAAO;AAAA;AAEX,2BAA2B,MAAM,MAAM,cAAc;AACjD,MAAI,KAAK,WAAW,KAAK,QAAQ;AAC7B,WAAO;AAAA;AAEX,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,UAAM,OAAO,KAAK,IAAI,OAAO,KAAK;AAClC,QAAI,MAAM,QAAQ,SAAS,MAAM,QAAQ,OAAO;AAC5C,UAAI,CAAC,kBAAkB,MAAM,MAAM,eAAe;AAC9C,eAAO;AAAA;AAAA,eAGN,UAAS,SAAS,UAAS,OAAO;AACvC,UAAI,CAAC,YAAY,MAAM,MAAM,eAAe;AACxC,eAAO;AAAA;AAAA,eAGN,SAAS,MAAM;AACpB,aAAO;AAAA;AAAA;AAGf,SAAO;AAAA;;;A9E/CX,IAAM,YAAY;AAClB,+BAAwB,uBAAU;AAAA,EAC9B,YAAY,OAAO;AACf,UAAM;AACN,SAAK,QAAQ;AAAA,MACT,MAAM;AAAA,MACN,SAAS;AAAA;AAAA;AAAA,EAGjB,UAAU;AACN,QAAI,CAAC,KAAK,MAAM,SAAS;AACrB;AAAA;AAEJ,SAAK,MAAM,QAAQ;AACnB,SAAK,SAAS;AAAA,MACV,SAAS;AAAA;AAAA;AAAA,EAGjB,sBAAsB,WAAW;AArBrC;AAsBQ,UAAM,cAAc,gBAAU,YAAV,YAAqB,UAAU,QAAQ,iBAAiB,WAAK,MAAM,YAAX,YAAsB,KAAK,MAAM;AAC7G,WAAQ,UAAU,QAAQ,KAAK,MAAM,OACjC,UAAU,OAAO,KAAK,MAAM,MAC5B,UAAU,oBAAoB,KAAK,MAAM,mBACzC,UAAU,cAAc,KAAK,MAAM,aACnC,UAAU,WAAW,KAAK,MAAM,UAChC,UAAU,UAAU,KAAK,MAAM,SAC/B,CAAC,YAAY,UAAU,OAAO,KAAK,MAAM,UACzC,UAAU,SAAS,KAAK,MAAM,QAC9B,UAAU,WAAW,KAAK,MAAM,UAChC,CAAC,YAAY,aAAa,gBAAgB,SAAO,IAAI,WAAW;AAAA;AAAA,EAExE,qBAAqB;AACjB,SAAK;AAAA;AAAA,EAET,cAAc;AACV,SAAK,UAAU,KAAK,MAAM;AACtB,YAAM;AAAA;AAAA;AAAA,EAGd,oBAAoB;AAChB,IAAC,aAAY;AACT,UAAI,KAAK,MAAM,MAAM;AACjB,cAAM,KAAK,MAAM,KAAK;AAAA;AAE1B,WAAK,SAAS;AAAA,QACV,MAAM;AAAA,SACP,YAAY;AACX,cAAM,KAAK;AAAA;AAAA;AAAA;AAAA,EAIvB,uBAAuB;AACnB,SAAK;AAAA;AAAA,EAET,SAAS;AACL,UAAM,EAAE,OAAO,QAAQ,WAAW,iBAAiB,OAAO,KAAK;AAC/D,WAAQ,qBAAM,cAAc,OAAO,EAAE,WAAsB,MACvD,qBAAM,cAAc,UAAU,EAAE,WAAW,iBAAiB,OAAO,iCACxD,KAAK,MAAM,QAD6C;AAAA,MAE3D;AAAA,MACA;AAAA;AAAA;AAAA,QAGV,UAAU;AACZ,SAAK;AACL,UAAM,KAAK;AAAA;AAAA,QAET,gBAAgB;AAtE1B;AAuEQ,QAAI,CAAC,KAAK,MAAM,MAAM;AAClB;AAAA;AAEJ,UAAM,KAAK,iBAAK,MAAM,OAAX,YAAiB,WAAU,aAAa,OAAxC,YAA8C,WAAW,YAAY,MAAM,YAAY,KAAK;AAAA,MACnG,KAAK,KAAK,MAAM;AAAA,MAChB;AAAA,MACA,SAAS,WAAK,MAAM,YAAX,YAAsB,KAAK,MAAM;AAAA;AAE9C,QAAI,KAAK,MAAM,WAAW;AACtB,WAAK,MAAM,UAAU,UAAU;AAAA;AAEnC,SAAK,SAAS;AAAA,MACV,SAAS;AAAA;AAEb,QAAI,KAAK,MAAM,QAAQ;AACnB,YAAM,KAAK,MAAM,OAAO;AAAA;AAAA;AAAA;AAIpC,WAAU,eAAe;AAAA,EACrB,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,OAAO;AAAA,EACP,KAAK;AAAA,EACL,IAAI;AAAA;AAER,IAAO,oBAAQ;;;A+EjGf,IAAO,cAAQ;;;ACD+C,IAAO,4BAAQ;",
  "names": []
}
